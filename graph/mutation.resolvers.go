package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"errors"
	"fmt"
	"github.com/woocoos/workflow/service/deployment"

	"github.com/woocoos/workflow/ent"
	"github.com/woocoos/workflow/graph/entgen/types"
	"github.com/woocoos/workflow/graph/generated"
	"github.com/woocoos/workflow/graph/model"
)

// DeployDiagram is the resolver for the deployDiagram field.
func (r *mutationResolver) DeployDiagram(ctx context.Context, input model.DeployDiagramInput) (*ent.Deployment, error) {
	if len(input.Files) == 0 {
		return nil, fmt.Errorf("no files to deploy")
	}
	return r.Deployment.CreateDeployment(ctx, input)
}

// StartProcessInstance is the resolver for the startProcessInstance field.
func (r *mutationResolver) StartProcessInstance(ctx context.Context, input model.StartProcessInput) (*types.WorkflowRun, error) {
	return r.Deployment.StartProcessInstance(ctx, input)
}

// StartWorkflow is the resolver for the startWorkflow field.
func (r *mutationResolver) StartWorkflow(ctx context.Context, input types.WorkflowRun) (bool, error) {
	err := r.Deployment.Engine.Client.SignalWorkflow(ctx, input.ID, input.RunID, "start", nil)
	return err == nil, err
}

// ClaimTask is the resolver for the claimTask field.
func (r *mutationResolver) ClaimTask(ctx context.Context, taskID int) (bool, error) {
	_, err := r.Deployment.ClaimTask(ctx, taskID)
	if errors.Is(err, deployment.ErrTaskHasClaim) {
		return true, err
	}
	return err == nil, err
}

// CompleteTask is the resolver for the completeTask field.
func (r *mutationResolver) CompleteTask(ctx context.Context, input ent.UpdateIdentityLinkInput) (bool, error) {
	panic(fmt.Errorf("not implemented: CompleteTask - completeTask"))
}

// AbandonTask is the resolver for the abandonTask field.
func (r *mutationResolver) AbandonTask(ctx context.Context, taskID int) (bool, error) {
	panic(fmt.Errorf("not implemented: AbandonTask - abandonTask"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
