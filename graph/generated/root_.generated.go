// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/woocoos/workflow/ent"
	"github.com/woocoos/workflow/graph/entgen/types"
	"github.com/woocoos/workflow/graph/model"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	DecisionDef struct {
		AppID            func(childComplexity int) int
		Category         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeploymentID     func(childComplexity int) int
		DgrmResourceName func(childComplexity int) int
		ID               func(childComplexity int) int
		Key              func(childComplexity int) int
		Name             func(childComplexity int) int
		OrgID            func(childComplexity int) int
		ReqDef           func(childComplexity int) int
		ReqDefID         func(childComplexity int) int
		ReqDefKey        func(childComplexity int) int
		ResourceName     func(childComplexity int) int
		Revision         func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Version          func(childComplexity int) int
		VersionTag       func(childComplexity int) int
	}

	DecisionReqDef struct {
		AppID            func(childComplexity int) int
		Category         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DecisionDefs     func(childComplexity int) int
		Deployment       func(childComplexity int) int
		DeploymentID     func(childComplexity int) int
		DgrmResourceName func(childComplexity int) int
		ID               func(childComplexity int) int
		Key              func(childComplexity int) int
		Name             func(childComplexity int) int
		OrgID            func(childComplexity int) int
		ResourceName     func(childComplexity int) int
		Revision         func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Version          func(childComplexity int) int
	}

	Deployment struct {
		AppID        func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DecisionReqs func(childComplexity int) int
		DeployTime   func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		OrgID        func(childComplexity int) int
		ProcDefs     func(childComplexity int) int
		Source       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	IdentityLink struct {
		AssignerID    func(childComplexity int) int
		Comments      func(childComplexity int) int
		GroupID       func(childComplexity int) int
		ID            func(childComplexity int) int
		LinkType      func(childComplexity int) int
		OperationType func(childComplexity int) int
		OrgID         func(childComplexity int) int
		ProcDefID     func(childComplexity int) int
		Task          func(childComplexity int) int
		TaskID        func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	Mutation struct {
		AbandonTask          func(childComplexity int, taskID int) int
		ClaimTask            func(childComplexity int, taskID int) int
		CompleteTask         func(childComplexity int, input ent.UpdateIdentityLinkInput) int
		DeployDiagram        func(childComplexity int, input model.DeployDiagramInput) int
		StartProcessInstance func(childComplexity int, input model.StartProcessInput) int
		StartWorkflow        func(childComplexity int, input types.WorkflowRun) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	ProcDef struct {
		AppID            func(childComplexity int) int
		Category         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		Deployment       func(childComplexity int) int
		DeploymentID     func(childComplexity int) int
		DgrmResourceName func(childComplexity int) int
		ID               func(childComplexity int) int
		Key              func(childComplexity int) int
		Name             func(childComplexity int) int
		OrgID            func(childComplexity int) int
		ProcInstances    func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.ProcInstOrder, where *ent.ProcInstWhereInput) int
		ResourceName     func(childComplexity int) int
		Revision         func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Version          func(childComplexity int) int
		VersionTag       func(childComplexity int) int
	}

	ProcInst struct {
		AppID            func(childComplexity int) int
		BusinessKey      func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedReason    func(childComplexity int) int
		DeletedTime      func(childComplexity int) int
		Duration         func(childComplexity int) int
		EndTime          func(childComplexity int) int
		ID               func(childComplexity int) int
		OrgID            func(childComplexity int) int
		ProcDef          func(childComplexity int) int
		ProcDefID        func(childComplexity int) int
		RootInstanceID   func(childComplexity int) int
		StartTime        func(childComplexity int) int
		StartUserID      func(childComplexity int) int
		Status           func(childComplexity int) int
		SupperInstanceID func(childComplexity int) int
		Tasks            func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.TaskWhereInput) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
	}

	ProcInstConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProcInstEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Deployments func(childComplexity int) int
		Node        func(childComplexity int, id string) int
		Nodes       func(childComplexity int, ids []string) int
		ProcInsts   func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.ProcInstOrder, where *ent.ProcInstWhereInput) int
		Tasks       func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.TaskWhereInput) int
	}

	Task struct {
		AgreeCount      func(childComplexity int) int
		Assignee        func(childComplexity int) int
		Comments        func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ExecutionID     func(childComplexity int) int
		ID              func(childComplexity int) int
		Kind            func(childComplexity int) int
		MemberCount     func(childComplexity int) int
		OrgID           func(childComplexity int) int
		ParentID        func(childComplexity int) int
		ProcDefID       func(childComplexity int) int
		ProcInst        func(childComplexity int) int
		ProcInstID      func(childComplexity int) int
		RunID           func(childComplexity int) int
		Sequential      func(childComplexity int) int
		Status          func(childComplexity int) int
		TaskDefKey      func(childComplexity int) int
		TaskIdentities  func(childComplexity int) int
		UnfinishedCount func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	TaskConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TaskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	WorkflowRun struct {
		ID    func(childComplexity int) int
		RunID func(childComplexity int) int
	}
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "DecisionDef.appID":
		if e.complexity.DecisionDef.AppID == nil {
			break
		}

		return e.complexity.DecisionDef.AppID(childComplexity), true

	case "DecisionDef.category":
		if e.complexity.DecisionDef.Category == nil {
			break
		}

		return e.complexity.DecisionDef.Category(childComplexity), true

	case "DecisionDef.createdAt":
		if e.complexity.DecisionDef.CreatedAt == nil {
			break
		}

		return e.complexity.DecisionDef.CreatedAt(childComplexity), true

	case "DecisionDef.createdBy":
		if e.complexity.DecisionDef.CreatedBy == nil {
			break
		}

		return e.complexity.DecisionDef.CreatedBy(childComplexity), true

	case "DecisionDef.deploymentID":
		if e.complexity.DecisionDef.DeploymentID == nil {
			break
		}

		return e.complexity.DecisionDef.DeploymentID(childComplexity), true

	case "DecisionDef.dgrmResourceName":
		if e.complexity.DecisionDef.DgrmResourceName == nil {
			break
		}

		return e.complexity.DecisionDef.DgrmResourceName(childComplexity), true

	case "DecisionDef.id":
		if e.complexity.DecisionDef.ID == nil {
			break
		}

		return e.complexity.DecisionDef.ID(childComplexity), true

	case "DecisionDef.key":
		if e.complexity.DecisionDef.Key == nil {
			break
		}

		return e.complexity.DecisionDef.Key(childComplexity), true

	case "DecisionDef.name":
		if e.complexity.DecisionDef.Name == nil {
			break
		}

		return e.complexity.DecisionDef.Name(childComplexity), true

	case "DecisionDef.orgID":
		if e.complexity.DecisionDef.OrgID == nil {
			break
		}

		return e.complexity.DecisionDef.OrgID(childComplexity), true

	case "DecisionDef.reqDef":
		if e.complexity.DecisionDef.ReqDef == nil {
			break
		}

		return e.complexity.DecisionDef.ReqDef(childComplexity), true

	case "DecisionDef.reqDefID":
		if e.complexity.DecisionDef.ReqDefID == nil {
			break
		}

		return e.complexity.DecisionDef.ReqDefID(childComplexity), true

	case "DecisionDef.reqDefKey":
		if e.complexity.DecisionDef.ReqDefKey == nil {
			break
		}

		return e.complexity.DecisionDef.ReqDefKey(childComplexity), true

	case "DecisionDef.resourceName":
		if e.complexity.DecisionDef.ResourceName == nil {
			break
		}

		return e.complexity.DecisionDef.ResourceName(childComplexity), true

	case "DecisionDef.revision":
		if e.complexity.DecisionDef.Revision == nil {
			break
		}

		return e.complexity.DecisionDef.Revision(childComplexity), true

	case "DecisionDef.updatedAt":
		if e.complexity.DecisionDef.UpdatedAt == nil {
			break
		}

		return e.complexity.DecisionDef.UpdatedAt(childComplexity), true

	case "DecisionDef.updatedBy":
		if e.complexity.DecisionDef.UpdatedBy == nil {
			break
		}

		return e.complexity.DecisionDef.UpdatedBy(childComplexity), true

	case "DecisionDef.version":
		if e.complexity.DecisionDef.Version == nil {
			break
		}

		return e.complexity.DecisionDef.Version(childComplexity), true

	case "DecisionDef.versionTag":
		if e.complexity.DecisionDef.VersionTag == nil {
			break
		}

		return e.complexity.DecisionDef.VersionTag(childComplexity), true

	case "DecisionReqDef.appID":
		if e.complexity.DecisionReqDef.AppID == nil {
			break
		}

		return e.complexity.DecisionReqDef.AppID(childComplexity), true

	case "DecisionReqDef.category":
		if e.complexity.DecisionReqDef.Category == nil {
			break
		}

		return e.complexity.DecisionReqDef.Category(childComplexity), true

	case "DecisionReqDef.createdAt":
		if e.complexity.DecisionReqDef.CreatedAt == nil {
			break
		}

		return e.complexity.DecisionReqDef.CreatedAt(childComplexity), true

	case "DecisionReqDef.createdBy":
		if e.complexity.DecisionReqDef.CreatedBy == nil {
			break
		}

		return e.complexity.DecisionReqDef.CreatedBy(childComplexity), true

	case "DecisionReqDef.decisionDefs":
		if e.complexity.DecisionReqDef.DecisionDefs == nil {
			break
		}

		return e.complexity.DecisionReqDef.DecisionDefs(childComplexity), true

	case "DecisionReqDef.deployment":
		if e.complexity.DecisionReqDef.Deployment == nil {
			break
		}

		return e.complexity.DecisionReqDef.Deployment(childComplexity), true

	case "DecisionReqDef.deploymentID":
		if e.complexity.DecisionReqDef.DeploymentID == nil {
			break
		}

		return e.complexity.DecisionReqDef.DeploymentID(childComplexity), true

	case "DecisionReqDef.dgrmResourceName":
		if e.complexity.DecisionReqDef.DgrmResourceName == nil {
			break
		}

		return e.complexity.DecisionReqDef.DgrmResourceName(childComplexity), true

	case "DecisionReqDef.id":
		if e.complexity.DecisionReqDef.ID == nil {
			break
		}

		return e.complexity.DecisionReqDef.ID(childComplexity), true

	case "DecisionReqDef.key":
		if e.complexity.DecisionReqDef.Key == nil {
			break
		}

		return e.complexity.DecisionReqDef.Key(childComplexity), true

	case "DecisionReqDef.name":
		if e.complexity.DecisionReqDef.Name == nil {
			break
		}

		return e.complexity.DecisionReqDef.Name(childComplexity), true

	case "DecisionReqDef.orgID":
		if e.complexity.DecisionReqDef.OrgID == nil {
			break
		}

		return e.complexity.DecisionReqDef.OrgID(childComplexity), true

	case "DecisionReqDef.resourceName":
		if e.complexity.DecisionReqDef.ResourceName == nil {
			break
		}

		return e.complexity.DecisionReqDef.ResourceName(childComplexity), true

	case "DecisionReqDef.revision":
		if e.complexity.DecisionReqDef.Revision == nil {
			break
		}

		return e.complexity.DecisionReqDef.Revision(childComplexity), true

	case "DecisionReqDef.updatedAt":
		if e.complexity.DecisionReqDef.UpdatedAt == nil {
			break
		}

		return e.complexity.DecisionReqDef.UpdatedAt(childComplexity), true

	case "DecisionReqDef.updatedBy":
		if e.complexity.DecisionReqDef.UpdatedBy == nil {
			break
		}

		return e.complexity.DecisionReqDef.UpdatedBy(childComplexity), true

	case "DecisionReqDef.version":
		if e.complexity.DecisionReqDef.Version == nil {
			break
		}

		return e.complexity.DecisionReqDef.Version(childComplexity), true

	case "Deployment.appID":
		if e.complexity.Deployment.AppID == nil {
			break
		}

		return e.complexity.Deployment.AppID(childComplexity), true

	case "Deployment.createdAt":
		if e.complexity.Deployment.CreatedAt == nil {
			break
		}

		return e.complexity.Deployment.CreatedAt(childComplexity), true

	case "Deployment.createdBy":
		if e.complexity.Deployment.CreatedBy == nil {
			break
		}

		return e.complexity.Deployment.CreatedBy(childComplexity), true

	case "Deployment.decisionReqs":
		if e.complexity.Deployment.DecisionReqs == nil {
			break
		}

		return e.complexity.Deployment.DecisionReqs(childComplexity), true

	case "Deployment.deployTime":
		if e.complexity.Deployment.DeployTime == nil {
			break
		}

		return e.complexity.Deployment.DeployTime(childComplexity), true

	case "Deployment.id":
		if e.complexity.Deployment.ID == nil {
			break
		}

		return e.complexity.Deployment.ID(childComplexity), true

	case "Deployment.name":
		if e.complexity.Deployment.Name == nil {
			break
		}

		return e.complexity.Deployment.Name(childComplexity), true

	case "Deployment.orgID":
		if e.complexity.Deployment.OrgID == nil {
			break
		}

		return e.complexity.Deployment.OrgID(childComplexity), true

	case "Deployment.procDefs":
		if e.complexity.Deployment.ProcDefs == nil {
			break
		}

		return e.complexity.Deployment.ProcDefs(childComplexity), true

	case "Deployment.source":
		if e.complexity.Deployment.Source == nil {
			break
		}

		return e.complexity.Deployment.Source(childComplexity), true

	case "Deployment.updatedAt":
		if e.complexity.Deployment.UpdatedAt == nil {
			break
		}

		return e.complexity.Deployment.UpdatedAt(childComplexity), true

	case "Deployment.updatedBy":
		if e.complexity.Deployment.UpdatedBy == nil {
			break
		}

		return e.complexity.Deployment.UpdatedBy(childComplexity), true

	case "IdentityLink.assignerID":
		if e.complexity.IdentityLink.AssignerID == nil {
			break
		}

		return e.complexity.IdentityLink.AssignerID(childComplexity), true

	case "IdentityLink.comments":
		if e.complexity.IdentityLink.Comments == nil {
			break
		}

		return e.complexity.IdentityLink.Comments(childComplexity), true

	case "IdentityLink.groupID":
		if e.complexity.IdentityLink.GroupID == nil {
			break
		}

		return e.complexity.IdentityLink.GroupID(childComplexity), true

	case "IdentityLink.id":
		if e.complexity.IdentityLink.ID == nil {
			break
		}

		return e.complexity.IdentityLink.ID(childComplexity), true

	case "IdentityLink.linkType":
		if e.complexity.IdentityLink.LinkType == nil {
			break
		}

		return e.complexity.IdentityLink.LinkType(childComplexity), true

	case "IdentityLink.operationType":
		if e.complexity.IdentityLink.OperationType == nil {
			break
		}

		return e.complexity.IdentityLink.OperationType(childComplexity), true

	case "IdentityLink.orgID":
		if e.complexity.IdentityLink.OrgID == nil {
			break
		}

		return e.complexity.IdentityLink.OrgID(childComplexity), true

	case "IdentityLink.procDefID":
		if e.complexity.IdentityLink.ProcDefID == nil {
			break
		}

		return e.complexity.IdentityLink.ProcDefID(childComplexity), true

	case "IdentityLink.task":
		if e.complexity.IdentityLink.Task == nil {
			break
		}

		return e.complexity.IdentityLink.Task(childComplexity), true

	case "IdentityLink.taskID":
		if e.complexity.IdentityLink.TaskID == nil {
			break
		}

		return e.complexity.IdentityLink.TaskID(childComplexity), true

	case "IdentityLink.userID":
		if e.complexity.IdentityLink.UserID == nil {
			break
		}

		return e.complexity.IdentityLink.UserID(childComplexity), true

	case "Mutation.abandonTask":
		if e.complexity.Mutation.AbandonTask == nil {
			break
		}

		args, err := ec.field_Mutation_abandonTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AbandonTask(childComplexity, args["taskID"].(int)), true

	case "Mutation.claimTask":
		if e.complexity.Mutation.ClaimTask == nil {
			break
		}

		args, err := ec.field_Mutation_claimTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClaimTask(childComplexity, args["taskID"].(int)), true

	case "Mutation.completeTask":
		if e.complexity.Mutation.CompleteTask == nil {
			break
		}

		args, err := ec.field_Mutation_completeTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CompleteTask(childComplexity, args["input"].(ent.UpdateIdentityLinkInput)), true

	case "Mutation.deployDiagram":
		if e.complexity.Mutation.DeployDiagram == nil {
			break
		}

		args, err := ec.field_Mutation_deployDiagram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeployDiagram(childComplexity, args["input"].(model.DeployDiagramInput)), true

	case "Mutation.startProcessInstance":
		if e.complexity.Mutation.StartProcessInstance == nil {
			break
		}

		args, err := ec.field_Mutation_startProcessInstance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartProcessInstance(childComplexity, args["input"].(model.StartProcessInput)), true

	case "Mutation.startWorkflow":
		if e.complexity.Mutation.StartWorkflow == nil {
			break
		}

		args, err := ec.field_Mutation_startWorkflow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartWorkflow(childComplexity, args["input"].(types.WorkflowRun)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "ProcDef.appID":
		if e.complexity.ProcDef.AppID == nil {
			break
		}

		return e.complexity.ProcDef.AppID(childComplexity), true

	case "ProcDef.category":
		if e.complexity.ProcDef.Category == nil {
			break
		}

		return e.complexity.ProcDef.Category(childComplexity), true

	case "ProcDef.createdAt":
		if e.complexity.ProcDef.CreatedAt == nil {
			break
		}

		return e.complexity.ProcDef.CreatedAt(childComplexity), true

	case "ProcDef.createdBy":
		if e.complexity.ProcDef.CreatedBy == nil {
			break
		}

		return e.complexity.ProcDef.CreatedBy(childComplexity), true

	case "ProcDef.deployment":
		if e.complexity.ProcDef.Deployment == nil {
			break
		}

		return e.complexity.ProcDef.Deployment(childComplexity), true

	case "ProcDef.deploymentID":
		if e.complexity.ProcDef.DeploymentID == nil {
			break
		}

		return e.complexity.ProcDef.DeploymentID(childComplexity), true

	case "ProcDef.dgrmResourceName":
		if e.complexity.ProcDef.DgrmResourceName == nil {
			break
		}

		return e.complexity.ProcDef.DgrmResourceName(childComplexity), true

	case "ProcDef.id":
		if e.complexity.ProcDef.ID == nil {
			break
		}

		return e.complexity.ProcDef.ID(childComplexity), true

	case "ProcDef.key":
		if e.complexity.ProcDef.Key == nil {
			break
		}

		return e.complexity.ProcDef.Key(childComplexity), true

	case "ProcDef.name":
		if e.complexity.ProcDef.Name == nil {
			break
		}

		return e.complexity.ProcDef.Name(childComplexity), true

	case "ProcDef.orgID":
		if e.complexity.ProcDef.OrgID == nil {
			break
		}

		return e.complexity.ProcDef.OrgID(childComplexity), true

	case "ProcDef.procInstances":
		if e.complexity.ProcDef.ProcInstances == nil {
			break
		}

		args, err := ec.field_ProcDef_procInstances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProcDef.ProcInstances(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.ProcInstOrder), args["where"].(*ent.ProcInstWhereInput)), true

	case "ProcDef.resourceName":
		if e.complexity.ProcDef.ResourceName == nil {
			break
		}

		return e.complexity.ProcDef.ResourceName(childComplexity), true

	case "ProcDef.revision":
		if e.complexity.ProcDef.Revision == nil {
			break
		}

		return e.complexity.ProcDef.Revision(childComplexity), true

	case "ProcDef.status":
		if e.complexity.ProcDef.Status == nil {
			break
		}

		return e.complexity.ProcDef.Status(childComplexity), true

	case "ProcDef.updatedAt":
		if e.complexity.ProcDef.UpdatedAt == nil {
			break
		}

		return e.complexity.ProcDef.UpdatedAt(childComplexity), true

	case "ProcDef.updatedBy":
		if e.complexity.ProcDef.UpdatedBy == nil {
			break
		}

		return e.complexity.ProcDef.UpdatedBy(childComplexity), true

	case "ProcDef.version":
		if e.complexity.ProcDef.Version == nil {
			break
		}

		return e.complexity.ProcDef.Version(childComplexity), true

	case "ProcDef.versionTag":
		if e.complexity.ProcDef.VersionTag == nil {
			break
		}

		return e.complexity.ProcDef.VersionTag(childComplexity), true

	case "ProcInst.appID":
		if e.complexity.ProcInst.AppID == nil {
			break
		}

		return e.complexity.ProcInst.AppID(childComplexity), true

	case "ProcInst.businessKey":
		if e.complexity.ProcInst.BusinessKey == nil {
			break
		}

		return e.complexity.ProcInst.BusinessKey(childComplexity), true

	case "ProcInst.createdAt":
		if e.complexity.ProcInst.CreatedAt == nil {
			break
		}

		return e.complexity.ProcInst.CreatedAt(childComplexity), true

	case "ProcInst.createdBy":
		if e.complexity.ProcInst.CreatedBy == nil {
			break
		}

		return e.complexity.ProcInst.CreatedBy(childComplexity), true

	case "ProcInst.deletedReason":
		if e.complexity.ProcInst.DeletedReason == nil {
			break
		}

		return e.complexity.ProcInst.DeletedReason(childComplexity), true

	case "ProcInst.deletedTime":
		if e.complexity.ProcInst.DeletedTime == nil {
			break
		}

		return e.complexity.ProcInst.DeletedTime(childComplexity), true

	case "ProcInst.duration":
		if e.complexity.ProcInst.Duration == nil {
			break
		}

		return e.complexity.ProcInst.Duration(childComplexity), true

	case "ProcInst.endTime":
		if e.complexity.ProcInst.EndTime == nil {
			break
		}

		return e.complexity.ProcInst.EndTime(childComplexity), true

	case "ProcInst.id":
		if e.complexity.ProcInst.ID == nil {
			break
		}

		return e.complexity.ProcInst.ID(childComplexity), true

	case "ProcInst.orgID":
		if e.complexity.ProcInst.OrgID == nil {
			break
		}

		return e.complexity.ProcInst.OrgID(childComplexity), true

	case "ProcInst.procDef":
		if e.complexity.ProcInst.ProcDef == nil {
			break
		}

		return e.complexity.ProcInst.ProcDef(childComplexity), true

	case "ProcInst.procDefID":
		if e.complexity.ProcInst.ProcDefID == nil {
			break
		}

		return e.complexity.ProcInst.ProcDefID(childComplexity), true

	case "ProcInst.rootInstanceID":
		if e.complexity.ProcInst.RootInstanceID == nil {
			break
		}

		return e.complexity.ProcInst.RootInstanceID(childComplexity), true

	case "ProcInst.startTime":
		if e.complexity.ProcInst.StartTime == nil {
			break
		}

		return e.complexity.ProcInst.StartTime(childComplexity), true

	case "ProcInst.startUserID":
		if e.complexity.ProcInst.StartUserID == nil {
			break
		}

		return e.complexity.ProcInst.StartUserID(childComplexity), true

	case "ProcInst.status":
		if e.complexity.ProcInst.Status == nil {
			break
		}

		return e.complexity.ProcInst.Status(childComplexity), true

	case "ProcInst.supperInstanceID":
		if e.complexity.ProcInst.SupperInstanceID == nil {
			break
		}

		return e.complexity.ProcInst.SupperInstanceID(childComplexity), true

	case "ProcInst.tasks":
		if e.complexity.ProcInst.Tasks == nil {
			break
		}

		args, err := ec.field_ProcInst_tasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ProcInst.Tasks(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.TaskWhereInput)), true

	case "ProcInst.updatedAt":
		if e.complexity.ProcInst.UpdatedAt == nil {
			break
		}

		return e.complexity.ProcInst.UpdatedAt(childComplexity), true

	case "ProcInst.updatedBy":
		if e.complexity.ProcInst.UpdatedBy == nil {
			break
		}

		return e.complexity.ProcInst.UpdatedBy(childComplexity), true

	case "ProcInstConnection.edges":
		if e.complexity.ProcInstConnection.Edges == nil {
			break
		}

		return e.complexity.ProcInstConnection.Edges(childComplexity), true

	case "ProcInstConnection.pageInfo":
		if e.complexity.ProcInstConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProcInstConnection.PageInfo(childComplexity), true

	case "ProcInstConnection.totalCount":
		if e.complexity.ProcInstConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProcInstConnection.TotalCount(childComplexity), true

	case "ProcInstEdge.cursor":
		if e.complexity.ProcInstEdge.Cursor == nil {
			break
		}

		return e.complexity.ProcInstEdge.Cursor(childComplexity), true

	case "ProcInstEdge.node":
		if e.complexity.ProcInstEdge.Node == nil {
			break
		}

		return e.complexity.ProcInstEdge.Node(childComplexity), true

	case "Query.deployments":
		if e.complexity.Query.Deployments == nil {
			break
		}

		return e.complexity.Query.Deployments(childComplexity), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Query.procInsts":
		if e.complexity.Query.ProcInsts == nil {
			break
		}

		args, err := ec.field_Query_procInsts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProcInsts(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.ProcInstOrder), args["where"].(*ent.ProcInstWhereInput)), true

	case "Query.tasks":
		if e.complexity.Query.Tasks == nil {
			break
		}

		args, err := ec.field_Query_tasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tasks(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.TaskWhereInput)), true

	case "Task.agreeCount":
		if e.complexity.Task.AgreeCount == nil {
			break
		}

		return e.complexity.Task.AgreeCount(childComplexity), true

	case "Task.assignee":
		if e.complexity.Task.Assignee == nil {
			break
		}

		return e.complexity.Task.Assignee(childComplexity), true

	case "Task.comments":
		if e.complexity.Task.Comments == nil {
			break
		}

		return e.complexity.Task.Comments(childComplexity), true

	case "Task.createdAt":
		if e.complexity.Task.CreatedAt == nil {
			break
		}

		return e.complexity.Task.CreatedAt(childComplexity), true

	case "Task.executionID":
		if e.complexity.Task.ExecutionID == nil {
			break
		}

		return e.complexity.Task.ExecutionID(childComplexity), true

	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true

	case "Task.kind":
		if e.complexity.Task.Kind == nil {
			break
		}

		return e.complexity.Task.Kind(childComplexity), true

	case "Task.memberCount":
		if e.complexity.Task.MemberCount == nil {
			break
		}

		return e.complexity.Task.MemberCount(childComplexity), true

	case "Task.orgID":
		if e.complexity.Task.OrgID == nil {
			break
		}

		return e.complexity.Task.OrgID(childComplexity), true

	case "Task.parentID":
		if e.complexity.Task.ParentID == nil {
			break
		}

		return e.complexity.Task.ParentID(childComplexity), true

	case "Task.procDefID":
		if e.complexity.Task.ProcDefID == nil {
			break
		}

		return e.complexity.Task.ProcDefID(childComplexity), true

	case "Task.procInst":
		if e.complexity.Task.ProcInst == nil {
			break
		}

		return e.complexity.Task.ProcInst(childComplexity), true

	case "Task.procInstID":
		if e.complexity.Task.ProcInstID == nil {
			break
		}

		return e.complexity.Task.ProcInstID(childComplexity), true

	case "Task.runID":
		if e.complexity.Task.RunID == nil {
			break
		}

		return e.complexity.Task.RunID(childComplexity), true

	case "Task.sequential":
		if e.complexity.Task.Sequential == nil {
			break
		}

		return e.complexity.Task.Sequential(childComplexity), true

	case "Task.status":
		if e.complexity.Task.Status == nil {
			break
		}

		return e.complexity.Task.Status(childComplexity), true

	case "Task.taskDefKey":
		if e.complexity.Task.TaskDefKey == nil {
			break
		}

		return e.complexity.Task.TaskDefKey(childComplexity), true

	case "Task.taskIdentities":
		if e.complexity.Task.TaskIdentities == nil {
			break
		}

		return e.complexity.Task.TaskIdentities(childComplexity), true

	case "Task.unfinishedCount":
		if e.complexity.Task.UnfinishedCount == nil {
			break
		}

		return e.complexity.Task.UnfinishedCount(childComplexity), true

	case "Task.updatedAt":
		if e.complexity.Task.UpdatedAt == nil {
			break
		}

		return e.complexity.Task.UpdatedAt(childComplexity), true

	case "TaskConnection.edges":
		if e.complexity.TaskConnection.Edges == nil {
			break
		}

		return e.complexity.TaskConnection.Edges(childComplexity), true

	case "TaskConnection.pageInfo":
		if e.complexity.TaskConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskConnection.PageInfo(childComplexity), true

	case "TaskConnection.totalCount":
		if e.complexity.TaskConnection.TotalCount == nil {
			break
		}

		return e.complexity.TaskConnection.TotalCount(childComplexity), true

	case "TaskEdge.cursor":
		if e.complexity.TaskEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskEdge.Cursor(childComplexity), true

	case "TaskEdge.node":
		if e.complexity.TaskEdge.Node == nil {
			break
		}

		return e.complexity.TaskEdge.Node(childComplexity), true

	case "WorkflowRun.id":
		if e.complexity.WorkflowRun.ID == nil {
			break
		}

		return e.complexity.WorkflowRun.ID(childComplexity), true

	case "WorkflowRun.runID":
		if e.complexity.WorkflowRun.RunID == nil {
			break
		}

		return e.complexity.WorkflowRun.RunID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateDeploymentInput,
		ec.unmarshalInputCreateIdentityLinkInput,
		ec.unmarshalInputDecisionDefOrder,
		ec.unmarshalInputDecisionDefWhereInput,
		ec.unmarshalInputDecisionReqDefOrder,
		ec.unmarshalInputDecisionReqDefWhereInput,
		ec.unmarshalInputDeployDiagramInput,
		ec.unmarshalInputDeploymentOrder,
		ec.unmarshalInputDeploymentWhereInput,
		ec.unmarshalInputIdentityLinkWhereInput,
		ec.unmarshalInputProcDefOrder,
		ec.unmarshalInputProcDefWhereInput,
		ec.unmarshalInputProcInstOrder,
		ec.unmarshalInputProcInstWhereInput,
		ec.unmarshalInputStartProcessInput,
		ec.unmarshalInputTaskWhereInput,
		ec.unmarshalInputUpdateDeploymentInput,
		ec.unmarshalInputUpdateIdentityLinkInput,
		ec.unmarshalInputUploadFile,
		ec.unmarshalInputVariableInput,
		ec.unmarshalInputWorkflowRunInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../api/graphql/ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateDeploymentInput is used for create Deployment object.
Input was generated by ent.
"""
input CreateDeploymentInput {
  """所属根组织ID"""
  orgID: ID!
  """所属应用ID"""
  appID: ID!
  """名称"""
  name: String
  """来源"""
  source: String
  """部署时间"""
  deployTime: Time
  procDefIDs: [ID!]
  decisionReqIDs: [ID!]
}
"""
CreateIdentityLinkInput is used for create IdentityLink object.
Input was generated by ent.
"""
input CreateIdentityLinkInput {
  """流程定义ID"""
  procDefID: ID!
  """组ID"""
  groupID: ID
  """用户ID"""
  userID: ID
  """分配人"""
  assignerID: ID
  """分配,候选,参与,上级,抄送"""
  linkType: IdentityLinkLinkType!
  """组织ID"""
  orgID: ID!
  """操作类型"""
  operationType: IdentityLinkOperationType!
  """评论"""
  comments: String
  taskID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DecisionDef implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """部署ID"""
  deploymentID: Int!
  """所属根组织ID"""
  orgID: ID!
  """所属应用ID"""
  appID: ID!
  """决策定义ID"""
  reqDefID: ID!
  """分类"""
  category: String
  """名称"""
  name: String
  """KEY"""
  key: String!
  """决策定义key"""
  reqDefKey: String!
  """版本"""
  version: Int!
  """小版本"""
  revision: Int
  """版本标签"""
  versionTag: String
  """资源名称"""
  resourceName: String
  """流程图资源名称"""
  dgrmResourceName: String
  reqDef: DecisionReqDef!
}
"""Ordering options for DecisionDef connections"""
input DecisionDefOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order DecisionDefs."""
  field: DecisionDefOrderField!
}
"""Properties by which DecisionDef connections can be ordered."""
enum DecisionDefOrderField {
  createdAt
}
"""
DecisionDefWhereInput is used for filtering DecisionDef objects.
Input was generated by ent.
"""
input DecisionDefWhereInput {
  not: DecisionDefWhereInput
  and: [DecisionDefWhereInput!]
  or: [DecisionDefWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """deployment_id field predicates"""
  deploymentID: Int
  deploymentIDNEQ: Int
  deploymentIDIn: [Int!]
  deploymentIDNotIn: [Int!]
  deploymentIDGT: Int
  deploymentIDGTE: Int
  deploymentIDLT: Int
  deploymentIDLTE: Int
  """org_id field predicates"""
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDGT: ID
  orgIDGTE: ID
  orgIDLT: ID
  orgIDLTE: ID
  """app_id field predicates"""
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDGT: ID
  appIDGTE: ID
  appIDLT: ID
  appIDLTE: ID
  """req_def_id field predicates"""
  reqDefID: ID
  reqDefIDNEQ: ID
  reqDefIDIn: [ID!]
  reqDefIDNotIn: [ID!]
  """category field predicates"""
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """key field predicates"""
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """req_def_key field predicates"""
  reqDefKey: String
  reqDefKeyNEQ: String
  reqDefKeyIn: [String!]
  reqDefKeyNotIn: [String!]
  reqDefKeyGT: String
  reqDefKeyGTE: String
  reqDefKeyLT: String
  reqDefKeyLTE: String
  reqDefKeyContains: String
  reqDefKeyHasPrefix: String
  reqDefKeyHasSuffix: String
  reqDefKeyEqualFold: String
  reqDefKeyContainsFold: String
  """version field predicates"""
  version: Int
  versionNEQ: Int
  versionIn: [Int!]
  versionNotIn: [Int!]
  versionGT: Int
  versionGTE: Int
  versionLT: Int
  versionLTE: Int
  """revision field predicates"""
  revision: Int
  revisionNEQ: Int
  revisionIn: [Int!]
  revisionNotIn: [Int!]
  revisionGT: Int
  revisionGTE: Int
  revisionLT: Int
  revisionLTE: Int
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  """version_tag field predicates"""
  versionTag: String
  versionTagNEQ: String
  versionTagIn: [String!]
  versionTagNotIn: [String!]
  versionTagGT: String
  versionTagGTE: String
  versionTagLT: String
  versionTagLTE: String
  versionTagContains: String
  versionTagHasPrefix: String
  versionTagHasSuffix: String
  versionTagIsNil: Boolean
  versionTagNotNil: Boolean
  versionTagEqualFold: String
  versionTagContainsFold: String
  """resource_name field predicates"""
  resourceName: String
  resourceNameNEQ: String
  resourceNameIn: [String!]
  resourceNameNotIn: [String!]
  resourceNameGT: String
  resourceNameGTE: String
  resourceNameLT: String
  resourceNameLTE: String
  resourceNameContains: String
  resourceNameHasPrefix: String
  resourceNameHasSuffix: String
  resourceNameIsNil: Boolean
  resourceNameNotNil: Boolean
  resourceNameEqualFold: String
  resourceNameContainsFold: String
  """dgrm_resource_name field predicates"""
  dgrmResourceName: String
  dgrmResourceNameNEQ: String
  dgrmResourceNameIn: [String!]
  dgrmResourceNameNotIn: [String!]
  dgrmResourceNameGT: String
  dgrmResourceNameGTE: String
  dgrmResourceNameLT: String
  dgrmResourceNameLTE: String
  dgrmResourceNameContains: String
  dgrmResourceNameHasPrefix: String
  dgrmResourceNameHasSuffix: String
  dgrmResourceNameIsNil: Boolean
  dgrmResourceNameNotNil: Boolean
  dgrmResourceNameEqualFold: String
  dgrmResourceNameContainsFold: String
  """req_def edge predicates"""
  hasReqDef: Boolean
  hasReqDefWith: [DecisionReqDefWhereInput!]
}
type DecisionReqDef implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """部署ID"""
  deploymentID: ID!
  """所属根组织ID"""
  orgID: ID!
  """所属应用ID"""
  appID: ID!
  """分类"""
  category: String
  """名称"""
  name: String
  """KEY"""
  key: String!
  """版本"""
  version: Int!
  """小版本"""
  revision: Int
  """资源名称"""
  resourceName: String
  """流程图资源名称"""
  dgrmResourceName: String
  deployment: Deployment!
  decisionDefs: [DecisionDef!]
}
"""Ordering options for DecisionReqDef connections"""
input DecisionReqDefOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order DecisionReqDefs."""
  field: DecisionReqDefOrderField!
}
"""Properties by which DecisionReqDef connections can be ordered."""
enum DecisionReqDefOrderField {
  createdAt
}
"""
DecisionReqDefWhereInput is used for filtering DecisionReqDef objects.
Input was generated by ent.
"""
input DecisionReqDefWhereInput {
  not: DecisionReqDefWhereInput
  and: [DecisionReqDefWhereInput!]
  or: [DecisionReqDefWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """deployment_id field predicates"""
  deploymentID: ID
  deploymentIDNEQ: ID
  deploymentIDIn: [ID!]
  deploymentIDNotIn: [ID!]
  """org_id field predicates"""
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDGT: ID
  orgIDGTE: ID
  orgIDLT: ID
  orgIDLTE: ID
  """app_id field predicates"""
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDGT: ID
  appIDGTE: ID
  appIDLT: ID
  appIDLTE: ID
  """category field predicates"""
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """key field predicates"""
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """version field predicates"""
  version: Int
  versionNEQ: Int
  versionIn: [Int!]
  versionNotIn: [Int!]
  versionGT: Int
  versionGTE: Int
  versionLT: Int
  versionLTE: Int
  """revision field predicates"""
  revision: Int
  revisionNEQ: Int
  revisionIn: [Int!]
  revisionNotIn: [Int!]
  revisionGT: Int
  revisionGTE: Int
  revisionLT: Int
  revisionLTE: Int
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  """resource_name field predicates"""
  resourceName: String
  resourceNameNEQ: String
  resourceNameIn: [String!]
  resourceNameNotIn: [String!]
  resourceNameGT: String
  resourceNameGTE: String
  resourceNameLT: String
  resourceNameLTE: String
  resourceNameContains: String
  resourceNameHasPrefix: String
  resourceNameHasSuffix: String
  resourceNameIsNil: Boolean
  resourceNameNotNil: Boolean
  resourceNameEqualFold: String
  resourceNameContainsFold: String
  """dgrm_resource_name field predicates"""
  dgrmResourceName: String
  dgrmResourceNameNEQ: String
  dgrmResourceNameIn: [String!]
  dgrmResourceNameNotIn: [String!]
  dgrmResourceNameGT: String
  dgrmResourceNameGTE: String
  dgrmResourceNameLT: String
  dgrmResourceNameLTE: String
  dgrmResourceNameContains: String
  dgrmResourceNameHasPrefix: String
  dgrmResourceNameHasSuffix: String
  dgrmResourceNameIsNil: Boolean
  dgrmResourceNameNotNil: Boolean
  dgrmResourceNameEqualFold: String
  dgrmResourceNameContainsFold: String
  """deployment edge predicates"""
  hasDeployment: Boolean
  hasDeploymentWith: [DeploymentWhereInput!]
  """decision_defs edge predicates"""
  hasDecisionDefs: Boolean
  hasDecisionDefsWith: [DecisionDefWhereInput!]
}
type Deployment implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """所属根组织ID"""
  orgID: ID!
  """所属应用ID"""
  appID: ID!
  """名称"""
  name: String
  """来源"""
  source: String
  """部署时间"""
  deployTime: Time!
  procDefs: [ProcDef!]
  decisionReqs: [DecisionReqDef!]
}
"""Ordering options for Deployment connections"""
input DeploymentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Deployments."""
  field: DeploymentOrderField!
}
"""Properties by which Deployment connections can be ordered."""
enum DeploymentOrderField {
  createdAt
}
"""
DeploymentWhereInput is used for filtering Deployment objects.
Input was generated by ent.
"""
input DeploymentWhereInput {
  not: DeploymentWhereInput
  and: [DeploymentWhereInput!]
  or: [DeploymentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """org_id field predicates"""
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDGT: ID
  orgIDGTE: ID
  orgIDLT: ID
  orgIDLTE: ID
  """app_id field predicates"""
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDGT: ID
  appIDGTE: ID
  appIDLT: ID
  appIDLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """source field predicates"""
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """deploy_time field predicates"""
  deployTime: Time
  deployTimeNEQ: Time
  deployTimeIn: [Time!]
  deployTimeNotIn: [Time!]
  deployTimeGT: Time
  deployTimeGTE: Time
  deployTimeLT: Time
  deployTimeLTE: Time
  """proc_defs edge predicates"""
  hasProcDefs: Boolean
  hasProcDefsWith: [ProcDefWhereInput!]
  """decision_reqs edge predicates"""
  hasDecisionReqs: Boolean
  hasDecisionReqsWith: [DecisionReqDefWhereInput!]
}
type IdentityLink implements Node {
  id: ID!
  """流程实例ID"""
  taskID: ID!
  """流程定义ID"""
  procDefID: ID!
  """组ID"""
  groupID: ID
  """用户ID"""
  userID: ID
  """分配人"""
  assignerID: ID
  """分配,候选,参与,上级,抄送"""
  linkType: IdentityLinkLinkType!
  """组织ID"""
  orgID: ID!
  """操作类型"""
  operationType: IdentityLinkOperationType!
  """评论"""
  comments: String
  task: Task!
}
"""IdentityLinkLinkType is enum for the field link_type"""
enum IdentityLinkLinkType @goModel(model: "github.com/woocoos/workflow/ent/identitylink.LinkType") {
  assignee
  candidate
  participant
  manager
  notifier
}
"""IdentityLinkOperationType is enum for the field operation_type"""
enum IdentityLinkOperationType @goModel(model: "github.com/woocoos/workflow/ent/identitylink.OperationType") {
  add
  delete
  pass
  reject
}
"""
IdentityLinkWhereInput is used for filtering IdentityLink objects.
Input was generated by ent.
"""
input IdentityLinkWhereInput {
  not: IdentityLinkWhereInput
  and: [IdentityLinkWhereInput!]
  or: [IdentityLinkWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """task_id field predicates"""
  taskID: ID
  taskIDNEQ: ID
  taskIDIn: [ID!]
  taskIDNotIn: [ID!]
  """proc_def_id field predicates"""
  procDefID: ID
  procDefIDNEQ: ID
  procDefIDIn: [ID!]
  procDefIDNotIn: [ID!]
  procDefIDGT: ID
  procDefIDGTE: ID
  procDefIDLT: ID
  procDefIDLTE: ID
  """group_id field predicates"""
  groupID: ID
  groupIDNEQ: ID
  groupIDIn: [ID!]
  groupIDNotIn: [ID!]
  groupIDGT: ID
  groupIDGTE: ID
  groupIDLT: ID
  groupIDLTE: ID
  groupIDIsNil: Boolean
  groupIDNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """assigner_id field predicates"""
  assignerID: ID
  assignerIDNEQ: ID
  assignerIDIn: [ID!]
  assignerIDNotIn: [ID!]
  assignerIDGT: ID
  assignerIDGTE: ID
  assignerIDLT: ID
  assignerIDLTE: ID
  assignerIDIsNil: Boolean
  assignerIDNotNil: Boolean
  """link_type field predicates"""
  linkType: IdentityLinkLinkType
  linkTypeNEQ: IdentityLinkLinkType
  linkTypeIn: [IdentityLinkLinkType!]
  linkTypeNotIn: [IdentityLinkLinkType!]
  """org_id field predicates"""
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDGT: ID
  orgIDGTE: ID
  orgIDLT: ID
  orgIDLTE: ID
  """operation_type field predicates"""
  operationType: IdentityLinkOperationType
  operationTypeNEQ: IdentityLinkOperationType
  operationTypeIn: [IdentityLinkOperationType!]
  operationTypeNotIn: [IdentityLinkOperationType!]
  """comments field predicates"""
  comments: String
  commentsNEQ: String
  commentsIn: [String!]
  commentsNotIn: [String!]
  commentsGT: String
  commentsGTE: String
  commentsLT: String
  commentsLTE: String
  commentsContains: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIsNil: Boolean
  commentsNotNil: Boolean
  commentsEqualFold: String
  commentsContainsFold: String
  """task edge predicates"""
  hasTask: Boolean
  hasTaskWith: [TaskWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/woocoos/workflow/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument."""
  ASC
  """Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type ProcDef implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """部署ID"""
  deploymentID: ID!
  """所属根组织ID"""
  orgID: ID!
  """所属应用ID"""
  appID: ID!
  """分类"""
  category: String
  """名称"""
  name: String
  """KEY"""
  key: String!
  """版本"""
  version: Int
  """小版本"""
  revision: Int
  """版本标签"""
  versionTag: String
  """资源名称"""
  resourceName: String
  """流程图资源名称"""
  dgrmResourceName: String
  """状态"""
  status: ProcDefStatus!
  deployment: Deployment!
  procInstances(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProcInsts returned from the connection."""
    orderBy: ProcInstOrder

    """Filtering options for ProcInsts returned from the connection."""
    where: ProcInstWhereInput
  ): ProcInstConnection!
}
"""Ordering options for ProcDef connections"""
input ProcDefOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProcDefs."""
  field: ProcDefOrderField!
}
"""Properties by which ProcDef connections can be ordered."""
enum ProcDefOrderField {
  createdAt
}
"""ProcDefStatus is enum for the field status"""
enum ProcDefStatus @goModel(model: "github.com/woocoos/workflow/ent/procdef.Status") {
  active
  suspended
}
"""
ProcDefWhereInput is used for filtering ProcDef objects.
Input was generated by ent.
"""
input ProcDefWhereInput {
  not: ProcDefWhereInput
  and: [ProcDefWhereInput!]
  or: [ProcDefWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """deployment_id field predicates"""
  deploymentID: ID
  deploymentIDNEQ: ID
  deploymentIDIn: [ID!]
  deploymentIDNotIn: [ID!]
  """org_id field predicates"""
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDGT: ID
  orgIDGTE: ID
  orgIDLT: ID
  orgIDLTE: ID
  """app_id field predicates"""
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDGT: ID
  appIDGTE: ID
  appIDLT: ID
  appIDLTE: ID
  """category field predicates"""
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """key field predicates"""
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """version field predicates"""
  version: Int
  versionNEQ: Int
  versionIn: [Int!]
  versionNotIn: [Int!]
  versionGT: Int
  versionGTE: Int
  versionLT: Int
  versionLTE: Int
  versionIsNil: Boolean
  versionNotNil: Boolean
  """revision field predicates"""
  revision: Int
  revisionNEQ: Int
  revisionIn: [Int!]
  revisionNotIn: [Int!]
  revisionGT: Int
  revisionGTE: Int
  revisionLT: Int
  revisionLTE: Int
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  """version_tag field predicates"""
  versionTag: String
  versionTagNEQ: String
  versionTagIn: [String!]
  versionTagNotIn: [String!]
  versionTagGT: String
  versionTagGTE: String
  versionTagLT: String
  versionTagLTE: String
  versionTagContains: String
  versionTagHasPrefix: String
  versionTagHasSuffix: String
  versionTagIsNil: Boolean
  versionTagNotNil: Boolean
  versionTagEqualFold: String
  versionTagContainsFold: String
  """resource_name field predicates"""
  resourceName: String
  resourceNameNEQ: String
  resourceNameIn: [String!]
  resourceNameNotIn: [String!]
  resourceNameGT: String
  resourceNameGTE: String
  resourceNameLT: String
  resourceNameLTE: String
  resourceNameContains: String
  resourceNameHasPrefix: String
  resourceNameHasSuffix: String
  resourceNameIsNil: Boolean
  resourceNameNotNil: Boolean
  resourceNameEqualFold: String
  resourceNameContainsFold: String
  """dgrm_resource_name field predicates"""
  dgrmResourceName: String
  dgrmResourceNameNEQ: String
  dgrmResourceNameIn: [String!]
  dgrmResourceNameNotIn: [String!]
  dgrmResourceNameGT: String
  dgrmResourceNameGTE: String
  dgrmResourceNameLT: String
  dgrmResourceNameLTE: String
  dgrmResourceNameContains: String
  dgrmResourceNameHasPrefix: String
  dgrmResourceNameHasSuffix: String
  dgrmResourceNameIsNil: Boolean
  dgrmResourceNameNotNil: Boolean
  dgrmResourceNameEqualFold: String
  dgrmResourceNameContainsFold: String
  """status field predicates"""
  status: ProcDefStatus
  statusNEQ: ProcDefStatus
  statusIn: [ProcDefStatus!]
  statusNotIn: [ProcDefStatus!]
  """deployment edge predicates"""
  hasDeployment: Boolean
  hasDeploymentWith: [DeploymentWhereInput!]
  """proc_instances edge predicates"""
  hasProcInstances: Boolean
  hasProcInstancesWith: [ProcInstWhereInput!]
}
type ProcInst implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """流程定义ID"""
  procDefID: ID!
  """所属根组织ID"""
  orgID: ID!
  """所属应用ID"""
  appID: ID!
  """业务主键"""
  businessKey: String!
  """开始时间"""
  startTime: Time!
  """结束时间"""
  endTime: Time
  """持续时间"""
  duration: Int
  """发起人ID/名称"""
  startUserID: ID!
  """父流程实例ID"""
  supperInstanceID: Int
  """根流程实例ID"""
  rootInstanceID: Int
  """删除时间"""
  deletedTime: Time
  """删除原因"""
  deletedReason: String
  """状态"""
  status: ProcInstStatus!
  procDef: ProcDef!
  tasks(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Tasks returned from the connection."""
    where: TaskWhereInput
  ): TaskConnection!
}
"""A connection to a list of items."""
type ProcInstConnection {
  """A list of edges."""
  edges: [ProcInstEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProcInstEdge {
  """The item at the end of the edge."""
  node: ProcInst
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ProcInst connections"""
input ProcInstOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProcInsts."""
  field: ProcInstOrderField!
}
"""Properties by which ProcInst connections can be ordered."""
enum ProcInstOrderField {
  createdAt
}
"""ProcInstStatus is enum for the field status"""
enum ProcInstStatus @goModel(model: "github.com/woocoos/workflow/ent/procinst.Status") {
  ready
  active
  completed
  failed
  terminated
  suspended
  deleted
}
"""
ProcInstWhereInput is used for filtering ProcInst objects.
Input was generated by ent.
"""
input ProcInstWhereInput {
  not: ProcInstWhereInput
  and: [ProcInstWhereInput!]
  or: [ProcInstWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """proc_def_id field predicates"""
  procDefID: ID
  procDefIDNEQ: ID
  procDefIDIn: [ID!]
  procDefIDNotIn: [ID!]
  """org_id field predicates"""
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDGT: ID
  orgIDGTE: ID
  orgIDLT: ID
  orgIDLTE: ID
  """app_id field predicates"""
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDGT: ID
  appIDGTE: ID
  appIDLT: ID
  appIDLTE: ID
  """business_key field predicates"""
  businessKey: String
  businessKeyNEQ: String
  businessKeyIn: [String!]
  businessKeyNotIn: [String!]
  businessKeyGT: String
  businessKeyGTE: String
  businessKeyLT: String
  businessKeyLTE: String
  businessKeyContains: String
  businessKeyHasPrefix: String
  businessKeyHasSuffix: String
  businessKeyEqualFold: String
  businessKeyContainsFold: String
  """start_time field predicates"""
  startTime: Time
  startTimeNEQ: Time
  startTimeIn: [Time!]
  startTimeNotIn: [Time!]
  startTimeGT: Time
  startTimeGTE: Time
  startTimeLT: Time
  startTimeLTE: Time
  """end_time field predicates"""
  endTime: Time
  endTimeNEQ: Time
  endTimeIn: [Time!]
  endTimeNotIn: [Time!]
  endTimeGT: Time
  endTimeGTE: Time
  endTimeLT: Time
  endTimeLTE: Time
  endTimeIsNil: Boolean
  endTimeNotNil: Boolean
  """duration field predicates"""
  duration: Int
  durationNEQ: Int
  durationIn: [Int!]
  durationNotIn: [Int!]
  durationGT: Int
  durationGTE: Int
  durationLT: Int
  durationLTE: Int
  durationIsNil: Boolean
  durationNotNil: Boolean
  """start_user_id field predicates"""
  startUserID: ID
  startUserIDNEQ: ID
  startUserIDIn: [ID!]
  startUserIDNotIn: [ID!]
  startUserIDGT: ID
  startUserIDGTE: ID
  startUserIDLT: ID
  startUserIDLTE: ID
  """supper_instance_id field predicates"""
  supperInstanceID: Int
  supperInstanceIDNEQ: Int
  supperInstanceIDIn: [Int!]
  supperInstanceIDNotIn: [Int!]
  supperInstanceIDGT: Int
  supperInstanceIDGTE: Int
  supperInstanceIDLT: Int
  supperInstanceIDLTE: Int
  supperInstanceIDIsNil: Boolean
  supperInstanceIDNotNil: Boolean
  """root_instance_id field predicates"""
  rootInstanceID: Int
  rootInstanceIDNEQ: Int
  rootInstanceIDIn: [Int!]
  rootInstanceIDNotIn: [Int!]
  rootInstanceIDGT: Int
  rootInstanceIDGTE: Int
  rootInstanceIDLT: Int
  rootInstanceIDLTE: Int
  rootInstanceIDIsNil: Boolean
  rootInstanceIDNotNil: Boolean
  """deleted_time field predicates"""
  deletedTime: Time
  deletedTimeNEQ: Time
  deletedTimeIn: [Time!]
  deletedTimeNotIn: [Time!]
  deletedTimeGT: Time
  deletedTimeGTE: Time
  deletedTimeLT: Time
  deletedTimeLTE: Time
  deletedTimeIsNil: Boolean
  deletedTimeNotNil: Boolean
  """deleted_reason field predicates"""
  deletedReason: String
  deletedReasonNEQ: String
  deletedReasonIn: [String!]
  deletedReasonNotIn: [String!]
  deletedReasonGT: String
  deletedReasonGTE: String
  deletedReasonLT: String
  deletedReasonLTE: String
  deletedReasonContains: String
  deletedReasonHasPrefix: String
  deletedReasonHasSuffix: String
  deletedReasonIsNil: Boolean
  deletedReasonNotNil: Boolean
  deletedReasonEqualFold: String
  deletedReasonContainsFold: String
  """status field predicates"""
  status: ProcInstStatus
  statusNEQ: ProcInstStatus
  statusIn: [ProcInstStatus!]
  statusNotIn: [ProcInstStatus!]
  """proc_def edge predicates"""
  hasProcDef: Boolean
  hasProcDefWith: [ProcDefWhereInput!]
  """tasks edge predicates"""
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: GID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [GID!]!
  ): [Node]!
  deployments: [Deployment!]!
  procInsts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ProcInsts returned from the connection."""
    orderBy: ProcInstOrder

    """Filtering options for ProcInsts returned from the connection."""
    where: ProcInstWhereInput
  ): ProcInstConnection!
  tasks(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Tasks returned from the connection."""
    where: TaskWhereInput
  ): TaskConnection!
}
type Task implements Node {
  id: ID!
  """流程实例ID"""
  procInstID: ID!
  """流程定义ID"""
  procDefID: Int!
  """workflow id"""
  executionID: String!
  """run id"""
  runID: String
  """流程节点名称"""
  taskDefKey: String!
  """父任务ID"""
  parentID: Int
  """任务描述"""
  comments: String
  """设定的受理人"""
  assignee: String
  """任务成员人数"""
  memberCount: Int!
  """未任务成员完成人数"""
  unfinishedCount: Int!
  """通过数量"""
  agreeCount: Int!
  """会签类型"""
  kind: TaskKind!
  """默认并行false,顺序执行true"""
  sequential: Boolean!
  """所属根组织ID"""
  orgID: ID!
  """创建时间"""
  createdAt: Time!
  """创建时间"""
  updatedAt: Time!
  """任务状态"""
  status: TaskStatus!
  procInst: ProcInst!
  taskIdentities: [IdentityLink!]
}
"""A connection to a list of items."""
type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""TaskKind is enum for the field kind"""
enum TaskKind @goModel(model: "github.com/woocoos/workflow/ent/task.Kind") {
  AND
  OR
}
"""TaskStatus is enum for the field status"""
enum TaskStatus @goModel(model: "github.com/woocoos/workflow/ent/task.Status") {
  created
  running
  finished
  canceled
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """proc_inst_id field predicates"""
  procInstID: ID
  procInstIDNEQ: ID
  procInstIDIn: [ID!]
  procInstIDNotIn: [ID!]
  """proc_def_id field predicates"""
  procDefID: Int
  procDefIDNEQ: Int
  procDefIDIn: [Int!]
  procDefIDNotIn: [Int!]
  procDefIDGT: Int
  procDefIDGTE: Int
  procDefIDLT: Int
  procDefIDLTE: Int
  """execution_id field predicates"""
  executionID: String
  executionIDNEQ: String
  executionIDIn: [String!]
  executionIDNotIn: [String!]
  executionIDGT: String
  executionIDGTE: String
  executionIDLT: String
  executionIDLTE: String
  executionIDContains: String
  executionIDHasPrefix: String
  executionIDHasSuffix: String
  executionIDEqualFold: String
  executionIDContainsFold: String
  """run_id field predicates"""
  runID: String
  runIDNEQ: String
  runIDIn: [String!]
  runIDNotIn: [String!]
  runIDGT: String
  runIDGTE: String
  runIDLT: String
  runIDLTE: String
  runIDContains: String
  runIDHasPrefix: String
  runIDHasSuffix: String
  runIDIsNil: Boolean
  runIDNotNil: Boolean
  runIDEqualFold: String
  runIDContainsFold: String
  """task_def_key field predicates"""
  taskDefKey: String
  taskDefKeyNEQ: String
  taskDefKeyIn: [String!]
  taskDefKeyNotIn: [String!]
  taskDefKeyGT: String
  taskDefKeyGTE: String
  taskDefKeyLT: String
  taskDefKeyLTE: String
  taskDefKeyContains: String
  taskDefKeyHasPrefix: String
  taskDefKeyHasSuffix: String
  taskDefKeyEqualFold: String
  taskDefKeyContainsFold: String
  """parent_id field predicates"""
  parentID: Int
  parentIDNEQ: Int
  parentIDIn: [Int!]
  parentIDNotIn: [Int!]
  parentIDGT: Int
  parentIDGTE: Int
  parentIDLT: Int
  parentIDLTE: Int
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  """comments field predicates"""
  comments: String
  commentsNEQ: String
  commentsIn: [String!]
  commentsNotIn: [String!]
  commentsGT: String
  commentsGTE: String
  commentsLT: String
  commentsLTE: String
  commentsContains: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIsNil: Boolean
  commentsNotNil: Boolean
  commentsEqualFold: String
  commentsContainsFold: String
  """assignee field predicates"""
  assignee: String
  assigneeNEQ: String
  assigneeIn: [String!]
  assigneeNotIn: [String!]
  assigneeGT: String
  assigneeGTE: String
  assigneeLT: String
  assigneeLTE: String
  assigneeContains: String
  assigneeHasPrefix: String
  assigneeHasSuffix: String
  assigneeIsNil: Boolean
  assigneeNotNil: Boolean
  assigneeEqualFold: String
  assigneeContainsFold: String
  """member_count field predicates"""
  memberCount: Int
  memberCountNEQ: Int
  memberCountIn: [Int!]
  memberCountNotIn: [Int!]
  memberCountGT: Int
  memberCountGTE: Int
  memberCountLT: Int
  memberCountLTE: Int
  """unfinished_count field predicates"""
  unfinishedCount: Int
  unfinishedCountNEQ: Int
  unfinishedCountIn: [Int!]
  unfinishedCountNotIn: [Int!]
  unfinishedCountGT: Int
  unfinishedCountGTE: Int
  unfinishedCountLT: Int
  unfinishedCountLTE: Int
  """agree_count field predicates"""
  agreeCount: Int
  agreeCountNEQ: Int
  agreeCountIn: [Int!]
  agreeCountNotIn: [Int!]
  agreeCountGT: Int
  agreeCountGTE: Int
  agreeCountLT: Int
  agreeCountLTE: Int
  """kind field predicates"""
  kind: TaskKind
  kindNEQ: TaskKind
  kindIn: [TaskKind!]
  kindNotIn: [TaskKind!]
  """sequential field predicates"""
  sequential: Boolean
  sequentialNEQ: Boolean
  """org_id field predicates"""
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDGT: ID
  orgIDGTE: ID
  orgIDLT: ID
  orgIDLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """status field predicates"""
  status: TaskStatus
  statusNEQ: TaskStatus
  statusIn: [TaskStatus!]
  statusNotIn: [TaskStatus!]
  """proc_inst edge predicates"""
  hasProcInst: Boolean
  hasProcInstWith: [ProcInstWhereInput!]
  """task_identities edge predicates"""
  hasTaskIdentities: Boolean
  hasTaskIdentitiesWith: [IdentityLinkWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateDeploymentInput is used for update Deployment object.
Input was generated by ent.
"""
input UpdateDeploymentInput {
  """名称"""
  name: String
  clearName: Boolean
  """来源"""
  source: String
  clearSource: Boolean
  addProcDefIDs: [ID!]
  removeProcDefIDs: [ID!]
  clearProcDefs: Boolean
  addDecisionReqIDs: [ID!]
  removeDecisionReqIDs: [ID!]
  clearDecisionReqs: Boolean
}
"""
UpdateIdentityLinkInput is used for update IdentityLink object.
Input was generated by ent.
"""
input UpdateIdentityLinkInput {
  """组ID"""
  groupID: ID
  clearGroupID: Boolean
  """用户ID"""
  userID: ID
  clearUserID: Boolean
  """分配人"""
  assignerID: ID
  clearAssignerID: Boolean
  """分配,候选,参与,上级,抄送"""
  linkType: IdentityLinkLinkType
  """操作类型"""
  operationType: IdentityLinkOperationType
  """评论"""
  comments: String
  clearComments: Boolean
  taskID: ID
  clearTask: Boolean
}
`, BuiltIn: false},
	{Name: "../../api/graphql/types.graphql", Input: `scalar Upload

input UploadFile {
    id: Int!
    file: Upload!
}

input DeployDiagramInput {
    """部署名称"""
    name: String!
    """租户ID,根组织ID"""
    orgID: ID!
    """所属应用"""
    appID: ID!
    """流程文件"""
    files: [UploadFile!]!
}

input StartProcessInput {
    """流程定义ID"""
    procDefKey: String!
    """租户ID,根组织ID"""
    orgID: ID!
    """符合woocoos定义的资源编码"""
    ResID: String!
    """流程变量"""
    variables: [VariableInput!]
}

input VariableInput {
"""变量名称"""
    name: String!
    """变量类型"""
    type: String!
    """变量值"""
    value: String!
}

type WorkflowRun {
    """工作流ID,可通过该ID对工作流进行操作,一般是业务的ID"""
    id: String!
    """工作流执行"""
    runID: String
}

input WorkflowRunInput {
    """工作流ID,可通过该ID对工作流进行操作,一般是业务的ID"""
    id: String!
    """工作流执行"""
    runID: String
}`, BuiltIn: false},
	{Name: "../../api/graphql/query.graphql", Input: `scalar GID`, BuiltIn: false},
	{Name: "../../api/graphql/mutation.graphql", Input: `type Mutation {
    """上传部署流程图"""
    deployDiagram(input: DeployDiagramInput!): Deployment
    """启动工作流实例"""
    startProcessInstance(input: StartProcessInput!): WorkflowRun!
    """启动指定工作流实例"""
    startWorkflow(input: WorkflowRunInput!): Boolean!
    """认领任务"""
    claimTask(taskID: ID!): Boolean!
    """完成任务"""
    completeTask(input: UpdateIdentityLinkInput!): Boolean!
    """放弃任务"""
    abandonTask(taskID: ID!): Boolean!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
