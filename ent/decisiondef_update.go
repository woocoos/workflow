// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/decisiondef"
	"github.com/woocoos/workflow/ent/decisionreqdef"
	"github.com/woocoos/workflow/ent/predicate"

	"github.com/woocoos/workflow/ent/internal"
)

// DecisionDefUpdate is the builder for updating DecisionDef entities.
type DecisionDefUpdate struct {
	config
	hooks    []Hook
	mutation *DecisionDefMutation
}

// Where appends a list predicates to the DecisionDefUpdate builder.
func (ddu *DecisionDefUpdate) Where(ps ...predicate.DecisionDef) *DecisionDefUpdate {
	ddu.mutation.Where(ps...)
	return ddu
}

// SetUpdatedBy sets the "updated_by" field.
func (ddu *DecisionDefUpdate) SetUpdatedBy(i int) *DecisionDefUpdate {
	ddu.mutation.ResetUpdatedBy()
	ddu.mutation.SetUpdatedBy(i)
	return ddu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ddu *DecisionDefUpdate) SetNillableUpdatedBy(i *int) *DecisionDefUpdate {
	if i != nil {
		ddu.SetUpdatedBy(*i)
	}
	return ddu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ddu *DecisionDefUpdate) AddUpdatedBy(i int) *DecisionDefUpdate {
	ddu.mutation.AddUpdatedBy(i)
	return ddu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ddu *DecisionDefUpdate) ClearUpdatedBy() *DecisionDefUpdate {
	ddu.mutation.ClearUpdatedBy()
	return ddu
}

// SetUpdatedAt sets the "updated_at" field.
func (ddu *DecisionDefUpdate) SetUpdatedAt(t time.Time) *DecisionDefUpdate {
	ddu.mutation.SetUpdatedAt(t)
	return ddu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ddu *DecisionDefUpdate) SetNillableUpdatedAt(t *time.Time) *DecisionDefUpdate {
	if t != nil {
		ddu.SetUpdatedAt(*t)
	}
	return ddu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ddu *DecisionDefUpdate) ClearUpdatedAt() *DecisionDefUpdate {
	ddu.mutation.ClearUpdatedAt()
	return ddu
}

// SetReqDefID sets the "req_def_id" field.
func (ddu *DecisionDefUpdate) SetReqDefID(i int) *DecisionDefUpdate {
	ddu.mutation.SetReqDefID(i)
	return ddu
}

// SetCategory sets the "category" field.
func (ddu *DecisionDefUpdate) SetCategory(s string) *DecisionDefUpdate {
	ddu.mutation.SetCategory(s)
	return ddu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ddu *DecisionDefUpdate) SetNillableCategory(s *string) *DecisionDefUpdate {
	if s != nil {
		ddu.SetCategory(*s)
	}
	return ddu
}

// ClearCategory clears the value of the "category" field.
func (ddu *DecisionDefUpdate) ClearCategory() *DecisionDefUpdate {
	ddu.mutation.ClearCategory()
	return ddu
}

// SetName sets the "name" field.
func (ddu *DecisionDefUpdate) SetName(s string) *DecisionDefUpdate {
	ddu.mutation.SetName(s)
	return ddu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ddu *DecisionDefUpdate) SetNillableName(s *string) *DecisionDefUpdate {
	if s != nil {
		ddu.SetName(*s)
	}
	return ddu
}

// ClearName clears the value of the "name" field.
func (ddu *DecisionDefUpdate) ClearName() *DecisionDefUpdate {
	ddu.mutation.ClearName()
	return ddu
}

// SetKey sets the "key" field.
func (ddu *DecisionDefUpdate) SetKey(s string) *DecisionDefUpdate {
	ddu.mutation.SetKey(s)
	return ddu
}

// SetReqDefKey sets the "req_def_key" field.
func (ddu *DecisionDefUpdate) SetReqDefKey(s string) *DecisionDefUpdate {
	ddu.mutation.SetReqDefKey(s)
	return ddu
}

// SetVersion sets the "version" field.
func (ddu *DecisionDefUpdate) SetVersion(i int32) *DecisionDefUpdate {
	ddu.mutation.ResetVersion()
	ddu.mutation.SetVersion(i)
	return ddu
}

// AddVersion adds i to the "version" field.
func (ddu *DecisionDefUpdate) AddVersion(i int32) *DecisionDefUpdate {
	ddu.mutation.AddVersion(i)
	return ddu
}

// SetRevision sets the "revision" field.
func (ddu *DecisionDefUpdate) SetRevision(i int32) *DecisionDefUpdate {
	ddu.mutation.ResetRevision()
	ddu.mutation.SetRevision(i)
	return ddu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (ddu *DecisionDefUpdate) SetNillableRevision(i *int32) *DecisionDefUpdate {
	if i != nil {
		ddu.SetRevision(*i)
	}
	return ddu
}

// AddRevision adds i to the "revision" field.
func (ddu *DecisionDefUpdate) AddRevision(i int32) *DecisionDefUpdate {
	ddu.mutation.AddRevision(i)
	return ddu
}

// ClearRevision clears the value of the "revision" field.
func (ddu *DecisionDefUpdate) ClearRevision() *DecisionDefUpdate {
	ddu.mutation.ClearRevision()
	return ddu
}

// SetVersionTag sets the "version_tag" field.
func (ddu *DecisionDefUpdate) SetVersionTag(s string) *DecisionDefUpdate {
	ddu.mutation.SetVersionTag(s)
	return ddu
}

// SetNillableVersionTag sets the "version_tag" field if the given value is not nil.
func (ddu *DecisionDefUpdate) SetNillableVersionTag(s *string) *DecisionDefUpdate {
	if s != nil {
		ddu.SetVersionTag(*s)
	}
	return ddu
}

// ClearVersionTag clears the value of the "version_tag" field.
func (ddu *DecisionDefUpdate) ClearVersionTag() *DecisionDefUpdate {
	ddu.mutation.ClearVersionTag()
	return ddu
}

// SetReqDef sets the "req_def" edge to the DecisionReqDef entity.
func (ddu *DecisionDefUpdate) SetReqDef(d *DecisionReqDef) *DecisionDefUpdate {
	return ddu.SetReqDefID(d.ID)
}

// Mutation returns the DecisionDefMutation object of the builder.
func (ddu *DecisionDefUpdate) Mutation() *DecisionDefMutation {
	return ddu.mutation
}

// ClearReqDef clears the "req_def" edge to the DecisionReqDef entity.
func (ddu *DecisionDefUpdate) ClearReqDef() *DecisionDefUpdate {
	ddu.mutation.ClearReqDef()
	return ddu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ddu *DecisionDefUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ddu.sqlSave, ddu.mutation, ddu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ddu *DecisionDefUpdate) SaveX(ctx context.Context) int {
	affected, err := ddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ddu *DecisionDefUpdate) Exec(ctx context.Context) error {
	_, err := ddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddu *DecisionDefUpdate) ExecX(ctx context.Context) {
	if err := ddu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ddu *DecisionDefUpdate) check() error {
	if _, ok := ddu.mutation.ReqDefID(); ddu.mutation.ReqDefCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DecisionDef.req_def"`)
	}
	return nil
}

func (ddu *DecisionDefUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ddu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(decisiondef.Table, decisiondef.Columns, sqlgraph.NewFieldSpec(decisiondef.FieldID, field.TypeInt))
	if ps := ddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ddu.mutation.UpdatedBy(); ok {
		_spec.SetField(decisiondef.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ddu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(decisiondef.FieldUpdatedBy, field.TypeInt, value)
	}
	if ddu.mutation.UpdatedByCleared() {
		_spec.ClearField(decisiondef.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ddu.mutation.UpdatedAt(); ok {
		_spec.SetField(decisiondef.FieldUpdatedAt, field.TypeTime, value)
	}
	if ddu.mutation.UpdatedAtCleared() {
		_spec.ClearField(decisiondef.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ddu.mutation.Category(); ok {
		_spec.SetField(decisiondef.FieldCategory, field.TypeString, value)
	}
	if ddu.mutation.CategoryCleared() {
		_spec.ClearField(decisiondef.FieldCategory, field.TypeString)
	}
	if value, ok := ddu.mutation.Name(); ok {
		_spec.SetField(decisiondef.FieldName, field.TypeString, value)
	}
	if ddu.mutation.NameCleared() {
		_spec.ClearField(decisiondef.FieldName, field.TypeString)
	}
	if value, ok := ddu.mutation.Key(); ok {
		_spec.SetField(decisiondef.FieldKey, field.TypeString, value)
	}
	if value, ok := ddu.mutation.ReqDefKey(); ok {
		_spec.SetField(decisiondef.FieldReqDefKey, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Version(); ok {
		_spec.SetField(decisiondef.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := ddu.mutation.AddedVersion(); ok {
		_spec.AddField(decisiondef.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := ddu.mutation.Revision(); ok {
		_spec.SetField(decisiondef.FieldRevision, field.TypeInt32, value)
	}
	if value, ok := ddu.mutation.AddedRevision(); ok {
		_spec.AddField(decisiondef.FieldRevision, field.TypeInt32, value)
	}
	if ddu.mutation.RevisionCleared() {
		_spec.ClearField(decisiondef.FieldRevision, field.TypeInt32)
	}
	if value, ok := ddu.mutation.VersionTag(); ok {
		_spec.SetField(decisiondef.FieldVersionTag, field.TypeString, value)
	}
	if ddu.mutation.VersionTagCleared() {
		_spec.ClearField(decisiondef.FieldVersionTag, field.TypeString)
	}
	if ddu.mutation.ReqDefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   decisiondef.ReqDefTable,
			Columns: []string{decisiondef.ReqDefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt),
			},
		}
		edge.Schema = ddu.schemaConfig.DecisionDef
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ddu.mutation.ReqDefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   decisiondef.ReqDefTable,
			Columns: []string{decisiondef.ReqDefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt),
			},
		}
		edge.Schema = ddu.schemaConfig.DecisionDef
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ddu.schemaConfig.DecisionDef
	ctx = internal.NewSchemaConfigContext(ctx, ddu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, ddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{decisiondef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ddu.mutation.done = true
	return n, nil
}

// DecisionDefUpdateOne is the builder for updating a single DecisionDef entity.
type DecisionDefUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DecisionDefMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (dduo *DecisionDefUpdateOne) SetUpdatedBy(i int) *DecisionDefUpdateOne {
	dduo.mutation.ResetUpdatedBy()
	dduo.mutation.SetUpdatedBy(i)
	return dduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dduo *DecisionDefUpdateOne) SetNillableUpdatedBy(i *int) *DecisionDefUpdateOne {
	if i != nil {
		dduo.SetUpdatedBy(*i)
	}
	return dduo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dduo *DecisionDefUpdateOne) AddUpdatedBy(i int) *DecisionDefUpdateOne {
	dduo.mutation.AddUpdatedBy(i)
	return dduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dduo *DecisionDefUpdateOne) ClearUpdatedBy() *DecisionDefUpdateOne {
	dduo.mutation.ClearUpdatedBy()
	return dduo
}

// SetUpdatedAt sets the "updated_at" field.
func (dduo *DecisionDefUpdateOne) SetUpdatedAt(t time.Time) *DecisionDefUpdateOne {
	dduo.mutation.SetUpdatedAt(t)
	return dduo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dduo *DecisionDefUpdateOne) SetNillableUpdatedAt(t *time.Time) *DecisionDefUpdateOne {
	if t != nil {
		dduo.SetUpdatedAt(*t)
	}
	return dduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (dduo *DecisionDefUpdateOne) ClearUpdatedAt() *DecisionDefUpdateOne {
	dduo.mutation.ClearUpdatedAt()
	return dduo
}

// SetReqDefID sets the "req_def_id" field.
func (dduo *DecisionDefUpdateOne) SetReqDefID(i int) *DecisionDefUpdateOne {
	dduo.mutation.SetReqDefID(i)
	return dduo
}

// SetCategory sets the "category" field.
func (dduo *DecisionDefUpdateOne) SetCategory(s string) *DecisionDefUpdateOne {
	dduo.mutation.SetCategory(s)
	return dduo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (dduo *DecisionDefUpdateOne) SetNillableCategory(s *string) *DecisionDefUpdateOne {
	if s != nil {
		dduo.SetCategory(*s)
	}
	return dduo
}

// ClearCategory clears the value of the "category" field.
func (dduo *DecisionDefUpdateOne) ClearCategory() *DecisionDefUpdateOne {
	dduo.mutation.ClearCategory()
	return dduo
}

// SetName sets the "name" field.
func (dduo *DecisionDefUpdateOne) SetName(s string) *DecisionDefUpdateOne {
	dduo.mutation.SetName(s)
	return dduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dduo *DecisionDefUpdateOne) SetNillableName(s *string) *DecisionDefUpdateOne {
	if s != nil {
		dduo.SetName(*s)
	}
	return dduo
}

// ClearName clears the value of the "name" field.
func (dduo *DecisionDefUpdateOne) ClearName() *DecisionDefUpdateOne {
	dduo.mutation.ClearName()
	return dduo
}

// SetKey sets the "key" field.
func (dduo *DecisionDefUpdateOne) SetKey(s string) *DecisionDefUpdateOne {
	dduo.mutation.SetKey(s)
	return dduo
}

// SetReqDefKey sets the "req_def_key" field.
func (dduo *DecisionDefUpdateOne) SetReqDefKey(s string) *DecisionDefUpdateOne {
	dduo.mutation.SetReqDefKey(s)
	return dduo
}

// SetVersion sets the "version" field.
func (dduo *DecisionDefUpdateOne) SetVersion(i int32) *DecisionDefUpdateOne {
	dduo.mutation.ResetVersion()
	dduo.mutation.SetVersion(i)
	return dduo
}

// AddVersion adds i to the "version" field.
func (dduo *DecisionDefUpdateOne) AddVersion(i int32) *DecisionDefUpdateOne {
	dduo.mutation.AddVersion(i)
	return dduo
}

// SetRevision sets the "revision" field.
func (dduo *DecisionDefUpdateOne) SetRevision(i int32) *DecisionDefUpdateOne {
	dduo.mutation.ResetRevision()
	dduo.mutation.SetRevision(i)
	return dduo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (dduo *DecisionDefUpdateOne) SetNillableRevision(i *int32) *DecisionDefUpdateOne {
	if i != nil {
		dduo.SetRevision(*i)
	}
	return dduo
}

// AddRevision adds i to the "revision" field.
func (dduo *DecisionDefUpdateOne) AddRevision(i int32) *DecisionDefUpdateOne {
	dduo.mutation.AddRevision(i)
	return dduo
}

// ClearRevision clears the value of the "revision" field.
func (dduo *DecisionDefUpdateOne) ClearRevision() *DecisionDefUpdateOne {
	dduo.mutation.ClearRevision()
	return dduo
}

// SetVersionTag sets the "version_tag" field.
func (dduo *DecisionDefUpdateOne) SetVersionTag(s string) *DecisionDefUpdateOne {
	dduo.mutation.SetVersionTag(s)
	return dduo
}

// SetNillableVersionTag sets the "version_tag" field if the given value is not nil.
func (dduo *DecisionDefUpdateOne) SetNillableVersionTag(s *string) *DecisionDefUpdateOne {
	if s != nil {
		dduo.SetVersionTag(*s)
	}
	return dduo
}

// ClearVersionTag clears the value of the "version_tag" field.
func (dduo *DecisionDefUpdateOne) ClearVersionTag() *DecisionDefUpdateOne {
	dduo.mutation.ClearVersionTag()
	return dduo
}

// SetReqDef sets the "req_def" edge to the DecisionReqDef entity.
func (dduo *DecisionDefUpdateOne) SetReqDef(d *DecisionReqDef) *DecisionDefUpdateOne {
	return dduo.SetReqDefID(d.ID)
}

// Mutation returns the DecisionDefMutation object of the builder.
func (dduo *DecisionDefUpdateOne) Mutation() *DecisionDefMutation {
	return dduo.mutation
}

// ClearReqDef clears the "req_def" edge to the DecisionReqDef entity.
func (dduo *DecisionDefUpdateOne) ClearReqDef() *DecisionDefUpdateOne {
	dduo.mutation.ClearReqDef()
	return dduo
}

// Where appends a list predicates to the DecisionDefUpdate builder.
func (dduo *DecisionDefUpdateOne) Where(ps ...predicate.DecisionDef) *DecisionDefUpdateOne {
	dduo.mutation.Where(ps...)
	return dduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dduo *DecisionDefUpdateOne) Select(field string, fields ...string) *DecisionDefUpdateOne {
	dduo.fields = append([]string{field}, fields...)
	return dduo
}

// Save executes the query and returns the updated DecisionDef entity.
func (dduo *DecisionDefUpdateOne) Save(ctx context.Context) (*DecisionDef, error) {
	return withHooks(ctx, dduo.sqlSave, dduo.mutation, dduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dduo *DecisionDefUpdateOne) SaveX(ctx context.Context) *DecisionDef {
	node, err := dduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dduo *DecisionDefUpdateOne) Exec(ctx context.Context) error {
	_, err := dduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dduo *DecisionDefUpdateOne) ExecX(ctx context.Context) {
	if err := dduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dduo *DecisionDefUpdateOne) check() error {
	if _, ok := dduo.mutation.ReqDefID(); dduo.mutation.ReqDefCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DecisionDef.req_def"`)
	}
	return nil
}

func (dduo *DecisionDefUpdateOne) sqlSave(ctx context.Context) (_node *DecisionDef, err error) {
	if err := dduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(decisiondef.Table, decisiondef.Columns, sqlgraph.NewFieldSpec(decisiondef.FieldID, field.TypeInt))
	id, ok := dduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DecisionDef.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, decisiondef.FieldID)
		for _, f := range fields {
			if !decisiondef.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != decisiondef.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dduo.mutation.UpdatedBy(); ok {
		_spec.SetField(decisiondef.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := dduo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(decisiondef.FieldUpdatedBy, field.TypeInt, value)
	}
	if dduo.mutation.UpdatedByCleared() {
		_spec.ClearField(decisiondef.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := dduo.mutation.UpdatedAt(); ok {
		_spec.SetField(decisiondef.FieldUpdatedAt, field.TypeTime, value)
	}
	if dduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(decisiondef.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dduo.mutation.Category(); ok {
		_spec.SetField(decisiondef.FieldCategory, field.TypeString, value)
	}
	if dduo.mutation.CategoryCleared() {
		_spec.ClearField(decisiondef.FieldCategory, field.TypeString)
	}
	if value, ok := dduo.mutation.Name(); ok {
		_spec.SetField(decisiondef.FieldName, field.TypeString, value)
	}
	if dduo.mutation.NameCleared() {
		_spec.ClearField(decisiondef.FieldName, field.TypeString)
	}
	if value, ok := dduo.mutation.Key(); ok {
		_spec.SetField(decisiondef.FieldKey, field.TypeString, value)
	}
	if value, ok := dduo.mutation.ReqDefKey(); ok {
		_spec.SetField(decisiondef.FieldReqDefKey, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Version(); ok {
		_spec.SetField(decisiondef.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := dduo.mutation.AddedVersion(); ok {
		_spec.AddField(decisiondef.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := dduo.mutation.Revision(); ok {
		_spec.SetField(decisiondef.FieldRevision, field.TypeInt32, value)
	}
	if value, ok := dduo.mutation.AddedRevision(); ok {
		_spec.AddField(decisiondef.FieldRevision, field.TypeInt32, value)
	}
	if dduo.mutation.RevisionCleared() {
		_spec.ClearField(decisiondef.FieldRevision, field.TypeInt32)
	}
	if value, ok := dduo.mutation.VersionTag(); ok {
		_spec.SetField(decisiondef.FieldVersionTag, field.TypeString, value)
	}
	if dduo.mutation.VersionTagCleared() {
		_spec.ClearField(decisiondef.FieldVersionTag, field.TypeString)
	}
	if dduo.mutation.ReqDefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   decisiondef.ReqDefTable,
			Columns: []string{decisiondef.ReqDefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt),
			},
		}
		edge.Schema = dduo.schemaConfig.DecisionDef
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dduo.mutation.ReqDefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   decisiondef.ReqDefTable,
			Columns: []string{decisiondef.ReqDefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt),
			},
		}
		edge.Schema = dduo.schemaConfig.DecisionDef
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = dduo.schemaConfig.DecisionDef
	ctx = internal.NewSchemaConfigContext(ctx, dduo.schemaConfig)
	_node = &DecisionDef{config: dduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{decisiondef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dduo.mutation.done = true
	return _node, nil
}
