// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/identitylink"
	"github.com/woocoos/workflow/ent/predicate"
	"github.com/woocoos/workflow/ent/procinst"
	"github.com/woocoos/workflow/ent/task"

	"github.com/woocoos/workflow/ent/internal"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetProcInstID sets the "proc_inst_id" field.
func (tu *TaskUpdate) SetProcInstID(i int) *TaskUpdate {
	tu.mutation.SetProcInstID(i)
	return tu
}

// SetProcDefID sets the "proc_def_id" field.
func (tu *TaskUpdate) SetProcDefID(i int) *TaskUpdate {
	tu.mutation.ResetProcDefID()
	tu.mutation.SetProcDefID(i)
	return tu
}

// AddProcDefID adds i to the "proc_def_id" field.
func (tu *TaskUpdate) AddProcDefID(i int) *TaskUpdate {
	tu.mutation.AddProcDefID(i)
	return tu
}

// SetExecutionID sets the "execution_id" field.
func (tu *TaskUpdate) SetExecutionID(s string) *TaskUpdate {
	tu.mutation.SetExecutionID(s)
	return tu
}

// SetRunID sets the "run_id" field.
func (tu *TaskUpdate) SetRunID(s string) *TaskUpdate {
	tu.mutation.SetRunID(s)
	return tu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRunID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetRunID(*s)
	}
	return tu
}

// ClearRunID clears the value of the "run_id" field.
func (tu *TaskUpdate) ClearRunID() *TaskUpdate {
	tu.mutation.ClearRunID()
	return tu
}

// SetTaskDefKey sets the "task_def_key" field.
func (tu *TaskUpdate) SetTaskDefKey(s string) *TaskUpdate {
	tu.mutation.SetTaskDefKey(s)
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TaskUpdate) SetParentID(i int) *TaskUpdate {
	tu.mutation.ResetParentID()
	tu.mutation.SetParentID(i)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableParentID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetParentID(*i)
	}
	return tu
}

// AddParentID adds i to the "parent_id" field.
func (tu *TaskUpdate) AddParentID(i int) *TaskUpdate {
	tu.mutation.AddParentID(i)
	return tu
}

// ClearParentID clears the value of the "parent_id" field.
func (tu *TaskUpdate) ClearParentID() *TaskUpdate {
	tu.mutation.ClearParentID()
	return tu
}

// SetComments sets the "comments" field.
func (tu *TaskUpdate) SetComments(s string) *TaskUpdate {
	tu.mutation.SetComments(s)
	return tu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableComments(s *string) *TaskUpdate {
	if s != nil {
		tu.SetComments(*s)
	}
	return tu
}

// ClearComments clears the value of the "comments" field.
func (tu *TaskUpdate) ClearComments() *TaskUpdate {
	tu.mutation.ClearComments()
	return tu
}

// SetAssignee sets the "assignee" field.
func (tu *TaskUpdate) SetAssignee(s string) *TaskUpdate {
	tu.mutation.SetAssignee(s)
	return tu
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAssignee(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAssignee(*s)
	}
	return tu
}

// ClearAssignee clears the value of the "assignee" field.
func (tu *TaskUpdate) ClearAssignee() *TaskUpdate {
	tu.mutation.ClearAssignee()
	return tu
}

// SetMemberCount sets the "member_count" field.
func (tu *TaskUpdate) SetMemberCount(i int32) *TaskUpdate {
	tu.mutation.ResetMemberCount()
	tu.mutation.SetMemberCount(i)
	return tu
}

// AddMemberCount adds i to the "member_count" field.
func (tu *TaskUpdate) AddMemberCount(i int32) *TaskUpdate {
	tu.mutation.AddMemberCount(i)
	return tu
}

// SetUnfinishedCount sets the "unfinished_count" field.
func (tu *TaskUpdate) SetUnfinishedCount(i int32) *TaskUpdate {
	tu.mutation.ResetUnfinishedCount()
	tu.mutation.SetUnfinishedCount(i)
	return tu
}

// AddUnfinishedCount adds i to the "unfinished_count" field.
func (tu *TaskUpdate) AddUnfinishedCount(i int32) *TaskUpdate {
	tu.mutation.AddUnfinishedCount(i)
	return tu
}

// SetAgreeCount sets the "agree_count" field.
func (tu *TaskUpdate) SetAgreeCount(i int32) *TaskUpdate {
	tu.mutation.ResetAgreeCount()
	tu.mutation.SetAgreeCount(i)
	return tu
}

// SetNillableAgreeCount sets the "agree_count" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAgreeCount(i *int32) *TaskUpdate {
	if i != nil {
		tu.SetAgreeCount(*i)
	}
	return tu
}

// AddAgreeCount adds i to the "agree_count" field.
func (tu *TaskUpdate) AddAgreeCount(i int32) *TaskUpdate {
	tu.mutation.AddAgreeCount(i)
	return tu
}

// SetKind sets the "kind" field.
func (tu *TaskUpdate) SetKind(t task.Kind) *TaskUpdate {
	tu.mutation.SetKind(t)
	return tu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableKind(t *task.Kind) *TaskUpdate {
	if t != nil {
		tu.SetKind(*t)
	}
	return tu
}

// SetSequential sets the "sequential" field.
func (tu *TaskUpdate) SetSequential(b bool) *TaskUpdate {
	tu.mutation.SetSequential(b)
	return tu
}

// SetNillableSequential sets the "sequential" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSequential(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetSequential(*b)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(t task.Status) *TaskUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(t *task.Status) *TaskUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetProcInst sets the "proc_inst" edge to the ProcInst entity.
func (tu *TaskUpdate) SetProcInst(p *ProcInst) *TaskUpdate {
	return tu.SetProcInstID(p.ID)
}

// AddTaskIdentityIDs adds the "task_identities" edge to the IdentityLink entity by IDs.
func (tu *TaskUpdate) AddTaskIdentityIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddTaskIdentityIDs(ids...)
	return tu
}

// AddTaskIdentities adds the "task_identities" edges to the IdentityLink entity.
func (tu *TaskUpdate) AddTaskIdentities(i ...*IdentityLink) *TaskUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.AddTaskIdentityIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearProcInst clears the "proc_inst" edge to the ProcInst entity.
func (tu *TaskUpdate) ClearProcInst() *TaskUpdate {
	tu.mutation.ClearProcInst()
	return tu
}

// ClearTaskIdentities clears all "task_identities" edges to the IdentityLink entity.
func (tu *TaskUpdate) ClearTaskIdentities() *TaskUpdate {
	tu.mutation.ClearTaskIdentities()
	return tu
}

// RemoveTaskIdentityIDs removes the "task_identities" edge to IdentityLink entities by IDs.
func (tu *TaskUpdate) RemoveTaskIdentityIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveTaskIdentityIDs(ids...)
	return tu
}

// RemoveTaskIdentities removes "task_identities" edges to IdentityLink entities.
func (tu *TaskUpdate) RemoveTaskIdentities(i ...*IdentityLink) *TaskUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.RemoveTaskIdentityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if task.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Kind(); ok {
		if err := task.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Task.kind": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.ProcInstID(); tu.mutation.ProcInstCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.proc_inst"`)
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.ProcDefID(); ok {
		_spec.SetField(task.FieldProcDefID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedProcDefID(); ok {
		_spec.AddField(task.FieldProcDefID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.ExecutionID(); ok {
		_spec.SetField(task.FieldExecutionID, field.TypeString, value)
	}
	if value, ok := tu.mutation.RunID(); ok {
		_spec.SetField(task.FieldRunID, field.TypeString, value)
	}
	if tu.mutation.RunIDCleared() {
		_spec.ClearField(task.FieldRunID, field.TypeString)
	}
	if value, ok := tu.mutation.TaskDefKey(); ok {
		_spec.SetField(task.FieldTaskDefKey, field.TypeString, value)
	}
	if value, ok := tu.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedParentID(); ok {
		_spec.AddField(task.FieldParentID, field.TypeInt, value)
	}
	if tu.mutation.ParentIDCleared() {
		_spec.ClearField(task.FieldParentID, field.TypeInt)
	}
	if value, ok := tu.mutation.Comments(); ok {
		_spec.SetField(task.FieldComments, field.TypeString, value)
	}
	if tu.mutation.CommentsCleared() {
		_spec.ClearField(task.FieldComments, field.TypeString)
	}
	if value, ok := tu.mutation.Assignee(); ok {
		_spec.SetField(task.FieldAssignee, field.TypeString, value)
	}
	if tu.mutation.AssigneeCleared() {
		_spec.ClearField(task.FieldAssignee, field.TypeString)
	}
	if value, ok := tu.mutation.MemberCount(); ok {
		_spec.SetField(task.FieldMemberCount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedMemberCount(); ok {
		_spec.AddField(task.FieldMemberCount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.UnfinishedCount(); ok {
		_spec.SetField(task.FieldUnfinishedCount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedUnfinishedCount(); ok {
		_spec.AddField(task.FieldUnfinishedCount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AgreeCount(); ok {
		_spec.SetField(task.FieldAgreeCount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedAgreeCount(); ok {
		_spec.AddField(task.FieldAgreeCount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.Kind(); ok {
		_spec.SetField(task.FieldKind, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Sequential(); ok {
		_spec.SetField(task.FieldSequential, field.TypeBool, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if tu.mutation.ProcInstCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProcInstTable,
			Columns: []string{task.ProcInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tu.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProcInstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProcInstTable,
			Columns: []string{task.ProcInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tu.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tu.schemaConfig.IdentityLink
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskIdentitiesIDs(); len(nodes) > 0 && !tu.mutation.TaskIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tu.schemaConfig.IdentityLink
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskIdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tu.schemaConfig.IdentityLink
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tu.schemaConfig.Task
	ctx = internal.NewSchemaConfigContext(ctx, tu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetProcInstID sets the "proc_inst_id" field.
func (tuo *TaskUpdateOne) SetProcInstID(i int) *TaskUpdateOne {
	tuo.mutation.SetProcInstID(i)
	return tuo
}

// SetProcDefID sets the "proc_def_id" field.
func (tuo *TaskUpdateOne) SetProcDefID(i int) *TaskUpdateOne {
	tuo.mutation.ResetProcDefID()
	tuo.mutation.SetProcDefID(i)
	return tuo
}

// AddProcDefID adds i to the "proc_def_id" field.
func (tuo *TaskUpdateOne) AddProcDefID(i int) *TaskUpdateOne {
	tuo.mutation.AddProcDefID(i)
	return tuo
}

// SetExecutionID sets the "execution_id" field.
func (tuo *TaskUpdateOne) SetExecutionID(s string) *TaskUpdateOne {
	tuo.mutation.SetExecutionID(s)
	return tuo
}

// SetRunID sets the "run_id" field.
func (tuo *TaskUpdateOne) SetRunID(s string) *TaskUpdateOne {
	tuo.mutation.SetRunID(s)
	return tuo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRunID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetRunID(*s)
	}
	return tuo
}

// ClearRunID clears the value of the "run_id" field.
func (tuo *TaskUpdateOne) ClearRunID() *TaskUpdateOne {
	tuo.mutation.ClearRunID()
	return tuo
}

// SetTaskDefKey sets the "task_def_key" field.
func (tuo *TaskUpdateOne) SetTaskDefKey(s string) *TaskUpdateOne {
	tuo.mutation.SetTaskDefKey(s)
	return tuo
}

// SetParentID sets the "parent_id" field.
func (tuo *TaskUpdateOne) SetParentID(i int) *TaskUpdateOne {
	tuo.mutation.ResetParentID()
	tuo.mutation.SetParentID(i)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableParentID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetParentID(*i)
	}
	return tuo
}

// AddParentID adds i to the "parent_id" field.
func (tuo *TaskUpdateOne) AddParentID(i int) *TaskUpdateOne {
	tuo.mutation.AddParentID(i)
	return tuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tuo *TaskUpdateOne) ClearParentID() *TaskUpdateOne {
	tuo.mutation.ClearParentID()
	return tuo
}

// SetComments sets the "comments" field.
func (tuo *TaskUpdateOne) SetComments(s string) *TaskUpdateOne {
	tuo.mutation.SetComments(s)
	return tuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableComments(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetComments(*s)
	}
	return tuo
}

// ClearComments clears the value of the "comments" field.
func (tuo *TaskUpdateOne) ClearComments() *TaskUpdateOne {
	tuo.mutation.ClearComments()
	return tuo
}

// SetAssignee sets the "assignee" field.
func (tuo *TaskUpdateOne) SetAssignee(s string) *TaskUpdateOne {
	tuo.mutation.SetAssignee(s)
	return tuo
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAssignee(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAssignee(*s)
	}
	return tuo
}

// ClearAssignee clears the value of the "assignee" field.
func (tuo *TaskUpdateOne) ClearAssignee() *TaskUpdateOne {
	tuo.mutation.ClearAssignee()
	return tuo
}

// SetMemberCount sets the "member_count" field.
func (tuo *TaskUpdateOne) SetMemberCount(i int32) *TaskUpdateOne {
	tuo.mutation.ResetMemberCount()
	tuo.mutation.SetMemberCount(i)
	return tuo
}

// AddMemberCount adds i to the "member_count" field.
func (tuo *TaskUpdateOne) AddMemberCount(i int32) *TaskUpdateOne {
	tuo.mutation.AddMemberCount(i)
	return tuo
}

// SetUnfinishedCount sets the "unfinished_count" field.
func (tuo *TaskUpdateOne) SetUnfinishedCount(i int32) *TaskUpdateOne {
	tuo.mutation.ResetUnfinishedCount()
	tuo.mutation.SetUnfinishedCount(i)
	return tuo
}

// AddUnfinishedCount adds i to the "unfinished_count" field.
func (tuo *TaskUpdateOne) AddUnfinishedCount(i int32) *TaskUpdateOne {
	tuo.mutation.AddUnfinishedCount(i)
	return tuo
}

// SetAgreeCount sets the "agree_count" field.
func (tuo *TaskUpdateOne) SetAgreeCount(i int32) *TaskUpdateOne {
	tuo.mutation.ResetAgreeCount()
	tuo.mutation.SetAgreeCount(i)
	return tuo
}

// SetNillableAgreeCount sets the "agree_count" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAgreeCount(i *int32) *TaskUpdateOne {
	if i != nil {
		tuo.SetAgreeCount(*i)
	}
	return tuo
}

// AddAgreeCount adds i to the "agree_count" field.
func (tuo *TaskUpdateOne) AddAgreeCount(i int32) *TaskUpdateOne {
	tuo.mutation.AddAgreeCount(i)
	return tuo
}

// SetKind sets the "kind" field.
func (tuo *TaskUpdateOne) SetKind(t task.Kind) *TaskUpdateOne {
	tuo.mutation.SetKind(t)
	return tuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableKind(t *task.Kind) *TaskUpdateOne {
	if t != nil {
		tuo.SetKind(*t)
	}
	return tuo
}

// SetSequential sets the "sequential" field.
func (tuo *TaskUpdateOne) SetSequential(b bool) *TaskUpdateOne {
	tuo.mutation.SetSequential(b)
	return tuo
}

// SetNillableSequential sets the "sequential" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSequential(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetSequential(*b)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(t task.Status) *TaskUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(t *task.Status) *TaskUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetProcInst sets the "proc_inst" edge to the ProcInst entity.
func (tuo *TaskUpdateOne) SetProcInst(p *ProcInst) *TaskUpdateOne {
	return tuo.SetProcInstID(p.ID)
}

// AddTaskIdentityIDs adds the "task_identities" edge to the IdentityLink entity by IDs.
func (tuo *TaskUpdateOne) AddTaskIdentityIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddTaskIdentityIDs(ids...)
	return tuo
}

// AddTaskIdentities adds the "task_identities" edges to the IdentityLink entity.
func (tuo *TaskUpdateOne) AddTaskIdentities(i ...*IdentityLink) *TaskUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.AddTaskIdentityIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearProcInst clears the "proc_inst" edge to the ProcInst entity.
func (tuo *TaskUpdateOne) ClearProcInst() *TaskUpdateOne {
	tuo.mutation.ClearProcInst()
	return tuo
}

// ClearTaskIdentities clears all "task_identities" edges to the IdentityLink entity.
func (tuo *TaskUpdateOne) ClearTaskIdentities() *TaskUpdateOne {
	tuo.mutation.ClearTaskIdentities()
	return tuo
}

// RemoveTaskIdentityIDs removes the "task_identities" edge to IdentityLink entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskIdentityIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveTaskIdentityIDs(ids...)
	return tuo
}

// RemoveTaskIdentities removes "task_identities" edges to IdentityLink entities.
func (tuo *TaskUpdateOne) RemoveTaskIdentities(i ...*IdentityLink) *TaskUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.RemoveTaskIdentityIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if task.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Kind(); ok {
		if err := task.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Task.kind": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.ProcInstID(); tuo.mutation.ProcInstCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.proc_inst"`)
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.ProcDefID(); ok {
		_spec.SetField(task.FieldProcDefID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedProcDefID(); ok {
		_spec.AddField(task.FieldProcDefID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.ExecutionID(); ok {
		_spec.SetField(task.FieldExecutionID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.RunID(); ok {
		_spec.SetField(task.FieldRunID, field.TypeString, value)
	}
	if tuo.mutation.RunIDCleared() {
		_spec.ClearField(task.FieldRunID, field.TypeString)
	}
	if value, ok := tuo.mutation.TaskDefKey(); ok {
		_spec.SetField(task.FieldTaskDefKey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedParentID(); ok {
		_spec.AddField(task.FieldParentID, field.TypeInt, value)
	}
	if tuo.mutation.ParentIDCleared() {
		_spec.ClearField(task.FieldParentID, field.TypeInt)
	}
	if value, ok := tuo.mutation.Comments(); ok {
		_spec.SetField(task.FieldComments, field.TypeString, value)
	}
	if tuo.mutation.CommentsCleared() {
		_spec.ClearField(task.FieldComments, field.TypeString)
	}
	if value, ok := tuo.mutation.Assignee(); ok {
		_spec.SetField(task.FieldAssignee, field.TypeString, value)
	}
	if tuo.mutation.AssigneeCleared() {
		_spec.ClearField(task.FieldAssignee, field.TypeString)
	}
	if value, ok := tuo.mutation.MemberCount(); ok {
		_spec.SetField(task.FieldMemberCount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedMemberCount(); ok {
		_spec.AddField(task.FieldMemberCount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.UnfinishedCount(); ok {
		_spec.SetField(task.FieldUnfinishedCount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedUnfinishedCount(); ok {
		_spec.AddField(task.FieldUnfinishedCount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AgreeCount(); ok {
		_spec.SetField(task.FieldAgreeCount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedAgreeCount(); ok {
		_spec.AddField(task.FieldAgreeCount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.Kind(); ok {
		_spec.SetField(task.FieldKind, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Sequential(); ok {
		_spec.SetField(task.FieldSequential, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if tuo.mutation.ProcInstCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProcInstTable,
			Columns: []string{task.ProcInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tuo.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProcInstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProcInstTable,
			Columns: []string{task.ProcInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tuo.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tuo.schemaConfig.IdentityLink
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskIdentitiesIDs(); len(nodes) > 0 && !tuo.mutation.TaskIdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tuo.schemaConfig.IdentityLink
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskIdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tuo.schemaConfig.IdentityLink
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tuo.schemaConfig.Task
	ctx = internal.NewSchemaConfigContext(ctx, tuo.schemaConfig)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
