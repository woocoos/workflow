// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/decisiondef"
	"github.com/woocoos/workflow/ent/decisionreqdef"
	"github.com/woocoos/workflow/ent/deployment"
	"github.com/woocoos/workflow/ent/predicate"

	"github.com/woocoos/workflow/ent/internal"
)

// DecisionReqDefQuery is the builder for querying DecisionReqDef entities.
type DecisionReqDefQuery struct {
	config
	ctx                   *QueryContext
	order                 []decisionreqdef.OrderOption
	inters                []Interceptor
	predicates            []predicate.DecisionReqDef
	withDeployment        *DeploymentQuery
	withDecisionDefs      *DecisionDefQuery
	modifiers             []func(*sql.Selector)
	loadTotal             []func(context.Context, []*DecisionReqDef) error
	withNamedDecisionDefs map[string]*DecisionDefQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DecisionReqDefQuery builder.
func (drdq *DecisionReqDefQuery) Where(ps ...predicate.DecisionReqDef) *DecisionReqDefQuery {
	drdq.predicates = append(drdq.predicates, ps...)
	return drdq
}

// Limit the number of records to be returned by this query.
func (drdq *DecisionReqDefQuery) Limit(limit int) *DecisionReqDefQuery {
	drdq.ctx.Limit = &limit
	return drdq
}

// Offset to start from.
func (drdq *DecisionReqDefQuery) Offset(offset int) *DecisionReqDefQuery {
	drdq.ctx.Offset = &offset
	return drdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drdq *DecisionReqDefQuery) Unique(unique bool) *DecisionReqDefQuery {
	drdq.ctx.Unique = &unique
	return drdq
}

// Order specifies how the records should be ordered.
func (drdq *DecisionReqDefQuery) Order(o ...decisionreqdef.OrderOption) *DecisionReqDefQuery {
	drdq.order = append(drdq.order, o...)
	return drdq
}

// QueryDeployment chains the current query on the "deployment" edge.
func (drdq *DecisionReqDefQuery) QueryDeployment() *DeploymentQuery {
	query := (&DeploymentClient{config: drdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(decisionreqdef.Table, decisionreqdef.FieldID, selector),
			sqlgraph.To(deployment.Table, deployment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, decisionreqdef.DeploymentTable, decisionreqdef.DeploymentColumn),
		)
		schemaConfig := drdq.schemaConfig
		step.To.Schema = schemaConfig.Deployment
		step.Edge.Schema = schemaConfig.DecisionReqDef
		fromU = sqlgraph.SetNeighbors(drdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDecisionDefs chains the current query on the "decision_defs" edge.
func (drdq *DecisionReqDefQuery) QueryDecisionDefs() *DecisionDefQuery {
	query := (&DecisionDefClient{config: drdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(decisionreqdef.Table, decisionreqdef.FieldID, selector),
			sqlgraph.To(decisiondef.Table, decisiondef.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, decisionreqdef.DecisionDefsTable, decisionreqdef.DecisionDefsColumn),
		)
		schemaConfig := drdq.schemaConfig
		step.To.Schema = schemaConfig.DecisionDef
		step.Edge.Schema = schemaConfig.DecisionDef
		fromU = sqlgraph.SetNeighbors(drdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DecisionReqDef entity from the query.
// Returns a *NotFoundError when no DecisionReqDef was found.
func (drdq *DecisionReqDefQuery) First(ctx context.Context) (*DecisionReqDef, error) {
	nodes, err := drdq.Limit(1).All(setContextOp(ctx, drdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{decisionreqdef.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) FirstX(ctx context.Context) *DecisionReqDef {
	node, err := drdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DecisionReqDef ID from the query.
// Returns a *NotFoundError when no DecisionReqDef ID was found.
func (drdq *DecisionReqDefQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drdq.Limit(1).IDs(setContextOp(ctx, drdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{decisionreqdef.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) FirstIDX(ctx context.Context) int {
	id, err := drdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DecisionReqDef entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DecisionReqDef entity is found.
// Returns a *NotFoundError when no DecisionReqDef entities are found.
func (drdq *DecisionReqDefQuery) Only(ctx context.Context) (*DecisionReqDef, error) {
	nodes, err := drdq.Limit(2).All(setContextOp(ctx, drdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{decisionreqdef.Label}
	default:
		return nil, &NotSingularError{decisionreqdef.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) OnlyX(ctx context.Context) *DecisionReqDef {
	node, err := drdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DecisionReqDef ID in the query.
// Returns a *NotSingularError when more than one DecisionReqDef ID is found.
// Returns a *NotFoundError when no entities are found.
func (drdq *DecisionReqDefQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drdq.Limit(2).IDs(setContextOp(ctx, drdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{decisionreqdef.Label}
	default:
		err = &NotSingularError{decisionreqdef.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) OnlyIDX(ctx context.Context) int {
	id, err := drdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DecisionReqDefs.
func (drdq *DecisionReqDefQuery) All(ctx context.Context) ([]*DecisionReqDef, error) {
	ctx = setContextOp(ctx, drdq.ctx, "All")
	if err := drdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DecisionReqDef, *DecisionReqDefQuery]()
	return withInterceptors[[]*DecisionReqDef](ctx, drdq, qr, drdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) AllX(ctx context.Context) []*DecisionReqDef {
	nodes, err := drdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DecisionReqDef IDs.
func (drdq *DecisionReqDefQuery) IDs(ctx context.Context) (ids []int, err error) {
	if drdq.ctx.Unique == nil && drdq.path != nil {
		drdq.Unique(true)
	}
	ctx = setContextOp(ctx, drdq.ctx, "IDs")
	if err = drdq.Select(decisionreqdef.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) IDsX(ctx context.Context) []int {
	ids, err := drdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drdq *DecisionReqDefQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drdq.ctx, "Count")
	if err := drdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drdq, querierCount[*DecisionReqDefQuery](), drdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) CountX(ctx context.Context) int {
	count, err := drdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drdq *DecisionReqDefQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drdq.ctx, "Exist")
	switch _, err := drdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drdq *DecisionReqDefQuery) ExistX(ctx context.Context) bool {
	exist, err := drdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DecisionReqDefQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drdq *DecisionReqDefQuery) Clone() *DecisionReqDefQuery {
	if drdq == nil {
		return nil
	}
	return &DecisionReqDefQuery{
		config:           drdq.config,
		ctx:              drdq.ctx.Clone(),
		order:            append([]decisionreqdef.OrderOption{}, drdq.order...),
		inters:           append([]Interceptor{}, drdq.inters...),
		predicates:       append([]predicate.DecisionReqDef{}, drdq.predicates...),
		withDeployment:   drdq.withDeployment.Clone(),
		withDecisionDefs: drdq.withDecisionDefs.Clone(),
		// clone intermediate query.
		sql:  drdq.sql.Clone(),
		path: drdq.path,
	}
}

// WithDeployment tells the query-builder to eager-load the nodes that are connected to
// the "deployment" edge. The optional arguments are used to configure the query builder of the edge.
func (drdq *DecisionReqDefQuery) WithDeployment(opts ...func(*DeploymentQuery)) *DecisionReqDefQuery {
	query := (&DeploymentClient{config: drdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drdq.withDeployment = query
	return drdq
}

// WithDecisionDefs tells the query-builder to eager-load the nodes that are connected to
// the "decision_defs" edge. The optional arguments are used to configure the query builder of the edge.
func (drdq *DecisionReqDefQuery) WithDecisionDefs(opts ...func(*DecisionDefQuery)) *DecisionReqDefQuery {
	query := (&DecisionDefClient{config: drdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drdq.withDecisionDefs = query
	return drdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DecisionReqDef.Query().
//		GroupBy(decisionreqdef.FieldCreatedBy).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (drdq *DecisionReqDefQuery) GroupBy(field string, fields ...string) *DecisionReqDefGroupBy {
	drdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DecisionReqDefGroupBy{build: drdq}
	grbuild.flds = &drdq.ctx.Fields
	grbuild.label = decisionreqdef.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//	}
//
//	client.DecisionReqDef.Query().
//		Select(decisionreqdef.FieldCreatedBy).
//		Scan(ctx, &v)
func (drdq *DecisionReqDefQuery) Select(fields ...string) *DecisionReqDefSelect {
	drdq.ctx.Fields = append(drdq.ctx.Fields, fields...)
	sbuild := &DecisionReqDefSelect{DecisionReqDefQuery: drdq}
	sbuild.label = decisionreqdef.Label
	sbuild.flds, sbuild.scan = &drdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DecisionReqDefSelect configured with the given aggregations.
func (drdq *DecisionReqDefQuery) Aggregate(fns ...AggregateFunc) *DecisionReqDefSelect {
	return drdq.Select().Aggregate(fns...)
}

func (drdq *DecisionReqDefQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drdq); err != nil {
				return err
			}
		}
	}
	for _, f := range drdq.ctx.Fields {
		if !decisionreqdef.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if drdq.path != nil {
		prev, err := drdq.path(ctx)
		if err != nil {
			return err
		}
		drdq.sql = prev
	}
	return nil
}

func (drdq *DecisionReqDefQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DecisionReqDef, error) {
	var (
		nodes       = []*DecisionReqDef{}
		_spec       = drdq.querySpec()
		loadedTypes = [2]bool{
			drdq.withDeployment != nil,
			drdq.withDecisionDefs != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DecisionReqDef).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DecisionReqDef{config: drdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = drdq.schemaConfig.DecisionReqDef
	ctx = internal.NewSchemaConfigContext(ctx, drdq.schemaConfig)
	if len(drdq.modifiers) > 0 {
		_spec.Modifiers = drdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drdq.withDeployment; query != nil {
		if err := drdq.loadDeployment(ctx, query, nodes, nil,
			func(n *DecisionReqDef, e *Deployment) { n.Edges.Deployment = e }); err != nil {
			return nil, err
		}
	}
	if query := drdq.withDecisionDefs; query != nil {
		if err := drdq.loadDecisionDefs(ctx, query, nodes,
			func(n *DecisionReqDef) { n.Edges.DecisionDefs = []*DecisionDef{} },
			func(n *DecisionReqDef, e *DecisionDef) { n.Edges.DecisionDefs = append(n.Edges.DecisionDefs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range drdq.withNamedDecisionDefs {
		if err := drdq.loadDecisionDefs(ctx, query, nodes,
			func(n *DecisionReqDef) { n.appendNamedDecisionDefs(name) },
			func(n *DecisionReqDef, e *DecisionDef) { n.appendNamedDecisionDefs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range drdq.loadTotal {
		if err := drdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drdq *DecisionReqDefQuery) loadDeployment(ctx context.Context, query *DeploymentQuery, nodes []*DecisionReqDef, init func(*DecisionReqDef), assign func(*DecisionReqDef, *Deployment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DecisionReqDef)
	for i := range nodes {
		fk := nodes[i].DeploymentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deployment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "deployment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drdq *DecisionReqDefQuery) loadDecisionDefs(ctx context.Context, query *DecisionDefQuery, nodes []*DecisionReqDef, init func(*DecisionReqDef), assign func(*DecisionReqDef, *DecisionDef)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DecisionReqDef)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(decisiondef.FieldReqDefID)
	}
	query.Where(predicate.DecisionDef(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(decisionreqdef.DecisionDefsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReqDefID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "req_def_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (drdq *DecisionReqDefQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drdq.querySpec()
	_spec.Node.Schema = drdq.schemaConfig.DecisionReqDef
	ctx = internal.NewSchemaConfigContext(ctx, drdq.schemaConfig)
	if len(drdq.modifiers) > 0 {
		_spec.Modifiers = drdq.modifiers
	}
	_spec.Node.Columns = drdq.ctx.Fields
	if len(drdq.ctx.Fields) > 0 {
		_spec.Unique = drdq.ctx.Unique != nil && *drdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drdq.driver, _spec)
}

func (drdq *DecisionReqDefQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(decisionreqdef.Table, decisionreqdef.Columns, sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt))
	_spec.From = drdq.sql
	if unique := drdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drdq.path != nil {
		_spec.Unique = true
	}
	if fields := drdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, decisionreqdef.FieldID)
		for i := range fields {
			if fields[i] != decisionreqdef.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if drdq.withDeployment != nil {
			_spec.Node.AddColumnOnce(decisionreqdef.FieldDeploymentID)
		}
	}
	if ps := drdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drdq *DecisionReqDefQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drdq.driver.Dialect())
	t1 := builder.Table(decisionreqdef.Table)
	columns := drdq.ctx.Fields
	if len(columns) == 0 {
		columns = decisionreqdef.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drdq.sql != nil {
		selector = drdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drdq.ctx.Unique != nil && *drdq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(drdq.schemaConfig.DecisionReqDef)
	ctx = internal.NewSchemaConfigContext(ctx, drdq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range drdq.predicates {
		p(selector)
	}
	for _, p := range drdq.order {
		p(selector)
	}
	if offset := drdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDecisionDefs tells the query-builder to eager-load the nodes that are connected to the "decision_defs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (drdq *DecisionReqDefQuery) WithNamedDecisionDefs(name string, opts ...func(*DecisionDefQuery)) *DecisionReqDefQuery {
	query := (&DecisionDefClient{config: drdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if drdq.withNamedDecisionDefs == nil {
		drdq.withNamedDecisionDefs = make(map[string]*DecisionDefQuery)
	}
	drdq.withNamedDecisionDefs[name] = query
	return drdq
}

// DecisionReqDefGroupBy is the group-by builder for DecisionReqDef entities.
type DecisionReqDefGroupBy struct {
	selector
	build *DecisionReqDefQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drdgb *DecisionReqDefGroupBy) Aggregate(fns ...AggregateFunc) *DecisionReqDefGroupBy {
	drdgb.fns = append(drdgb.fns, fns...)
	return drdgb
}

// Scan applies the selector query and scans the result into the given value.
func (drdgb *DecisionReqDefGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drdgb.build.ctx, "GroupBy")
	if err := drdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DecisionReqDefQuery, *DecisionReqDefGroupBy](ctx, drdgb.build, drdgb, drdgb.build.inters, v)
}

func (drdgb *DecisionReqDefGroupBy) sqlScan(ctx context.Context, root *DecisionReqDefQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drdgb.fns))
	for _, fn := range drdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drdgb.flds)+len(drdgb.fns))
		for _, f := range *drdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DecisionReqDefSelect is the builder for selecting fields of DecisionReqDef entities.
type DecisionReqDefSelect struct {
	*DecisionReqDefQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drds *DecisionReqDefSelect) Aggregate(fns ...AggregateFunc) *DecisionReqDefSelect {
	drds.fns = append(drds.fns, fns...)
	return drds
}

// Scan applies the selector query and scans the result into the given value.
func (drds *DecisionReqDefSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drds.ctx, "Select")
	if err := drds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DecisionReqDefQuery, *DecisionReqDefSelect](ctx, drds.DecisionReqDefQuery, drds, drds.inters, v)
}

func (drds *DecisionReqDefSelect) sqlScan(ctx context.Context, root *DecisionReqDefQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drds.fns))
	for _, fn := range drds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
