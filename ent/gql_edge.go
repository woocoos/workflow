// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (dd *DecisionDef) ReqDef(ctx context.Context) (*DecisionReqDef, error) {
	result, err := dd.Edges.ReqDefOrErr()
	if IsNotLoaded(err) {
		result, err = dd.QueryReqDef().Only(ctx)
	}
	return result, err
}

func (drd *DecisionReqDef) Deployment(ctx context.Context) (*Deployment, error) {
	result, err := drd.Edges.DeploymentOrErr()
	if IsNotLoaded(err) {
		result, err = drd.QueryDeployment().Only(ctx)
	}
	return result, err
}

func (drd *DecisionReqDef) DecisionDefs(ctx context.Context) (result []*DecisionDef, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = drd.NamedDecisionDefs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = drd.Edges.DecisionDefsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = drd.QueryDecisionDefs().All(ctx)
	}
	return result, err
}

func (d *Deployment) ProcDefs(ctx context.Context) (result []*ProcDef, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedProcDefs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.ProcDefsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryProcDefs().All(ctx)
	}
	return result, err
}

func (d *Deployment) DecisionReqs(ctx context.Context) (result []*DecisionReqDef, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedDecisionReqs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.DecisionReqsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryDecisionReqs().All(ctx)
	}
	return result, err
}

func (il *IdentityLink) Task(ctx context.Context) (*Task, error) {
	result, err := il.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = il.QueryTask().Only(ctx)
	}
	return result, err
}

func (pd *ProcDef) Deployment(ctx context.Context) (*Deployment, error) {
	result, err := pd.Edges.DeploymentOrErr()
	if IsNotLoaded(err) {
		result, err = pd.QueryDeployment().Only(ctx)
	}
	return result, err
}

func (pd *ProcDef) ProcInstances(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ProcInstOrder, where *ProcInstWhereInput,
) (*ProcInstConnection, error) {
	opts := []ProcInstPaginateOption{
		WithProcInstOrder(orderBy),
		WithProcInstFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pd.Edges.totalCount[1][alias]
	if nodes, err := pd.NamedProcInstances(alias); err == nil || hasTotalCount {
		pager, err := newProcInstPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcInstConnection{Edges: []*ProcInstEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pd.QueryProcInstances().Paginate(ctx, after, first, before, last, opts...)
}

func (pi *ProcInst) ProcDef(ctx context.Context) (*ProcDef, error) {
	result, err := pi.Edges.ProcDefOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryProcDef().Only(ctx)
	}
	return result, err
}

func (pi *ProcInst) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pi.Edges.totalCount[1][alias]
	if nodes, err := pi.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pi.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) ProcInst(ctx context.Context) (*ProcInst, error) {
	result, err := t.Edges.ProcInstOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProcInst().Only(ctx)
	}
	return result, err
}

func (t *Task) TaskIdentities(ctx context.Context) (result []*IdentityLink, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedTaskIdentities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.TaskIdentitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryTaskIdentities().All(ctx)
	}
	return result, err
}
