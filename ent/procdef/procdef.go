// Code generated by ent, DO NOT EDIT.

package procdef

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the procdef type in the database.
	Label = "proc_def"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeploymentID holds the string denoting the deployment_id field in the database.
	FieldDeploymentID = "deployment_id"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldVersionTag holds the string denoting the version_tag field in the database.
	FieldVersionTag = "version_tag"
	// FieldResourceName holds the string denoting the resource_name field in the database.
	FieldResourceName = "resource_name"
	// FieldDgrmResourceName holds the string denoting the dgrm_resource_name field in the database.
	FieldDgrmResourceName = "dgrm_resource_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResourceData holds the string denoting the resource_data field in the database.
	FieldResourceData = "resource_data"
	// EdgeDeployment holds the string denoting the deployment edge name in mutations.
	EdgeDeployment = "deployment"
	// EdgeProcInstances holds the string denoting the proc_instances edge name in mutations.
	EdgeProcInstances = "proc_instances"
	// Table holds the table name of the procdef in the database.
	Table = "act_proc_def"
	// DeploymentTable is the table that holds the deployment relation/edge.
	DeploymentTable = "act_proc_def"
	// DeploymentInverseTable is the table name for the Deployment entity.
	// It exists in this package in order to avoid circular dependency with the "deployment" package.
	DeploymentInverseTable = "act_deployment"
	// DeploymentColumn is the table column denoting the deployment relation/edge.
	DeploymentColumn = "deployment_id"
	// ProcInstancesTable is the table that holds the proc_instances relation/edge.
	ProcInstancesTable = "act_proc_inst"
	// ProcInstancesInverseTable is the table name for the ProcInst entity.
	// It exists in this package in order to avoid circular dependency with the "procinst" package.
	ProcInstancesInverseTable = "act_proc_inst"
	// ProcInstancesColumn is the table column denoting the proc_instances relation/edge.
	ProcInstancesColumn = "proc_def_id"
)

// Columns holds all SQL columns for procdef fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldDeploymentID,
	FieldOrgID,
	FieldAppID,
	FieldCategory,
	FieldName,
	FieldKey,
	FieldVersion,
	FieldRevision,
	FieldVersionTag,
	FieldResourceName,
	FieldDgrmResourceName,
	FieldStatus,
	FieldResourceData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/workflow/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive    Status = "active"
	StatusSuspended Status = "suspended"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusSuspended:
		return nil
	default:
		return fmt.Errorf("procdef: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
