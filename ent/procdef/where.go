// Code generated by ent, DO NOT EDIT.

package procdef

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/workflow/ent/predicate"

	"github.com/woocoos/workflow/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldTenantID, v))
}

// DeploymentID applies equality check predicate on the "deployment_id" field. It's identical to DeploymentIDEQ.
func DeploymentID(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldDeploymentID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldAppID, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldCategory, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldName, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldKey, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldVersion, v))
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldRevision, v))
}

// VersionTag applies equality check predicate on the "version_tag" field. It's identical to VersionTagEQ.
func VersionTag(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldVersionTag, v))
}

// ResourceKey applies equality check predicate on the "resource_key" field. It's identical to ResourceKeyEQ.
func ResourceKey(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldResourceKey, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldResourceID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldUpdatedAt))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldTenantID, v))
}

// DeploymentIDEQ applies the EQ predicate on the "deployment_id" field.
func DeploymentIDEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldDeploymentID, v))
}

// DeploymentIDNEQ applies the NEQ predicate on the "deployment_id" field.
func DeploymentIDNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldDeploymentID, v))
}

// DeploymentIDIn applies the In predicate on the "deployment_id" field.
func DeploymentIDIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldDeploymentID, vs...))
}

// DeploymentIDNotIn applies the NotIn predicate on the "deployment_id" field.
func DeploymentIDNotIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldDeploymentID, vs...))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldAppID, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContainsFold(FieldCategory, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContainsFold(FieldName, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContainsFold(FieldKey, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldVersion))
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldRevision, v))
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldRevision, v))
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldRevision, vs...))
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldRevision, vs...))
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldRevision, v))
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldRevision, v))
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldRevision, v))
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v int32) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldRevision, v))
}

// RevisionIsNil applies the IsNil predicate on the "revision" field.
func RevisionIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldRevision))
}

// RevisionNotNil applies the NotNil predicate on the "revision" field.
func RevisionNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldRevision))
}

// VersionTagEQ applies the EQ predicate on the "version_tag" field.
func VersionTagEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldVersionTag, v))
}

// VersionTagNEQ applies the NEQ predicate on the "version_tag" field.
func VersionTagNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldVersionTag, v))
}

// VersionTagIn applies the In predicate on the "version_tag" field.
func VersionTagIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldVersionTag, vs...))
}

// VersionTagNotIn applies the NotIn predicate on the "version_tag" field.
func VersionTagNotIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldVersionTag, vs...))
}

// VersionTagGT applies the GT predicate on the "version_tag" field.
func VersionTagGT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldVersionTag, v))
}

// VersionTagGTE applies the GTE predicate on the "version_tag" field.
func VersionTagGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldVersionTag, v))
}

// VersionTagLT applies the LT predicate on the "version_tag" field.
func VersionTagLT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldVersionTag, v))
}

// VersionTagLTE applies the LTE predicate on the "version_tag" field.
func VersionTagLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldVersionTag, v))
}

// VersionTagContains applies the Contains predicate on the "version_tag" field.
func VersionTagContains(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContains(FieldVersionTag, v))
}

// VersionTagHasPrefix applies the HasPrefix predicate on the "version_tag" field.
func VersionTagHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasPrefix(FieldVersionTag, v))
}

// VersionTagHasSuffix applies the HasSuffix predicate on the "version_tag" field.
func VersionTagHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasSuffix(FieldVersionTag, v))
}

// VersionTagIsNil applies the IsNil predicate on the "version_tag" field.
func VersionTagIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldVersionTag))
}

// VersionTagNotNil applies the NotNil predicate on the "version_tag" field.
func VersionTagNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldVersionTag))
}

// VersionTagEqualFold applies the EqualFold predicate on the "version_tag" field.
func VersionTagEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEqualFold(FieldVersionTag, v))
}

// VersionTagContainsFold applies the ContainsFold predicate on the "version_tag" field.
func VersionTagContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContainsFold(FieldVersionTag, v))
}

// ResourceKeyEQ applies the EQ predicate on the "resource_key" field.
func ResourceKeyEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldResourceKey, v))
}

// ResourceKeyNEQ applies the NEQ predicate on the "resource_key" field.
func ResourceKeyNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldResourceKey, v))
}

// ResourceKeyIn applies the In predicate on the "resource_key" field.
func ResourceKeyIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldResourceKey, vs...))
}

// ResourceKeyNotIn applies the NotIn predicate on the "resource_key" field.
func ResourceKeyNotIn(vs ...string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldResourceKey, vs...))
}

// ResourceKeyGT applies the GT predicate on the "resource_key" field.
func ResourceKeyGT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldResourceKey, v))
}

// ResourceKeyGTE applies the GTE predicate on the "resource_key" field.
func ResourceKeyGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldResourceKey, v))
}

// ResourceKeyLT applies the LT predicate on the "resource_key" field.
func ResourceKeyLT(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldResourceKey, v))
}

// ResourceKeyLTE applies the LTE predicate on the "resource_key" field.
func ResourceKeyLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldResourceKey, v))
}

// ResourceKeyContains applies the Contains predicate on the "resource_key" field.
func ResourceKeyContains(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContains(FieldResourceKey, v))
}

// ResourceKeyHasPrefix applies the HasPrefix predicate on the "resource_key" field.
func ResourceKeyHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasPrefix(FieldResourceKey, v))
}

// ResourceKeyHasSuffix applies the HasSuffix predicate on the "resource_key" field.
func ResourceKeyHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldHasSuffix(FieldResourceKey, v))
}

// ResourceKeyIsNil applies the IsNil predicate on the "resource_key" field.
func ResourceKeyIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldResourceKey))
}

// ResourceKeyNotNil applies the NotNil predicate on the "resource_key" field.
func ResourceKeyNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldResourceKey))
}

// ResourceKeyEqualFold applies the EqualFold predicate on the "resource_key" field.
func ResourceKeyEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEqualFold(FieldResourceKey, v))
}

// ResourceKeyContainsFold applies the ContainsFold predicate on the "resource_key" field.
func ResourceKeyContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldContainsFold(FieldResourceKey, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v int) predicate.ProcDef {
	return predicate.ProcDef(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDIsNil applies the IsNil predicate on the "resource_id" field.
func ResourceIDIsNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldIsNull(FieldResourceID))
}

// ResourceIDNotNil applies the NotNil predicate on the "resource_id" field.
func ResourceIDNotNil() predicate.ProcDef {
	return predicate.ProcDef(sql.FieldNotNull(FieldResourceID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v typex.SimpleStatus) predicate.ProcDef {
	vc := v
	return predicate.ProcDef(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v typex.SimpleStatus) predicate.ProcDef {
	vc := v
	return predicate.ProcDef(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...typex.SimpleStatus) predicate.ProcDef {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...typex.SimpleStatus) predicate.ProcDef {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(sql.FieldNotIn(FieldStatus, v...))
}

// HasDeployment applies the HasEdge predicate on the "deployment" edge.
func HasDeployment() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeploymentTable, DeploymentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Deployment
		step.Edge.Schema = schemaConfig.ProcDef
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentWith applies the HasEdge predicate on the "deployment" edge with a given conditions (other predicates).
func HasDeploymentWith(preds ...predicate.Deployment) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		step := newDeploymentStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Deployment
		step.Edge.Schema = schemaConfig.ProcDef
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProcInstances applies the HasEdge predicate on the "proc_instances" edge.
func HasProcInstances() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProcInstancesTable, ProcInstancesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProcInst
		step.Edge.Schema = schemaConfig.ProcInst
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProcInstancesWith applies the HasEdge predicate on the "proc_instances" edge with a given conditions (other predicates).
func HasProcInstancesWith(preds ...predicate.ProcInst) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		step := newProcInstancesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProcInst
		step.Edge.Schema = schemaConfig.ProcInst
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcDef) predicate.ProcDef {
	return predicate.ProcDef(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcDef) predicate.ProcDef {
	return predicate.ProcDef(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcDef) predicate.ProcDef {
	return predicate.ProcDef(sql.NotPredicates(p))
}
