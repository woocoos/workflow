// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/workflow/ent/predicate"
	"github.com/woocoos/workflow/ent/procdef"
	"github.com/woocoos/workflow/ent/procinst"

	"github.com/woocoos/workflow/ent/internal"
)

// ProcDefUpdate is the builder for updating ProcDef entities.
type ProcDefUpdate struct {
	config
	hooks    []Hook
	mutation *ProcDefMutation
}

// Where appends a list predicates to the ProcDefUpdate builder.
func (pdu *ProcDefUpdate) Where(ps ...predicate.ProcDef) *ProcDefUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetUpdatedBy sets the "updated_by" field.
func (pdu *ProcDefUpdate) SetUpdatedBy(i int) *ProcDefUpdate {
	pdu.mutation.ResetUpdatedBy()
	pdu.mutation.SetUpdatedBy(i)
	return pdu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableUpdatedBy(i *int) *ProcDefUpdate {
	if i != nil {
		pdu.SetUpdatedBy(*i)
	}
	return pdu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pdu *ProcDefUpdate) AddUpdatedBy(i int) *ProcDefUpdate {
	pdu.mutation.AddUpdatedBy(i)
	return pdu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pdu *ProcDefUpdate) ClearUpdatedBy() *ProcDefUpdate {
	pdu.mutation.ClearUpdatedBy()
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProcDefUpdate) SetUpdatedAt(t time.Time) *ProcDefUpdate {
	pdu.mutation.SetUpdatedAt(t)
	return pdu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableUpdatedAt(t *time.Time) *ProcDefUpdate {
	if t != nil {
		pdu.SetUpdatedAt(*t)
	}
	return pdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pdu *ProcDefUpdate) ClearUpdatedAt() *ProcDefUpdate {
	pdu.mutation.ClearUpdatedAt()
	return pdu
}

// SetCategory sets the "category" field.
func (pdu *ProcDefUpdate) SetCategory(s string) *ProcDefUpdate {
	pdu.mutation.SetCategory(s)
	return pdu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableCategory(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetCategory(*s)
	}
	return pdu
}

// ClearCategory clears the value of the "category" field.
func (pdu *ProcDefUpdate) ClearCategory() *ProcDefUpdate {
	pdu.mutation.ClearCategory()
	return pdu
}

// SetName sets the "name" field.
func (pdu *ProcDefUpdate) SetName(s string) *ProcDefUpdate {
	pdu.mutation.SetName(s)
	return pdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableName(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetName(*s)
	}
	return pdu
}

// ClearName clears the value of the "name" field.
func (pdu *ProcDefUpdate) ClearName() *ProcDefUpdate {
	pdu.mutation.ClearName()
	return pdu
}

// SetKey sets the "key" field.
func (pdu *ProcDefUpdate) SetKey(s string) *ProcDefUpdate {
	pdu.mutation.SetKey(s)
	return pdu
}

// SetVersion sets the "version" field.
func (pdu *ProcDefUpdate) SetVersion(i int32) *ProcDefUpdate {
	pdu.mutation.ResetVersion()
	pdu.mutation.SetVersion(i)
	return pdu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableVersion(i *int32) *ProcDefUpdate {
	if i != nil {
		pdu.SetVersion(*i)
	}
	return pdu
}

// AddVersion adds i to the "version" field.
func (pdu *ProcDefUpdate) AddVersion(i int32) *ProcDefUpdate {
	pdu.mutation.AddVersion(i)
	return pdu
}

// ClearVersion clears the value of the "version" field.
func (pdu *ProcDefUpdate) ClearVersion() *ProcDefUpdate {
	pdu.mutation.ClearVersion()
	return pdu
}

// SetRevision sets the "revision" field.
func (pdu *ProcDefUpdate) SetRevision(i int32) *ProcDefUpdate {
	pdu.mutation.ResetRevision()
	pdu.mutation.SetRevision(i)
	return pdu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableRevision(i *int32) *ProcDefUpdate {
	if i != nil {
		pdu.SetRevision(*i)
	}
	return pdu
}

// AddRevision adds i to the "revision" field.
func (pdu *ProcDefUpdate) AddRevision(i int32) *ProcDefUpdate {
	pdu.mutation.AddRevision(i)
	return pdu
}

// ClearRevision clears the value of the "revision" field.
func (pdu *ProcDefUpdate) ClearRevision() *ProcDefUpdate {
	pdu.mutation.ClearRevision()
	return pdu
}

// SetVersionTag sets the "version_tag" field.
func (pdu *ProcDefUpdate) SetVersionTag(s string) *ProcDefUpdate {
	pdu.mutation.SetVersionTag(s)
	return pdu
}

// SetNillableVersionTag sets the "version_tag" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableVersionTag(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetVersionTag(*s)
	}
	return pdu
}

// ClearVersionTag clears the value of the "version_tag" field.
func (pdu *ProcDefUpdate) ClearVersionTag() *ProcDefUpdate {
	pdu.mutation.ClearVersionTag()
	return pdu
}

// SetResourceKey sets the "resource_key" field.
func (pdu *ProcDefUpdate) SetResourceKey(s string) *ProcDefUpdate {
	pdu.mutation.SetResourceKey(s)
	return pdu
}

// SetNillableResourceKey sets the "resource_key" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableResourceKey(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetResourceKey(*s)
	}
	return pdu
}

// ClearResourceKey clears the value of the "resource_key" field.
func (pdu *ProcDefUpdate) ClearResourceKey() *ProcDefUpdate {
	pdu.mutation.ClearResourceKey()
	return pdu
}

// SetResourceID sets the "resource_id" field.
func (pdu *ProcDefUpdate) SetResourceID(i int) *ProcDefUpdate {
	pdu.mutation.ResetResourceID()
	pdu.mutation.SetResourceID(i)
	return pdu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableResourceID(i *int) *ProcDefUpdate {
	if i != nil {
		pdu.SetResourceID(*i)
	}
	return pdu
}

// AddResourceID adds i to the "resource_id" field.
func (pdu *ProcDefUpdate) AddResourceID(i int) *ProcDefUpdate {
	pdu.mutation.AddResourceID(i)
	return pdu
}

// ClearResourceID clears the value of the "resource_id" field.
func (pdu *ProcDefUpdate) ClearResourceID() *ProcDefUpdate {
	pdu.mutation.ClearResourceID()
	return pdu
}

// SetStatus sets the "status" field.
func (pdu *ProcDefUpdate) SetStatus(ts typex.SimpleStatus) *ProcDefUpdate {
	pdu.mutation.SetStatus(ts)
	return pdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableStatus(ts *typex.SimpleStatus) *ProcDefUpdate {
	if ts != nil {
		pdu.SetStatus(*ts)
	}
	return pdu
}

// AddProcInstanceIDs adds the "proc_instances" edge to the ProcInst entity by IDs.
func (pdu *ProcDefUpdate) AddProcInstanceIDs(ids ...int) *ProcDefUpdate {
	pdu.mutation.AddProcInstanceIDs(ids...)
	return pdu
}

// AddProcInstances adds the "proc_instances" edges to the ProcInst entity.
func (pdu *ProcDefUpdate) AddProcInstances(p ...*ProcInst) *ProcDefUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdu.AddProcInstanceIDs(ids...)
}

// Mutation returns the ProcDefMutation object of the builder.
func (pdu *ProcDefUpdate) Mutation() *ProcDefMutation {
	return pdu.mutation
}

// ClearProcInstances clears all "proc_instances" edges to the ProcInst entity.
func (pdu *ProcDefUpdate) ClearProcInstances() *ProcDefUpdate {
	pdu.mutation.ClearProcInstances()
	return pdu
}

// RemoveProcInstanceIDs removes the "proc_instances" edge to ProcInst entities by IDs.
func (pdu *ProcDefUpdate) RemoveProcInstanceIDs(ids ...int) *ProcDefUpdate {
	pdu.mutation.RemoveProcInstanceIDs(ids...)
	return pdu
}

// RemoveProcInstances removes "proc_instances" edges to ProcInst entities.
func (pdu *ProcDefUpdate) RemoveProcInstances(p ...*ProcInst) *ProcDefUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdu.RemoveProcInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProcDefUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProcDefUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProcDefUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProcDefUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *ProcDefUpdate) check() error {
	if v, ok := pdu.mutation.Status(); ok {
		if err := procdef.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProcDef.status": %w`, err)}
		}
	}
	if _, ok := pdu.mutation.DeploymentID(); pdu.mutation.DeploymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProcDef.deployment"`)
	}
	return nil
}

func (pdu *ProcDefUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(procdef.Table, procdef.Columns, sqlgraph.NewFieldSpec(procdef.FieldID, field.TypeInt))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.UpdatedBy(); ok {
		_spec.SetField(procdef.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := pdu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(procdef.FieldUpdatedBy, field.TypeInt, value)
	}
	if pdu.mutation.UpdatedByCleared() {
		_spec.ClearField(procdef.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(procdef.FieldUpdatedAt, field.TypeTime, value)
	}
	if pdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(procdef.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pdu.mutation.Category(); ok {
		_spec.SetField(procdef.FieldCategory, field.TypeString, value)
	}
	if pdu.mutation.CategoryCleared() {
		_spec.ClearField(procdef.FieldCategory, field.TypeString)
	}
	if value, ok := pdu.mutation.Name(); ok {
		_spec.SetField(procdef.FieldName, field.TypeString, value)
	}
	if pdu.mutation.NameCleared() {
		_spec.ClearField(procdef.FieldName, field.TypeString)
	}
	if value, ok := pdu.mutation.Key(); ok {
		_spec.SetField(procdef.FieldKey, field.TypeString, value)
	}
	if value, ok := pdu.mutation.Version(); ok {
		_spec.SetField(procdef.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := pdu.mutation.AddedVersion(); ok {
		_spec.AddField(procdef.FieldVersion, field.TypeInt32, value)
	}
	if pdu.mutation.VersionCleared() {
		_spec.ClearField(procdef.FieldVersion, field.TypeInt32)
	}
	if value, ok := pdu.mutation.Revision(); ok {
		_spec.SetField(procdef.FieldRevision, field.TypeInt32, value)
	}
	if value, ok := pdu.mutation.AddedRevision(); ok {
		_spec.AddField(procdef.FieldRevision, field.TypeInt32, value)
	}
	if pdu.mutation.RevisionCleared() {
		_spec.ClearField(procdef.FieldRevision, field.TypeInt32)
	}
	if value, ok := pdu.mutation.VersionTag(); ok {
		_spec.SetField(procdef.FieldVersionTag, field.TypeString, value)
	}
	if pdu.mutation.VersionTagCleared() {
		_spec.ClearField(procdef.FieldVersionTag, field.TypeString)
	}
	if value, ok := pdu.mutation.ResourceKey(); ok {
		_spec.SetField(procdef.FieldResourceKey, field.TypeString, value)
	}
	if pdu.mutation.ResourceKeyCleared() {
		_spec.ClearField(procdef.FieldResourceKey, field.TypeString)
	}
	if value, ok := pdu.mutation.ResourceID(); ok {
		_spec.SetField(procdef.FieldResourceID, field.TypeInt, value)
	}
	if value, ok := pdu.mutation.AddedResourceID(); ok {
		_spec.AddField(procdef.FieldResourceID, field.TypeInt, value)
	}
	if pdu.mutation.ResourceIDCleared() {
		_spec.ClearField(procdef.FieldResourceID, field.TypeInt)
	}
	if value, ok := pdu.mutation.Status(); ok {
		_spec.SetField(procdef.FieldStatus, field.TypeEnum, value)
	}
	if pdu.mutation.ProcInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procdef.ProcInstancesTable,
			Columns: []string{procdef.ProcInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pdu.schemaConfig.ProcInst
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.RemovedProcInstancesIDs(); len(nodes) > 0 && !pdu.mutation.ProcInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procdef.ProcInstancesTable,
			Columns: []string{procdef.ProcInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pdu.schemaConfig.ProcInst
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.ProcInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procdef.ProcInstancesTable,
			Columns: []string{procdef.ProcInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pdu.schemaConfig.ProcInst
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pdu.schemaConfig.ProcDef
	ctx = internal.NewSchemaConfigContext(ctx, pdu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procdef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProcDefUpdateOne is the builder for updating a single ProcDef entity.
type ProcDefUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcDefMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (pduo *ProcDefUpdateOne) SetUpdatedBy(i int) *ProcDefUpdateOne {
	pduo.mutation.ResetUpdatedBy()
	pduo.mutation.SetUpdatedBy(i)
	return pduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableUpdatedBy(i *int) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetUpdatedBy(*i)
	}
	return pduo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pduo *ProcDefUpdateOne) AddUpdatedBy(i int) *ProcDefUpdateOne {
	pduo.mutation.AddUpdatedBy(i)
	return pduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pduo *ProcDefUpdateOne) ClearUpdatedBy() *ProcDefUpdateOne {
	pduo.mutation.ClearUpdatedBy()
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProcDefUpdateOne) SetUpdatedAt(t time.Time) *ProcDefUpdateOne {
	pduo.mutation.SetUpdatedAt(t)
	return pduo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProcDefUpdateOne {
	if t != nil {
		pduo.SetUpdatedAt(*t)
	}
	return pduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pduo *ProcDefUpdateOne) ClearUpdatedAt() *ProcDefUpdateOne {
	pduo.mutation.ClearUpdatedAt()
	return pduo
}

// SetCategory sets the "category" field.
func (pduo *ProcDefUpdateOne) SetCategory(s string) *ProcDefUpdateOne {
	pduo.mutation.SetCategory(s)
	return pduo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableCategory(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetCategory(*s)
	}
	return pduo
}

// ClearCategory clears the value of the "category" field.
func (pduo *ProcDefUpdateOne) ClearCategory() *ProcDefUpdateOne {
	pduo.mutation.ClearCategory()
	return pduo
}

// SetName sets the "name" field.
func (pduo *ProcDefUpdateOne) SetName(s string) *ProcDefUpdateOne {
	pduo.mutation.SetName(s)
	return pduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableName(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetName(*s)
	}
	return pduo
}

// ClearName clears the value of the "name" field.
func (pduo *ProcDefUpdateOne) ClearName() *ProcDefUpdateOne {
	pduo.mutation.ClearName()
	return pduo
}

// SetKey sets the "key" field.
func (pduo *ProcDefUpdateOne) SetKey(s string) *ProcDefUpdateOne {
	pduo.mutation.SetKey(s)
	return pduo
}

// SetVersion sets the "version" field.
func (pduo *ProcDefUpdateOne) SetVersion(i int32) *ProcDefUpdateOne {
	pduo.mutation.ResetVersion()
	pduo.mutation.SetVersion(i)
	return pduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableVersion(i *int32) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetVersion(*i)
	}
	return pduo
}

// AddVersion adds i to the "version" field.
func (pduo *ProcDefUpdateOne) AddVersion(i int32) *ProcDefUpdateOne {
	pduo.mutation.AddVersion(i)
	return pduo
}

// ClearVersion clears the value of the "version" field.
func (pduo *ProcDefUpdateOne) ClearVersion() *ProcDefUpdateOne {
	pduo.mutation.ClearVersion()
	return pduo
}

// SetRevision sets the "revision" field.
func (pduo *ProcDefUpdateOne) SetRevision(i int32) *ProcDefUpdateOne {
	pduo.mutation.ResetRevision()
	pduo.mutation.SetRevision(i)
	return pduo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableRevision(i *int32) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetRevision(*i)
	}
	return pduo
}

// AddRevision adds i to the "revision" field.
func (pduo *ProcDefUpdateOne) AddRevision(i int32) *ProcDefUpdateOne {
	pduo.mutation.AddRevision(i)
	return pduo
}

// ClearRevision clears the value of the "revision" field.
func (pduo *ProcDefUpdateOne) ClearRevision() *ProcDefUpdateOne {
	pduo.mutation.ClearRevision()
	return pduo
}

// SetVersionTag sets the "version_tag" field.
func (pduo *ProcDefUpdateOne) SetVersionTag(s string) *ProcDefUpdateOne {
	pduo.mutation.SetVersionTag(s)
	return pduo
}

// SetNillableVersionTag sets the "version_tag" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableVersionTag(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetVersionTag(*s)
	}
	return pduo
}

// ClearVersionTag clears the value of the "version_tag" field.
func (pduo *ProcDefUpdateOne) ClearVersionTag() *ProcDefUpdateOne {
	pduo.mutation.ClearVersionTag()
	return pduo
}

// SetResourceKey sets the "resource_key" field.
func (pduo *ProcDefUpdateOne) SetResourceKey(s string) *ProcDefUpdateOne {
	pduo.mutation.SetResourceKey(s)
	return pduo
}

// SetNillableResourceKey sets the "resource_key" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableResourceKey(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetResourceKey(*s)
	}
	return pduo
}

// ClearResourceKey clears the value of the "resource_key" field.
func (pduo *ProcDefUpdateOne) ClearResourceKey() *ProcDefUpdateOne {
	pduo.mutation.ClearResourceKey()
	return pduo
}

// SetResourceID sets the "resource_id" field.
func (pduo *ProcDefUpdateOne) SetResourceID(i int) *ProcDefUpdateOne {
	pduo.mutation.ResetResourceID()
	pduo.mutation.SetResourceID(i)
	return pduo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableResourceID(i *int) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetResourceID(*i)
	}
	return pduo
}

// AddResourceID adds i to the "resource_id" field.
func (pduo *ProcDefUpdateOne) AddResourceID(i int) *ProcDefUpdateOne {
	pduo.mutation.AddResourceID(i)
	return pduo
}

// ClearResourceID clears the value of the "resource_id" field.
func (pduo *ProcDefUpdateOne) ClearResourceID() *ProcDefUpdateOne {
	pduo.mutation.ClearResourceID()
	return pduo
}

// SetStatus sets the "status" field.
func (pduo *ProcDefUpdateOne) SetStatus(ts typex.SimpleStatus) *ProcDefUpdateOne {
	pduo.mutation.SetStatus(ts)
	return pduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *ProcDefUpdateOne {
	if ts != nil {
		pduo.SetStatus(*ts)
	}
	return pduo
}

// AddProcInstanceIDs adds the "proc_instances" edge to the ProcInst entity by IDs.
func (pduo *ProcDefUpdateOne) AddProcInstanceIDs(ids ...int) *ProcDefUpdateOne {
	pduo.mutation.AddProcInstanceIDs(ids...)
	return pduo
}

// AddProcInstances adds the "proc_instances" edges to the ProcInst entity.
func (pduo *ProcDefUpdateOne) AddProcInstances(p ...*ProcInst) *ProcDefUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pduo.AddProcInstanceIDs(ids...)
}

// Mutation returns the ProcDefMutation object of the builder.
func (pduo *ProcDefUpdateOne) Mutation() *ProcDefMutation {
	return pduo.mutation
}

// ClearProcInstances clears all "proc_instances" edges to the ProcInst entity.
func (pduo *ProcDefUpdateOne) ClearProcInstances() *ProcDefUpdateOne {
	pduo.mutation.ClearProcInstances()
	return pduo
}

// RemoveProcInstanceIDs removes the "proc_instances" edge to ProcInst entities by IDs.
func (pduo *ProcDefUpdateOne) RemoveProcInstanceIDs(ids ...int) *ProcDefUpdateOne {
	pduo.mutation.RemoveProcInstanceIDs(ids...)
	return pduo
}

// RemoveProcInstances removes "proc_instances" edges to ProcInst entities.
func (pduo *ProcDefUpdateOne) RemoveProcInstances(p ...*ProcInst) *ProcDefUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pduo.RemoveProcInstanceIDs(ids...)
}

// Where appends a list predicates to the ProcDefUpdate builder.
func (pduo *ProcDefUpdateOne) Where(ps ...predicate.ProcDef) *ProcDefUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProcDefUpdateOne) Select(field string, fields ...string) *ProcDefUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProcDef entity.
func (pduo *ProcDefUpdateOne) Save(ctx context.Context) (*ProcDef, error) {
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProcDefUpdateOne) SaveX(ctx context.Context) *ProcDef {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProcDefUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProcDefUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *ProcDefUpdateOne) check() error {
	if v, ok := pduo.mutation.Status(); ok {
		if err := procdef.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProcDef.status": %w`, err)}
		}
	}
	if _, ok := pduo.mutation.DeploymentID(); pduo.mutation.DeploymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProcDef.deployment"`)
	}
	return nil
}

func (pduo *ProcDefUpdateOne) sqlSave(ctx context.Context) (_node *ProcDef, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(procdef.Table, procdef.Columns, sqlgraph.NewFieldSpec(procdef.FieldID, field.TypeInt))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcDef.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procdef.FieldID)
		for _, f := range fields {
			if !procdef.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != procdef.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.UpdatedBy(); ok {
		_spec.SetField(procdef.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := pduo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(procdef.FieldUpdatedBy, field.TypeInt, value)
	}
	if pduo.mutation.UpdatedByCleared() {
		_spec.ClearField(procdef.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(procdef.FieldUpdatedAt, field.TypeTime, value)
	}
	if pduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(procdef.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pduo.mutation.Category(); ok {
		_spec.SetField(procdef.FieldCategory, field.TypeString, value)
	}
	if pduo.mutation.CategoryCleared() {
		_spec.ClearField(procdef.FieldCategory, field.TypeString)
	}
	if value, ok := pduo.mutation.Name(); ok {
		_spec.SetField(procdef.FieldName, field.TypeString, value)
	}
	if pduo.mutation.NameCleared() {
		_spec.ClearField(procdef.FieldName, field.TypeString)
	}
	if value, ok := pduo.mutation.Key(); ok {
		_spec.SetField(procdef.FieldKey, field.TypeString, value)
	}
	if value, ok := pduo.mutation.Version(); ok {
		_spec.SetField(procdef.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := pduo.mutation.AddedVersion(); ok {
		_spec.AddField(procdef.FieldVersion, field.TypeInt32, value)
	}
	if pduo.mutation.VersionCleared() {
		_spec.ClearField(procdef.FieldVersion, field.TypeInt32)
	}
	if value, ok := pduo.mutation.Revision(); ok {
		_spec.SetField(procdef.FieldRevision, field.TypeInt32, value)
	}
	if value, ok := pduo.mutation.AddedRevision(); ok {
		_spec.AddField(procdef.FieldRevision, field.TypeInt32, value)
	}
	if pduo.mutation.RevisionCleared() {
		_spec.ClearField(procdef.FieldRevision, field.TypeInt32)
	}
	if value, ok := pduo.mutation.VersionTag(); ok {
		_spec.SetField(procdef.FieldVersionTag, field.TypeString, value)
	}
	if pduo.mutation.VersionTagCleared() {
		_spec.ClearField(procdef.FieldVersionTag, field.TypeString)
	}
	if value, ok := pduo.mutation.ResourceKey(); ok {
		_spec.SetField(procdef.FieldResourceKey, field.TypeString, value)
	}
	if pduo.mutation.ResourceKeyCleared() {
		_spec.ClearField(procdef.FieldResourceKey, field.TypeString)
	}
	if value, ok := pduo.mutation.ResourceID(); ok {
		_spec.SetField(procdef.FieldResourceID, field.TypeInt, value)
	}
	if value, ok := pduo.mutation.AddedResourceID(); ok {
		_spec.AddField(procdef.FieldResourceID, field.TypeInt, value)
	}
	if pduo.mutation.ResourceIDCleared() {
		_spec.ClearField(procdef.FieldResourceID, field.TypeInt)
	}
	if value, ok := pduo.mutation.Status(); ok {
		_spec.SetField(procdef.FieldStatus, field.TypeEnum, value)
	}
	if pduo.mutation.ProcInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procdef.ProcInstancesTable,
			Columns: []string{procdef.ProcInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pduo.schemaConfig.ProcInst
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.RemovedProcInstancesIDs(); len(nodes) > 0 && !pduo.mutation.ProcInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procdef.ProcInstancesTable,
			Columns: []string{procdef.ProcInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pduo.schemaConfig.ProcInst
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.ProcInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procdef.ProcInstancesTable,
			Columns: []string{procdef.ProcInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pduo.schemaConfig.ProcInst
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pduo.schemaConfig.ProcDef
	ctx = internal.NewSchemaConfigContext(ctx, pduo.schemaConfig)
	_node = &ProcDef{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procdef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
