// Code generated by ent, DO NOT EDIT.

package procinst

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the procinst type in the database.
	Label = "proc_inst"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProcDefID holds the string denoting the proc_def_id field in the database.
	FieldProcDefID = "proc_def_id"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldBusinessKey holds the string denoting the business_key field in the database.
	FieldBusinessKey = "business_key"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldStartUserID holds the string denoting the start_user_id field in the database.
	FieldStartUserID = "start_user_id"
	// FieldSupperInstanceID holds the string denoting the supper_instance_id field in the database.
	FieldSupperInstanceID = "supper_instance_id"
	// FieldRootInstanceID holds the string denoting the root_instance_id field in the database.
	FieldRootInstanceID = "root_instance_id"
	// FieldDeletedTime holds the string denoting the deleted_time field in the database.
	FieldDeletedTime = "deleted_time"
	// FieldDeletedReason holds the string denoting the deleted_reason field in the database.
	FieldDeletedReason = "deleted_reason"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeProcDef holds the string denoting the proc_def edge name in mutations.
	EdgeProcDef = "proc_def"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the procinst in the database.
	Table = "act_proc_inst"
	// ProcDefTable is the table that holds the proc_def relation/edge.
	ProcDefTable = "act_proc_inst"
	// ProcDefInverseTable is the table name for the ProcDef entity.
	// It exists in this package in order to avoid circular dependency with the "procdef" package.
	ProcDefInverseTable = "act_proc_def"
	// ProcDefColumn is the table column denoting the proc_def relation/edge.
	ProcDefColumn = "proc_def_id"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "act_task"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "act_task"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "proc_inst_id"
)

// Columns holds all SQL columns for procinst fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldProcDefID,
	FieldOrgID,
	FieldAppID,
	FieldBusinessKey,
	FieldStartTime,
	FieldEndTime,
	FieldDuration,
	FieldStartUserID,
	FieldSupperInstanceID,
	FieldRootInstanceID,
	FieldDeletedTime,
	FieldDeletedReason,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/workflow/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusReady      Status = "ready"
	StatusActive     Status = "active"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
	StatusTerminated Status = "terminated"
	StatusSuspended  Status = "suspended"
	StatusDeleted    Status = "deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusReady, StatusActive, StatusCompleted, StatusFailed, StatusTerminated, StatusSuspended, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("procinst: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
