// Code generated by ent, DO NOT EDIT.

package procinst

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/workflow/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProcDefID applies equality check predicate on the "proc_def_id" field. It's identical to ProcDefIDEQ.
func ProcDefID(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldProcDefID, v))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldOrgID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldAppID, v))
}

// BusinessKey applies equality check predicate on the "business_key" field. It's identical to BusinessKeyEQ.
func BusinessKey(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldBusinessKey, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldEndTime, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldDuration, v))
}

// StartUserID applies equality check predicate on the "start_user_id" field. It's identical to StartUserIDEQ.
func StartUserID(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldStartUserID, v))
}

// SupperInstanceID applies equality check predicate on the "supper_instance_id" field. It's identical to SupperInstanceIDEQ.
func SupperInstanceID(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldSupperInstanceID, v))
}

// RootInstanceID applies equality check predicate on the "root_instance_id" field. It's identical to RootInstanceIDEQ.
func RootInstanceID(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldRootInstanceID, v))
}

// DeletedTime applies equality check predicate on the "deleted_time" field. It's identical to DeletedTimeEQ.
func DeletedTime(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedReason applies equality check predicate on the "deleted_reason" field. It's identical to DeletedReasonEQ.
func DeletedReason(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldDeletedReason, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldUpdatedAt))
}

// ProcDefIDEQ applies the EQ predicate on the "proc_def_id" field.
func ProcDefIDEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldProcDefID, v))
}

// ProcDefIDNEQ applies the NEQ predicate on the "proc_def_id" field.
func ProcDefIDNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldProcDefID, v))
}

// ProcDefIDIn applies the In predicate on the "proc_def_id" field.
func ProcDefIDIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldProcDefID, vs...))
}

// ProcDefIDNotIn applies the NotIn predicate on the "proc_def_id" field.
func ProcDefIDNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldProcDefID, vs...))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldOrgID, v))
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldOrgID, v))
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldOrgID, v))
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldOrgID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldAppID, v))
}

// BusinessKeyEQ applies the EQ predicate on the "business_key" field.
func BusinessKeyEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldBusinessKey, v))
}

// BusinessKeyNEQ applies the NEQ predicate on the "business_key" field.
func BusinessKeyNEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldBusinessKey, v))
}

// BusinessKeyIn applies the In predicate on the "business_key" field.
func BusinessKeyIn(vs ...string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldBusinessKey, vs...))
}

// BusinessKeyNotIn applies the NotIn predicate on the "business_key" field.
func BusinessKeyNotIn(vs ...string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldBusinessKey, vs...))
}

// BusinessKeyGT applies the GT predicate on the "business_key" field.
func BusinessKeyGT(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldBusinessKey, v))
}

// BusinessKeyGTE applies the GTE predicate on the "business_key" field.
func BusinessKeyGTE(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldBusinessKey, v))
}

// BusinessKeyLT applies the LT predicate on the "business_key" field.
func BusinessKeyLT(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldBusinessKey, v))
}

// BusinessKeyLTE applies the LTE predicate on the "business_key" field.
func BusinessKeyLTE(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldBusinessKey, v))
}

// BusinessKeyContains applies the Contains predicate on the "business_key" field.
func BusinessKeyContains(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldContains(FieldBusinessKey, v))
}

// BusinessKeyHasPrefix applies the HasPrefix predicate on the "business_key" field.
func BusinessKeyHasPrefix(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldHasPrefix(FieldBusinessKey, v))
}

// BusinessKeyHasSuffix applies the HasSuffix predicate on the "business_key" field.
func BusinessKeyHasSuffix(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldHasSuffix(FieldBusinessKey, v))
}

// BusinessKeyEqualFold applies the EqualFold predicate on the "business_key" field.
func BusinessKeyEqualFold(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEqualFold(FieldBusinessKey, v))
}

// BusinessKeyContainsFold applies the ContainsFold predicate on the "business_key" field.
func BusinessKeyContainsFold(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldContainsFold(FieldBusinessKey, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldEndTime))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldDuration))
}

// StartUserIDEQ applies the EQ predicate on the "start_user_id" field.
func StartUserIDEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldStartUserID, v))
}

// StartUserIDNEQ applies the NEQ predicate on the "start_user_id" field.
func StartUserIDNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldStartUserID, v))
}

// StartUserIDIn applies the In predicate on the "start_user_id" field.
func StartUserIDIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldStartUserID, vs...))
}

// StartUserIDNotIn applies the NotIn predicate on the "start_user_id" field.
func StartUserIDNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldStartUserID, vs...))
}

// StartUserIDGT applies the GT predicate on the "start_user_id" field.
func StartUserIDGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldStartUserID, v))
}

// StartUserIDGTE applies the GTE predicate on the "start_user_id" field.
func StartUserIDGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldStartUserID, v))
}

// StartUserIDLT applies the LT predicate on the "start_user_id" field.
func StartUserIDLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldStartUserID, v))
}

// StartUserIDLTE applies the LTE predicate on the "start_user_id" field.
func StartUserIDLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldStartUserID, v))
}

// SupperInstanceIDEQ applies the EQ predicate on the "supper_instance_id" field.
func SupperInstanceIDEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldSupperInstanceID, v))
}

// SupperInstanceIDNEQ applies the NEQ predicate on the "supper_instance_id" field.
func SupperInstanceIDNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldSupperInstanceID, v))
}

// SupperInstanceIDIn applies the In predicate on the "supper_instance_id" field.
func SupperInstanceIDIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldSupperInstanceID, vs...))
}

// SupperInstanceIDNotIn applies the NotIn predicate on the "supper_instance_id" field.
func SupperInstanceIDNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldSupperInstanceID, vs...))
}

// SupperInstanceIDGT applies the GT predicate on the "supper_instance_id" field.
func SupperInstanceIDGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldSupperInstanceID, v))
}

// SupperInstanceIDGTE applies the GTE predicate on the "supper_instance_id" field.
func SupperInstanceIDGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldSupperInstanceID, v))
}

// SupperInstanceIDLT applies the LT predicate on the "supper_instance_id" field.
func SupperInstanceIDLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldSupperInstanceID, v))
}

// SupperInstanceIDLTE applies the LTE predicate on the "supper_instance_id" field.
func SupperInstanceIDLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldSupperInstanceID, v))
}

// SupperInstanceIDIsNil applies the IsNil predicate on the "supper_instance_id" field.
func SupperInstanceIDIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldSupperInstanceID))
}

// SupperInstanceIDNotNil applies the NotNil predicate on the "supper_instance_id" field.
func SupperInstanceIDNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldSupperInstanceID))
}

// RootInstanceIDEQ applies the EQ predicate on the "root_instance_id" field.
func RootInstanceIDEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldRootInstanceID, v))
}

// RootInstanceIDNEQ applies the NEQ predicate on the "root_instance_id" field.
func RootInstanceIDNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldRootInstanceID, v))
}

// RootInstanceIDIn applies the In predicate on the "root_instance_id" field.
func RootInstanceIDIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldRootInstanceID, vs...))
}

// RootInstanceIDNotIn applies the NotIn predicate on the "root_instance_id" field.
func RootInstanceIDNotIn(vs ...int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldRootInstanceID, vs...))
}

// RootInstanceIDGT applies the GT predicate on the "root_instance_id" field.
func RootInstanceIDGT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldRootInstanceID, v))
}

// RootInstanceIDGTE applies the GTE predicate on the "root_instance_id" field.
func RootInstanceIDGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldRootInstanceID, v))
}

// RootInstanceIDLT applies the LT predicate on the "root_instance_id" field.
func RootInstanceIDLT(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldRootInstanceID, v))
}

// RootInstanceIDLTE applies the LTE predicate on the "root_instance_id" field.
func RootInstanceIDLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldRootInstanceID, v))
}

// RootInstanceIDIsNil applies the IsNil predicate on the "root_instance_id" field.
func RootInstanceIDIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldRootInstanceID))
}

// RootInstanceIDNotNil applies the NotNil predicate on the "root_instance_id" field.
func RootInstanceIDNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldRootInstanceID))
}

// DeletedTimeEQ applies the EQ predicate on the "deleted_time" field.
func DeletedTimeEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedTimeNEQ applies the NEQ predicate on the "deleted_time" field.
func DeletedTimeNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldDeletedTime, v))
}

// DeletedTimeIn applies the In predicate on the "deleted_time" field.
func DeletedTimeIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldDeletedTime, vs...))
}

// DeletedTimeNotIn applies the NotIn predicate on the "deleted_time" field.
func DeletedTimeNotIn(vs ...time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldDeletedTime, vs...))
}

// DeletedTimeGT applies the GT predicate on the "deleted_time" field.
func DeletedTimeGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldDeletedTime, v))
}

// DeletedTimeGTE applies the GTE predicate on the "deleted_time" field.
func DeletedTimeGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldDeletedTime, v))
}

// DeletedTimeLT applies the LT predicate on the "deleted_time" field.
func DeletedTimeLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldDeletedTime, v))
}

// DeletedTimeLTE applies the LTE predicate on the "deleted_time" field.
func DeletedTimeLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldDeletedTime, v))
}

// DeletedTimeIsNil applies the IsNil predicate on the "deleted_time" field.
func DeletedTimeIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldDeletedTime))
}

// DeletedTimeNotNil applies the NotNil predicate on the "deleted_time" field.
func DeletedTimeNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldDeletedTime))
}

// DeletedReasonEQ applies the EQ predicate on the "deleted_reason" field.
func DeletedReasonEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldDeletedReason, v))
}

// DeletedReasonNEQ applies the NEQ predicate on the "deleted_reason" field.
func DeletedReasonNEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldDeletedReason, v))
}

// DeletedReasonIn applies the In predicate on the "deleted_reason" field.
func DeletedReasonIn(vs ...string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldDeletedReason, vs...))
}

// DeletedReasonNotIn applies the NotIn predicate on the "deleted_reason" field.
func DeletedReasonNotIn(vs ...string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldDeletedReason, vs...))
}

// DeletedReasonGT applies the GT predicate on the "deleted_reason" field.
func DeletedReasonGT(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGT(FieldDeletedReason, v))
}

// DeletedReasonGTE applies the GTE predicate on the "deleted_reason" field.
func DeletedReasonGTE(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldGTE(FieldDeletedReason, v))
}

// DeletedReasonLT applies the LT predicate on the "deleted_reason" field.
func DeletedReasonLT(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLT(FieldDeletedReason, v))
}

// DeletedReasonLTE applies the LTE predicate on the "deleted_reason" field.
func DeletedReasonLTE(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldLTE(FieldDeletedReason, v))
}

// DeletedReasonContains applies the Contains predicate on the "deleted_reason" field.
func DeletedReasonContains(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldContains(FieldDeletedReason, v))
}

// DeletedReasonHasPrefix applies the HasPrefix predicate on the "deleted_reason" field.
func DeletedReasonHasPrefix(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldHasPrefix(FieldDeletedReason, v))
}

// DeletedReasonHasSuffix applies the HasSuffix predicate on the "deleted_reason" field.
func DeletedReasonHasSuffix(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldHasSuffix(FieldDeletedReason, v))
}

// DeletedReasonIsNil applies the IsNil predicate on the "deleted_reason" field.
func DeletedReasonIsNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIsNull(FieldDeletedReason))
}

// DeletedReasonNotNil applies the NotNil predicate on the "deleted_reason" field.
func DeletedReasonNotNil() predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotNull(FieldDeletedReason))
}

// DeletedReasonEqualFold applies the EqualFold predicate on the "deleted_reason" field.
func DeletedReasonEqualFold(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEqualFold(FieldDeletedReason, v))
}

// DeletedReasonContainsFold applies the ContainsFold predicate on the "deleted_reason" field.
func DeletedReasonContainsFold(v string) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldContainsFold(FieldDeletedReason, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ProcInst {
	return predicate.ProcInst(sql.FieldNotIn(FieldStatus, vs...))
}

// HasProcDef applies the HasEdge predicate on the "proc_def" edge.
func HasProcDef() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProcDefTable, ProcDefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProcDefWith applies the HasEdge predicate on the "proc_def" edge with a given conditions (other predicates).
func HasProcDefWith(preds ...predicate.ProcDef) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProcDefInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProcDefTable, ProcDefColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TasksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcInst) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcInst) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcInst) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		p(s.Not())
	})
}
