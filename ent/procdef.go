// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/workflow/ent/deployment"
	"github.com/woocoos/workflow/ent/procdef"
)

// ProcDef is the model entity for the ProcDef schema.
type ProcDef struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 部署ID
	DeploymentID int `json:"deployment_id,omitempty"`
	// 所属根组织ID
	OrgID int `json:"org_id,omitempty"`
	// 所属应用ID
	AppID int `json:"app_id,omitempty"`
	// 分类
	Category string `json:"category,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// KEY
	Key string `json:"key,omitempty"`
	// 版本
	Version int32 `json:"version,omitempty"`
	// 小版本
	Revision int32 `json:"revision,omitempty"`
	// 版本标签
	VersionTag string `json:"version_tag,omitempty"`
	// 资源名称
	ResourceName string `json:"resource_name,omitempty"`
	// 流程图资源名称
	DgrmResourceName string `json:"dgrm_resource_name,omitempty"`
	// 状态
	Status procdef.Status `json:"status,omitempty"`
	// 资源数据
	ResourceData []byte `json:"resource_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProcDefQuery when eager-loading is set.
	Edges ProcDefEdges `json:"edges"`
}

// ProcDefEdges holds the relations/edges for other nodes in the graph.
type ProcDefEdges struct {
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// ProcInstances holds the value of the proc_instances edge.
	ProcInstances []*ProcInst `json:"proc_instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedProcInstances map[string][]*ProcInst
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProcDefEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[0] {
		if e.Deployment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// ProcInstancesOrErr returns the ProcInstances value or an error if the edge
// was not loaded in eager-loading.
func (e ProcDefEdges) ProcInstancesOrErr() ([]*ProcInst, error) {
	if e.loadedTypes[1] {
		return e.ProcInstances, nil
	}
	return nil, &NotLoadedError{edge: "proc_instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcDef) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case procdef.FieldResourceData:
			values[i] = new([]byte)
		case procdef.FieldID, procdef.FieldCreatedBy, procdef.FieldUpdatedBy, procdef.FieldDeploymentID, procdef.FieldOrgID, procdef.FieldAppID, procdef.FieldVersion, procdef.FieldRevision:
			values[i] = new(sql.NullInt64)
		case procdef.FieldCategory, procdef.FieldName, procdef.FieldKey, procdef.FieldVersionTag, procdef.FieldResourceName, procdef.FieldDgrmResourceName, procdef.FieldStatus:
			values[i] = new(sql.NullString)
		case procdef.FieldCreatedAt, procdef.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProcDef", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcDef fields.
func (pd *ProcDef) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case procdef.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case procdef.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pd.CreatedBy = int(value.Int64)
			}
		case procdef.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Time
			}
		case procdef.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pd.UpdatedBy = int(value.Int64)
			}
		case procdef.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Time
			}
		case procdef.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				pd.DeploymentID = int(value.Int64)
			}
		case procdef.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				pd.OrgID = int(value.Int64)
			}
		case procdef.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				pd.AppID = int(value.Int64)
			}
		case procdef.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pd.Category = value.String
			}
		case procdef.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pd.Name = value.String
			}
		case procdef.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				pd.Key = value.String
			}
		case procdef.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pd.Version = int32(value.Int64)
			}
		case procdef.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				pd.Revision = int32(value.Int64)
			}
		case procdef.FieldVersionTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_tag", values[i])
			} else if value.Valid {
				pd.VersionTag = value.String
			}
		case procdef.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				pd.ResourceName = value.String
			}
		case procdef.FieldDgrmResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dgrm_resource_name", values[i])
			} else if value.Valid {
				pd.DgrmResourceName = value.String
			}
		case procdef.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pd.Status = procdef.Status(value.String)
			}
		case procdef.FieldResourceData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resource_data", values[i])
			} else if value != nil {
				pd.ResourceData = *value
			}
		}
	}
	return nil
}

// QueryDeployment queries the "deployment" edge of the ProcDef entity.
func (pd *ProcDef) QueryDeployment() *DeploymentQuery {
	return NewProcDefClient(pd.config).QueryDeployment(pd)
}

// QueryProcInstances queries the "proc_instances" edge of the ProcDef entity.
func (pd *ProcDef) QueryProcInstances() *ProcInstQuery {
	return NewProcDefClient(pd.config).QueryProcInstances(pd)
}

// Update returns a builder for updating this ProcDef.
// Note that you need to call ProcDef.Unwrap() before calling this method if this ProcDef
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProcDef) Update() *ProcDefUpdateOne {
	return NewProcDefClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProcDef entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProcDef) Unwrap() *ProcDef {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcDef is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProcDef) String() string {
	var builder strings.Builder
	builder.WriteString("ProcDef(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pd.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pd.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deployment_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.DeploymentID))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.OrgID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.AppID))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pd.Category)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pd.Name)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(pd.Key)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", pd.Version))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(fmt.Sprintf("%v", pd.Revision))
	builder.WriteString(", ")
	builder.WriteString("version_tag=")
	builder.WriteString(pd.VersionTag)
	builder.WriteString(", ")
	builder.WriteString("resource_name=")
	builder.WriteString(pd.ResourceName)
	builder.WriteString(", ")
	builder.WriteString("dgrm_resource_name=")
	builder.WriteString(pd.DgrmResourceName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pd.Status))
	builder.WriteString(", ")
	builder.WriteString("resource_data=")
	builder.WriteString(fmt.Sprintf("%v", pd.ResourceData))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProcInstances returns the ProcInstances named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pd *ProcDef) NamedProcInstances(name string) ([]*ProcInst, error) {
	if pd.Edges.namedProcInstances == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pd.Edges.namedProcInstances[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pd *ProcDef) appendNamedProcInstances(name string, edges ...*ProcInst) {
	if pd.Edges.namedProcInstances == nil {
		pd.Edges.namedProcInstances = make(map[string][]*ProcInst)
	}
	if len(edges) == 0 {
		pd.Edges.namedProcInstances[name] = []*ProcInst{}
	} else {
		pd.Edges.namedProcInstances[name] = append(pd.Edges.namedProcInstances[name], edges...)
	}
}

// ProcDefs is a parsable slice of ProcDef.
type ProcDefs []*ProcDef
