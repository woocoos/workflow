// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/workflow/ent/decisiondef"
	"github.com/woocoos/workflow/ent/decisionreqdef"
)

// DecisionDef is the model entity for the DecisionDef schema.
type DecisionDef struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// 部署ID
	DeploymentID int `json:"deployment_id,omitempty"`
	// 所属应用ID
	AppID int `json:"app_id,omitempty"`
	// 决策定义ID
	ReqDefID int `json:"req_def_id,omitempty"`
	// 分类
	Category string `json:"category,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// KEY
	Key string `json:"key,omitempty"`
	// 决策定义key
	ReqDefKey string `json:"req_def_key,omitempty"`
	// 版本
	Version int32 `json:"version,omitempty"`
	// 小版本
	Revision int32 `json:"revision,omitempty"`
	// 版本标签
	VersionTag string `json:"version_tag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DecisionDefQuery when eager-loading is set.
	Edges        DecisionDefEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DecisionDefEdges holds the relations/edges for other nodes in the graph.
type DecisionDefEdges struct {
	// ReqDef holds the value of the req_def edge.
	ReqDef *DecisionReqDef `json:"req_def,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ReqDefOrErr returns the ReqDef value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DecisionDefEdges) ReqDefOrErr() (*DecisionReqDef, error) {
	if e.loadedTypes[0] {
		if e.ReqDef == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: decisionreqdef.Label}
		}
		return e.ReqDef, nil
	}
	return nil, &NotLoadedError{edge: "req_def"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DecisionDef) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case decisiondef.FieldID, decisiondef.FieldCreatedBy, decisiondef.FieldUpdatedBy, decisiondef.FieldTenantID, decisiondef.FieldDeploymentID, decisiondef.FieldAppID, decisiondef.FieldReqDefID, decisiondef.FieldVersion, decisiondef.FieldRevision:
			values[i] = new(sql.NullInt64)
		case decisiondef.FieldCategory, decisiondef.FieldName, decisiondef.FieldKey, decisiondef.FieldReqDefKey, decisiondef.FieldVersionTag:
			values[i] = new(sql.NullString)
		case decisiondef.FieldCreatedAt, decisiondef.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DecisionDef fields.
func (dd *DecisionDef) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case decisiondef.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dd.ID = int(value.Int64)
		case decisiondef.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dd.CreatedBy = int(value.Int64)
			}
		case decisiondef.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dd.CreatedAt = value.Time
			}
		case decisiondef.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dd.UpdatedBy = int(value.Int64)
			}
		case decisiondef.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dd.UpdatedAt = value.Time
			}
		case decisiondef.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				dd.TenantID = int(value.Int64)
			}
		case decisiondef.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				dd.DeploymentID = int(value.Int64)
			}
		case decisiondef.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				dd.AppID = int(value.Int64)
			}
		case decisiondef.FieldReqDefID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field req_def_id", values[i])
			} else if value.Valid {
				dd.ReqDefID = int(value.Int64)
			}
		case decisiondef.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				dd.Category = value.String
			}
		case decisiondef.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dd.Name = value.String
			}
		case decisiondef.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				dd.Key = value.String
			}
		case decisiondef.FieldReqDefKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field req_def_key", values[i])
			} else if value.Valid {
				dd.ReqDefKey = value.String
			}
		case decisiondef.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				dd.Version = int32(value.Int64)
			}
		case decisiondef.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				dd.Revision = int32(value.Int64)
			}
		case decisiondef.FieldVersionTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_tag", values[i])
			} else if value.Valid {
				dd.VersionTag = value.String
			}
		default:
			dd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DecisionDef.
// This includes values selected through modifiers, order, etc.
func (dd *DecisionDef) Value(name string) (ent.Value, error) {
	return dd.selectValues.Get(name)
}

// QueryReqDef queries the "req_def" edge of the DecisionDef entity.
func (dd *DecisionDef) QueryReqDef() *DecisionReqDefQuery {
	return NewDecisionDefClient(dd.config).QueryReqDef(dd)
}

// Update returns a builder for updating this DecisionDef.
// Note that you need to call DecisionDef.Unwrap() before calling this method if this DecisionDef
// was returned from a transaction, and the transaction was committed or rolled back.
func (dd *DecisionDef) Update() *DecisionDefUpdateOne {
	return NewDecisionDefClient(dd.config).UpdateOne(dd)
}

// Unwrap unwraps the DecisionDef entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dd *DecisionDef) Unwrap() *DecisionDef {
	_tx, ok := dd.config.driver.(*txDriver)
	if !ok {
		panic("ent: DecisionDef is not a transactional entity")
	}
	dd.config.driver = _tx.drv
	return dd
}

// String implements the fmt.Stringer.
func (dd *DecisionDef) String() string {
	var builder strings.Builder
	builder.WriteString("DecisionDef(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dd.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", dd.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", dd.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("deployment_id=")
	builder.WriteString(fmt.Sprintf("%v", dd.DeploymentID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", dd.AppID))
	builder.WriteString(", ")
	builder.WriteString("req_def_id=")
	builder.WriteString(fmt.Sprintf("%v", dd.ReqDefID))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(dd.Category)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dd.Name)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(dd.Key)
	builder.WriteString(", ")
	builder.WriteString("req_def_key=")
	builder.WriteString(dd.ReqDefKey)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", dd.Version))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(fmt.Sprintf("%v", dd.Revision))
	builder.WriteString(", ")
	builder.WriteString("version_tag=")
	builder.WriteString(dd.VersionTag)
	builder.WriteByte(')')
	return builder.String()
}

// DecisionDefs is a parsable slice of DecisionDef.
type DecisionDefs []*DecisionDef
