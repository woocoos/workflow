// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/workflow/ent/orgapp"
)

// OrgApp is the model entity for the OrgApp schema.
type OrgApp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 组织ID
	OrgID int `json:"org_id,omitempty"`
	// 应用ID
	AppID        int `json:"app_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgApp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgapp.FieldID, orgapp.FieldOrgID, orgapp.FieldAppID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgApp fields.
func (oa *OrgApp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = int(value.Int64)
		case orgapp.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				oa.OrgID = int(value.Int64)
			}
		case orgapp.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				oa.AppID = int(value.Int64)
			}
		default:
			oa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrgApp.
// This includes values selected through modifiers, order, etc.
func (oa *OrgApp) Value(name string) (ent.Value, error) {
	return oa.selectValues.Get(name)
}

// Update returns a builder for updating this OrgApp.
// Note that you need to call OrgApp.Unwrap() before calling this method if this OrgApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrgApp) Update() *OrgAppUpdateOne {
	return NewOrgAppClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OrgApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrgApp) Unwrap() *OrgApp {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrgApp is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrgApp) String() string {
	var builder strings.Builder
	builder.WriteString("OrgApp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrgID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.AppID))
	builder.WriteByte(')')
	return builder.String()
}

// OrgApps is a parsable slice of OrgApp.
type OrgApps []*OrgApp
