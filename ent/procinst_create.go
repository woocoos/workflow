// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/procdef"
	"github.com/woocoos/workflow/ent/procinst"
	"github.com/woocoos/workflow/ent/task"
)

// ProcInstCreate is the builder for creating a ProcInst entity.
type ProcInstCreate struct {
	config
	mutation *ProcInstMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (pic *ProcInstCreate) SetCreatedBy(i int) *ProcInstCreate {
	pic.mutation.SetCreatedBy(i)
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *ProcInstCreate) SetCreatedAt(t time.Time) *ProcInstCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableCreatedAt(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedBy sets the "updated_by" field.
func (pic *ProcInstCreate) SetUpdatedBy(i int) *ProcInstCreate {
	pic.mutation.SetUpdatedBy(i)
	return pic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableUpdatedBy(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetUpdatedBy(*i)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *ProcInstCreate) SetUpdatedAt(t time.Time) *ProcInstCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableUpdatedAt(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetProcDefID sets the "proc_def_id" field.
func (pic *ProcInstCreate) SetProcDefID(i int) *ProcInstCreate {
	pic.mutation.SetProcDefID(i)
	return pic
}

// SetOrgID sets the "org_id" field.
func (pic *ProcInstCreate) SetOrgID(i int) *ProcInstCreate {
	pic.mutation.SetOrgID(i)
	return pic
}

// SetAppID sets the "app_id" field.
func (pic *ProcInstCreate) SetAppID(i int) *ProcInstCreate {
	pic.mutation.SetAppID(i)
	return pic
}

// SetBusinessKey sets the "business_key" field.
func (pic *ProcInstCreate) SetBusinessKey(s string) *ProcInstCreate {
	pic.mutation.SetBusinessKey(s)
	return pic
}

// SetStartTime sets the "start_time" field.
func (pic *ProcInstCreate) SetStartTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetStartTime(t)
	return pic
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableStartTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetStartTime(*t)
	}
	return pic
}

// SetEndTime sets the "end_time" field.
func (pic *ProcInstCreate) SetEndTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetEndTime(t)
	return pic
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableEndTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetEndTime(*t)
	}
	return pic
}

// SetDuration sets the "duration" field.
func (pic *ProcInstCreate) SetDuration(i int) *ProcInstCreate {
	pic.mutation.SetDuration(i)
	return pic
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDuration(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetDuration(*i)
	}
	return pic
}

// SetStartUserID sets the "start_user_id" field.
func (pic *ProcInstCreate) SetStartUserID(i int) *ProcInstCreate {
	pic.mutation.SetStartUserID(i)
	return pic
}

// SetSupperInstanceID sets the "supper_instance_id" field.
func (pic *ProcInstCreate) SetSupperInstanceID(i int) *ProcInstCreate {
	pic.mutation.SetSupperInstanceID(i)
	return pic
}

// SetNillableSupperInstanceID sets the "supper_instance_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableSupperInstanceID(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetSupperInstanceID(*i)
	}
	return pic
}

// SetRootInstanceID sets the "root_instance_id" field.
func (pic *ProcInstCreate) SetRootInstanceID(i int) *ProcInstCreate {
	pic.mutation.SetRootInstanceID(i)
	return pic
}

// SetNillableRootInstanceID sets the "root_instance_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableRootInstanceID(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetRootInstanceID(*i)
	}
	return pic
}

// SetDeletedTime sets the "deleted_time" field.
func (pic *ProcInstCreate) SetDeletedTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetDeletedTime(t)
	return pic
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDeletedTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetDeletedTime(*t)
	}
	return pic
}

// SetDeletedReason sets the "deleted_reason" field.
func (pic *ProcInstCreate) SetDeletedReason(s string) *ProcInstCreate {
	pic.mutation.SetDeletedReason(s)
	return pic
}

// SetNillableDeletedReason sets the "deleted_reason" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDeletedReason(s *string) *ProcInstCreate {
	if s != nil {
		pic.SetDeletedReason(*s)
	}
	return pic
}

// SetStatus sets the "status" field.
func (pic *ProcInstCreate) SetStatus(pr procinst.Status) *ProcInstCreate {
	pic.mutation.SetStatus(pr)
	return pic
}

// SetID sets the "id" field.
func (pic *ProcInstCreate) SetID(i int) *ProcInstCreate {
	pic.mutation.SetID(i)
	return pic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableID(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetID(*i)
	}
	return pic
}

// SetProcDef sets the "proc_def" edge to the ProcDef entity.
func (pic *ProcInstCreate) SetProcDef(p *ProcDef) *ProcInstCreate {
	return pic.SetProcDefID(p.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pic *ProcInstCreate) AddTaskIDs(ids ...int) *ProcInstCreate {
	pic.mutation.AddTaskIDs(ids...)
	return pic
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pic *ProcInstCreate) AddTasks(t ...*Task) *ProcInstCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pic.AddTaskIDs(ids...)
}

// Mutation returns the ProcInstMutation object of the builder.
func (pic *ProcInstCreate) Mutation() *ProcInstMutation {
	return pic.mutation
}

// Save creates the ProcInst in the database.
func (pic *ProcInstCreate) Save(ctx context.Context) (*ProcInst, error) {
	if err := pic.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*ProcInst, ProcInstMutation](ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProcInstCreate) SaveX(ctx context.Context) *ProcInst {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProcInstCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProcInstCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProcInstCreate) defaults() error {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		if procinst.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized procinst.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := procinst.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.StartTime(); !ok {
		if procinst.DefaultStartTime == nil {
			return fmt.Errorf("ent: uninitialized procinst.DefaultStartTime (forgotten import ent/runtime?)")
		}
		v := procinst.DefaultStartTime()
		pic.mutation.SetStartTime(v)
	}
	if _, ok := pic.mutation.ID(); !ok {
		if procinst.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized procinst.DefaultID (forgotten import ent/runtime?)")
		}
		v := procinst.DefaultID()
		pic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProcInstCreate) check() error {
	if _, ok := pic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ProcInst.created_by"`)}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcInst.created_at"`)}
	}
	if _, ok := pic.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def_id", err: errors.New(`ent: missing required field "ProcInst.proc_def_id"`)}
	}
	if _, ok := pic.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "ProcInst.org_id"`)}
	}
	if _, ok := pic.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "ProcInst.app_id"`)}
	}
	if _, ok := pic.mutation.BusinessKey(); !ok {
		return &ValidationError{Name: "business_key", err: errors.New(`ent: missing required field "ProcInst.business_key"`)}
	}
	if _, ok := pic.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "ProcInst.start_time"`)}
	}
	if _, ok := pic.mutation.StartUserID(); !ok {
		return &ValidationError{Name: "start_user_id", err: errors.New(`ent: missing required field "ProcInst.start_user_id"`)}
	}
	if _, ok := pic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcInst.status"`)}
	}
	if v, ok := pic.mutation.Status(); ok {
		if err := procinst.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProcInst.status": %w`, err)}
		}
	}
	if _, ok := pic.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def", err: errors.New(`ent: missing required edge "ProcInst.proc_def"`)}
	}
	return nil
}

func (pic *ProcInstCreate) sqlSave(ctx context.Context) (*ProcInst, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProcInstCreate) createSpec() (*ProcInst, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcInst{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(procinst.Table, sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.CreatedBy(); ok {
		_spec.SetField(procinst.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(procinst.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedBy(); ok {
		_spec.SetField(procinst.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(procinst.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pic.mutation.OrgID(); ok {
		_spec.SetField(procinst.FieldOrgID, field.TypeInt, value)
		_node.OrgID = value
	}
	if value, ok := pic.mutation.AppID(); ok {
		_spec.SetField(procinst.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := pic.mutation.BusinessKey(); ok {
		_spec.SetField(procinst.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := pic.mutation.StartTime(); ok {
		_spec.SetField(procinst.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := pic.mutation.EndTime(); ok {
		_spec.SetField(procinst.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := pic.mutation.Duration(); ok {
		_spec.SetField(procinst.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := pic.mutation.StartUserID(); ok {
		_spec.SetField(procinst.FieldStartUserID, field.TypeInt, value)
		_node.StartUserID = value
	}
	if value, ok := pic.mutation.SupperInstanceID(); ok {
		_spec.SetField(procinst.FieldSupperInstanceID, field.TypeInt, value)
		_node.SupperInstanceID = value
	}
	if value, ok := pic.mutation.RootInstanceID(); ok {
		_spec.SetField(procinst.FieldRootInstanceID, field.TypeInt, value)
		_node.RootInstanceID = value
	}
	if value, ok := pic.mutation.DeletedTime(); ok {
		_spec.SetField(procinst.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = value
	}
	if value, ok := pic.mutation.DeletedReason(); ok {
		_spec.SetField(procinst.FieldDeletedReason, field.TypeString, value)
		_node.DeletedReason = value
	}
	if value, ok := pic.mutation.Status(); ok {
		_spec.SetField(procinst.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := pic.mutation.ProcDefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procinst.ProcDefTable,
			Columns: []string{procinst.ProcDefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProcDefID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procinst.TasksTable,
			Columns: []string{procinst.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProcInstCreateBulk is the builder for creating many ProcInst entities in bulk.
type ProcInstCreateBulk struct {
	config
	builders []*ProcInstCreate
}

// Save creates the ProcInst entities in the database.
func (picb *ProcInstCreateBulk) Save(ctx context.Context) ([]*ProcInst, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProcInst, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcInstMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProcInstCreateBulk) SaveX(ctx context.Context) []*ProcInst {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProcInstCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProcInstCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
