// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/procdef"
	"github.com/woocoos/workflow/ent/procinst"
	"github.com/woocoos/workflow/ent/task"
)

// ProcInstCreate is the builder for creating a ProcInst entity.
type ProcInstCreate struct {
	config
	mutation *ProcInstMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (pic *ProcInstCreate) SetCreatedBy(i int) *ProcInstCreate {
	pic.mutation.SetCreatedBy(i)
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *ProcInstCreate) SetCreatedAt(t time.Time) *ProcInstCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableCreatedAt(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedBy sets the "updated_by" field.
func (pic *ProcInstCreate) SetUpdatedBy(i int) *ProcInstCreate {
	pic.mutation.SetUpdatedBy(i)
	return pic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableUpdatedBy(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetUpdatedBy(*i)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *ProcInstCreate) SetUpdatedAt(t time.Time) *ProcInstCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableUpdatedAt(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetTenantID sets the "tenant_id" field.
func (pic *ProcInstCreate) SetTenantID(i int) *ProcInstCreate {
	pic.mutation.SetTenantID(i)
	return pic
}

// SetProcDefID sets the "proc_def_id" field.
func (pic *ProcInstCreate) SetProcDefID(i int) *ProcInstCreate {
	pic.mutation.SetProcDefID(i)
	return pic
}

// SetAppID sets the "app_id" field.
func (pic *ProcInstCreate) SetAppID(i int) *ProcInstCreate {
	pic.mutation.SetAppID(i)
	return pic
}

// SetBusinessKey sets the "business_key" field.
func (pic *ProcInstCreate) SetBusinessKey(s string) *ProcInstCreate {
	pic.mutation.SetBusinessKey(s)
	return pic
}

// SetStartTime sets the "start_time" field.
func (pic *ProcInstCreate) SetStartTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetStartTime(t)
	return pic
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableStartTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetStartTime(*t)
	}
	return pic
}

// SetEndTime sets the "end_time" field.
func (pic *ProcInstCreate) SetEndTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetEndTime(t)
	return pic
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableEndTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetEndTime(*t)
	}
	return pic
}

// SetDuration sets the "duration" field.
func (pic *ProcInstCreate) SetDuration(i int) *ProcInstCreate {
	pic.mutation.SetDuration(i)
	return pic
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDuration(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetDuration(*i)
	}
	return pic
}

// SetStartUserID sets the "start_user_id" field.
func (pic *ProcInstCreate) SetStartUserID(i int) *ProcInstCreate {
	pic.mutation.SetStartUserID(i)
	return pic
}

// SetSupperInstanceID sets the "supper_instance_id" field.
func (pic *ProcInstCreate) SetSupperInstanceID(i int) *ProcInstCreate {
	pic.mutation.SetSupperInstanceID(i)
	return pic
}

// SetNillableSupperInstanceID sets the "supper_instance_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableSupperInstanceID(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetSupperInstanceID(*i)
	}
	return pic
}

// SetRootInstanceID sets the "root_instance_id" field.
func (pic *ProcInstCreate) SetRootInstanceID(i int) *ProcInstCreate {
	pic.mutation.SetRootInstanceID(i)
	return pic
}

// SetNillableRootInstanceID sets the "root_instance_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableRootInstanceID(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetRootInstanceID(*i)
	}
	return pic
}

// SetDeletedTime sets the "deleted_time" field.
func (pic *ProcInstCreate) SetDeletedTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetDeletedTime(t)
	return pic
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDeletedTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetDeletedTime(*t)
	}
	return pic
}

// SetDeletedReason sets the "deleted_reason" field.
func (pic *ProcInstCreate) SetDeletedReason(s string) *ProcInstCreate {
	pic.mutation.SetDeletedReason(s)
	return pic
}

// SetNillableDeletedReason sets the "deleted_reason" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDeletedReason(s *string) *ProcInstCreate {
	if s != nil {
		pic.SetDeletedReason(*s)
	}
	return pic
}

// SetStatus sets the "status" field.
func (pic *ProcInstCreate) SetStatus(pr procinst.Status) *ProcInstCreate {
	pic.mutation.SetStatus(pr)
	return pic
}

// SetID sets the "id" field.
func (pic *ProcInstCreate) SetID(i int) *ProcInstCreate {
	pic.mutation.SetID(i)
	return pic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableID(i *int) *ProcInstCreate {
	if i != nil {
		pic.SetID(*i)
	}
	return pic
}

// SetProcDef sets the "proc_def" edge to the ProcDef entity.
func (pic *ProcInstCreate) SetProcDef(p *ProcDef) *ProcInstCreate {
	return pic.SetProcDefID(p.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pic *ProcInstCreate) AddTaskIDs(ids ...int) *ProcInstCreate {
	pic.mutation.AddTaskIDs(ids...)
	return pic
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pic *ProcInstCreate) AddTasks(t ...*Task) *ProcInstCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pic.AddTaskIDs(ids...)
}

// Mutation returns the ProcInstMutation object of the builder.
func (pic *ProcInstCreate) Mutation() *ProcInstMutation {
	return pic.mutation
}

// Save creates the ProcInst in the database.
func (pic *ProcInstCreate) Save(ctx context.Context) (*ProcInst, error) {
	if err := pic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProcInstCreate) SaveX(ctx context.Context) *ProcInst {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProcInstCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProcInstCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProcInstCreate) defaults() error {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		if procinst.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized procinst.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := procinst.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.StartTime(); !ok {
		if procinst.DefaultStartTime == nil {
			return fmt.Errorf("ent: uninitialized procinst.DefaultStartTime (forgotten import ent/runtime?)")
		}
		v := procinst.DefaultStartTime()
		pic.mutation.SetStartTime(v)
	}
	if _, ok := pic.mutation.ID(); !ok {
		if procinst.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized procinst.DefaultID (forgotten import ent/runtime?)")
		}
		v := procinst.DefaultID()
		pic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProcInstCreate) check() error {
	if _, ok := pic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ProcInst.created_by"`)}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcInst.created_at"`)}
	}
	if _, ok := pic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcInst.tenant_id"`)}
	}
	if _, ok := pic.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def_id", err: errors.New(`ent: missing required field "ProcInst.proc_def_id"`)}
	}
	if _, ok := pic.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "ProcInst.app_id"`)}
	}
	if _, ok := pic.mutation.BusinessKey(); !ok {
		return &ValidationError{Name: "business_key", err: errors.New(`ent: missing required field "ProcInst.business_key"`)}
	}
	if _, ok := pic.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "ProcInst.start_time"`)}
	}
	if _, ok := pic.mutation.StartUserID(); !ok {
		return &ValidationError{Name: "start_user_id", err: errors.New(`ent: missing required field "ProcInst.start_user_id"`)}
	}
	if _, ok := pic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcInst.status"`)}
	}
	if v, ok := pic.mutation.Status(); ok {
		if err := procinst.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProcInst.status": %w`, err)}
		}
	}
	if _, ok := pic.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def", err: errors.New(`ent: missing required edge "ProcInst.proc_def"`)}
	}
	return nil
}

func (pic *ProcInstCreate) sqlSave(ctx context.Context) (*ProcInst, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProcInstCreate) createSpec() (*ProcInst, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcInst{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(procinst.Table, sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt))
	)
	_spec.Schema = pic.schemaConfig.ProcInst
	_spec.OnConflict = pic.conflict
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.CreatedBy(); ok {
		_spec.SetField(procinst.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(procinst.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedBy(); ok {
		_spec.SetField(procinst.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(procinst.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pic.mutation.TenantID(); ok {
		_spec.SetField(procinst.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := pic.mutation.AppID(); ok {
		_spec.SetField(procinst.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := pic.mutation.BusinessKey(); ok {
		_spec.SetField(procinst.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := pic.mutation.StartTime(); ok {
		_spec.SetField(procinst.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := pic.mutation.EndTime(); ok {
		_spec.SetField(procinst.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := pic.mutation.Duration(); ok {
		_spec.SetField(procinst.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := pic.mutation.StartUserID(); ok {
		_spec.SetField(procinst.FieldStartUserID, field.TypeInt, value)
		_node.StartUserID = value
	}
	if value, ok := pic.mutation.SupperInstanceID(); ok {
		_spec.SetField(procinst.FieldSupperInstanceID, field.TypeInt, value)
		_node.SupperInstanceID = value
	}
	if value, ok := pic.mutation.RootInstanceID(); ok {
		_spec.SetField(procinst.FieldRootInstanceID, field.TypeInt, value)
		_node.RootInstanceID = value
	}
	if value, ok := pic.mutation.DeletedTime(); ok {
		_spec.SetField(procinst.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = value
	}
	if value, ok := pic.mutation.DeletedReason(); ok {
		_spec.SetField(procinst.FieldDeletedReason, field.TypeString, value)
		_node.DeletedReason = value
	}
	if value, ok := pic.mutation.Status(); ok {
		_spec.SetField(procinst.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := pic.mutation.ProcDefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procinst.ProcDefTable,
			Columns: []string{procinst.ProcDefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procdef.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pic.schemaConfig.ProcInst
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProcDefID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procinst.TasksTable,
			Columns: []string{procinst.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		edge.Schema = pic.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProcInst.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcInstUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (pic *ProcInstCreate) OnConflict(opts ...sql.ConflictOption) *ProcInstUpsertOne {
	pic.conflict = opts
	return &ProcInstUpsertOne{
		create: pic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProcInst.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pic *ProcInstCreate) OnConflictColumns(columns ...string) *ProcInstUpsertOne {
	pic.conflict = append(pic.conflict, sql.ConflictColumns(columns...))
	return &ProcInstUpsertOne{
		create: pic,
	}
}

type (
	// ProcInstUpsertOne is the builder for "upsert"-ing
	//  one ProcInst node.
	ProcInstUpsertOne struct {
		create *ProcInstCreate
	}

	// ProcInstUpsert is the "OnConflict" setter.
	ProcInstUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *ProcInstUpsert) SetUpdatedBy(v int) *ProcInstUpsert {
	u.Set(procinst.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateUpdatedBy() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ProcInstUpsert) AddUpdatedBy(v int) *ProcInstUpsert {
	u.Add(procinst.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ProcInstUpsert) ClearUpdatedBy() *ProcInstUpsert {
	u.SetNull(procinst.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProcInstUpsert) SetUpdatedAt(v time.Time) *ProcInstUpsert {
	u.Set(procinst.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateUpdatedAt() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ProcInstUpsert) ClearUpdatedAt() *ProcInstUpsert {
	u.SetNull(procinst.FieldUpdatedAt)
	return u
}

// SetProcDefID sets the "proc_def_id" field.
func (u *ProcInstUpsert) SetProcDefID(v int) *ProcInstUpsert {
	u.Set(procinst.FieldProcDefID, v)
	return u
}

// UpdateProcDefID sets the "proc_def_id" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateProcDefID() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldProcDefID)
	return u
}

// SetBusinessKey sets the "business_key" field.
func (u *ProcInstUpsert) SetBusinessKey(v string) *ProcInstUpsert {
	u.Set(procinst.FieldBusinessKey, v)
	return u
}

// UpdateBusinessKey sets the "business_key" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateBusinessKey() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldBusinessKey)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *ProcInstUpsert) SetStartTime(v time.Time) *ProcInstUpsert {
	u.Set(procinst.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateStartTime() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *ProcInstUpsert) SetEndTime(v time.Time) *ProcInstUpsert {
	u.Set(procinst.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateEndTime() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldEndTime)
	return u
}

// ClearEndTime clears the value of the "end_time" field.
func (u *ProcInstUpsert) ClearEndTime() *ProcInstUpsert {
	u.SetNull(procinst.FieldEndTime)
	return u
}

// SetDuration sets the "duration" field.
func (u *ProcInstUpsert) SetDuration(v int) *ProcInstUpsert {
	u.Set(procinst.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateDuration() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *ProcInstUpsert) AddDuration(v int) *ProcInstUpsert {
	u.Add(procinst.FieldDuration, v)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *ProcInstUpsert) ClearDuration() *ProcInstUpsert {
	u.SetNull(procinst.FieldDuration)
	return u
}

// SetStartUserID sets the "start_user_id" field.
func (u *ProcInstUpsert) SetStartUserID(v int) *ProcInstUpsert {
	u.Set(procinst.FieldStartUserID, v)
	return u
}

// UpdateStartUserID sets the "start_user_id" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateStartUserID() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldStartUserID)
	return u
}

// AddStartUserID adds v to the "start_user_id" field.
func (u *ProcInstUpsert) AddStartUserID(v int) *ProcInstUpsert {
	u.Add(procinst.FieldStartUserID, v)
	return u
}

// SetSupperInstanceID sets the "supper_instance_id" field.
func (u *ProcInstUpsert) SetSupperInstanceID(v int) *ProcInstUpsert {
	u.Set(procinst.FieldSupperInstanceID, v)
	return u
}

// UpdateSupperInstanceID sets the "supper_instance_id" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateSupperInstanceID() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldSupperInstanceID)
	return u
}

// AddSupperInstanceID adds v to the "supper_instance_id" field.
func (u *ProcInstUpsert) AddSupperInstanceID(v int) *ProcInstUpsert {
	u.Add(procinst.FieldSupperInstanceID, v)
	return u
}

// ClearSupperInstanceID clears the value of the "supper_instance_id" field.
func (u *ProcInstUpsert) ClearSupperInstanceID() *ProcInstUpsert {
	u.SetNull(procinst.FieldSupperInstanceID)
	return u
}

// SetRootInstanceID sets the "root_instance_id" field.
func (u *ProcInstUpsert) SetRootInstanceID(v int) *ProcInstUpsert {
	u.Set(procinst.FieldRootInstanceID, v)
	return u
}

// UpdateRootInstanceID sets the "root_instance_id" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateRootInstanceID() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldRootInstanceID)
	return u
}

// AddRootInstanceID adds v to the "root_instance_id" field.
func (u *ProcInstUpsert) AddRootInstanceID(v int) *ProcInstUpsert {
	u.Add(procinst.FieldRootInstanceID, v)
	return u
}

// ClearRootInstanceID clears the value of the "root_instance_id" field.
func (u *ProcInstUpsert) ClearRootInstanceID() *ProcInstUpsert {
	u.SetNull(procinst.FieldRootInstanceID)
	return u
}

// SetDeletedTime sets the "deleted_time" field.
func (u *ProcInstUpsert) SetDeletedTime(v time.Time) *ProcInstUpsert {
	u.Set(procinst.FieldDeletedTime, v)
	return u
}

// UpdateDeletedTime sets the "deleted_time" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateDeletedTime() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldDeletedTime)
	return u
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (u *ProcInstUpsert) ClearDeletedTime() *ProcInstUpsert {
	u.SetNull(procinst.FieldDeletedTime)
	return u
}

// SetDeletedReason sets the "deleted_reason" field.
func (u *ProcInstUpsert) SetDeletedReason(v string) *ProcInstUpsert {
	u.Set(procinst.FieldDeletedReason, v)
	return u
}

// UpdateDeletedReason sets the "deleted_reason" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateDeletedReason() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldDeletedReason)
	return u
}

// ClearDeletedReason clears the value of the "deleted_reason" field.
func (u *ProcInstUpsert) ClearDeletedReason() *ProcInstUpsert {
	u.SetNull(procinst.FieldDeletedReason)
	return u
}

// SetStatus sets the "status" field.
func (u *ProcInstUpsert) SetStatus(v procinst.Status) *ProcInstUpsert {
	u.Set(procinst.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProcInstUpsert) UpdateStatus() *ProcInstUpsert {
	u.SetExcluded(procinst.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProcInst.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(procinst.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProcInstUpsertOne) UpdateNewValues() *ProcInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(procinst.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(procinst.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(procinst.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(procinst.FieldTenantID)
		}
		if _, exists := u.create.mutation.AppID(); exists {
			s.SetIgnore(procinst.FieldAppID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProcInst.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProcInstUpsertOne) Ignore() *ProcInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcInstUpsertOne) DoNothing() *ProcInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcInstCreate.OnConflict
// documentation for more info.
func (u *ProcInstUpsertOne) Update(set func(*ProcInstUpsert)) *ProcInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcInstUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ProcInstUpsertOne) SetUpdatedBy(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ProcInstUpsertOne) AddUpdatedBy(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateUpdatedBy() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ProcInstUpsertOne) ClearUpdatedBy() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProcInstUpsertOne) SetUpdatedAt(v time.Time) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateUpdatedAt() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ProcInstUpsertOne) ClearUpdatedAt() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetProcDefID sets the "proc_def_id" field.
func (u *ProcInstUpsertOne) SetProcDefID(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetProcDefID(v)
	})
}

// UpdateProcDefID sets the "proc_def_id" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateProcDefID() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateProcDefID()
	})
}

// SetBusinessKey sets the "business_key" field.
func (u *ProcInstUpsertOne) SetBusinessKey(v string) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetBusinessKey(v)
	})
}

// UpdateBusinessKey sets the "business_key" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateBusinessKey() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateBusinessKey()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ProcInstUpsertOne) SetStartTime(v time.Time) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateStartTime() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ProcInstUpsertOne) SetEndTime(v time.Time) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateEndTime() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *ProcInstUpsertOne) ClearEndTime() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearEndTime()
	})
}

// SetDuration sets the "duration" field.
func (u *ProcInstUpsertOne) SetDuration(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ProcInstUpsertOne) AddDuration(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateDuration() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ProcInstUpsertOne) ClearDuration() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearDuration()
	})
}

// SetStartUserID sets the "start_user_id" field.
func (u *ProcInstUpsertOne) SetStartUserID(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetStartUserID(v)
	})
}

// AddStartUserID adds v to the "start_user_id" field.
func (u *ProcInstUpsertOne) AddStartUserID(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddStartUserID(v)
	})
}

// UpdateStartUserID sets the "start_user_id" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateStartUserID() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateStartUserID()
	})
}

// SetSupperInstanceID sets the "supper_instance_id" field.
func (u *ProcInstUpsertOne) SetSupperInstanceID(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetSupperInstanceID(v)
	})
}

// AddSupperInstanceID adds v to the "supper_instance_id" field.
func (u *ProcInstUpsertOne) AddSupperInstanceID(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddSupperInstanceID(v)
	})
}

// UpdateSupperInstanceID sets the "supper_instance_id" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateSupperInstanceID() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateSupperInstanceID()
	})
}

// ClearSupperInstanceID clears the value of the "supper_instance_id" field.
func (u *ProcInstUpsertOne) ClearSupperInstanceID() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearSupperInstanceID()
	})
}

// SetRootInstanceID sets the "root_instance_id" field.
func (u *ProcInstUpsertOne) SetRootInstanceID(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetRootInstanceID(v)
	})
}

// AddRootInstanceID adds v to the "root_instance_id" field.
func (u *ProcInstUpsertOne) AddRootInstanceID(v int) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddRootInstanceID(v)
	})
}

// UpdateRootInstanceID sets the "root_instance_id" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateRootInstanceID() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateRootInstanceID()
	})
}

// ClearRootInstanceID clears the value of the "root_instance_id" field.
func (u *ProcInstUpsertOne) ClearRootInstanceID() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearRootInstanceID()
	})
}

// SetDeletedTime sets the "deleted_time" field.
func (u *ProcInstUpsertOne) SetDeletedTime(v time.Time) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetDeletedTime(v)
	})
}

// UpdateDeletedTime sets the "deleted_time" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateDeletedTime() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateDeletedTime()
	})
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (u *ProcInstUpsertOne) ClearDeletedTime() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearDeletedTime()
	})
}

// SetDeletedReason sets the "deleted_reason" field.
func (u *ProcInstUpsertOne) SetDeletedReason(v string) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetDeletedReason(v)
	})
}

// UpdateDeletedReason sets the "deleted_reason" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateDeletedReason() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateDeletedReason()
	})
}

// ClearDeletedReason clears the value of the "deleted_reason" field.
func (u *ProcInstUpsertOne) ClearDeletedReason() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearDeletedReason()
	})
}

// SetStatus sets the "status" field.
func (u *ProcInstUpsertOne) SetStatus(v procinst.Status) *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProcInstUpsertOne) UpdateStatus() *ProcInstUpsertOne {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ProcInstUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcInstCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcInstUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProcInstUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProcInstUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProcInstCreateBulk is the builder for creating many ProcInst entities in bulk.
type ProcInstCreateBulk struct {
	config
	builders []*ProcInstCreate
	conflict []sql.ConflictOption
}

// Save creates the ProcInst entities in the database.
func (picb *ProcInstCreateBulk) Save(ctx context.Context) ([]*ProcInst, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProcInst, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcInstMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = picb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProcInstCreateBulk) SaveX(ctx context.Context) []*ProcInst {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProcInstCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProcInstCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProcInst.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcInstUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (picb *ProcInstCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProcInstUpsertBulk {
	picb.conflict = opts
	return &ProcInstUpsertBulk{
		create: picb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProcInst.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (picb *ProcInstCreateBulk) OnConflictColumns(columns ...string) *ProcInstUpsertBulk {
	picb.conflict = append(picb.conflict, sql.ConflictColumns(columns...))
	return &ProcInstUpsertBulk{
		create: picb,
	}
}

// ProcInstUpsertBulk is the builder for "upsert"-ing
// a bulk of ProcInst nodes.
type ProcInstUpsertBulk struct {
	create *ProcInstCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProcInst.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(procinst.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProcInstUpsertBulk) UpdateNewValues() *ProcInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(procinst.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(procinst.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(procinst.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(procinst.FieldTenantID)
			}
			if _, exists := b.mutation.AppID(); exists {
				s.SetIgnore(procinst.FieldAppID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProcInst.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProcInstUpsertBulk) Ignore() *ProcInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcInstUpsertBulk) DoNothing() *ProcInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcInstCreateBulk.OnConflict
// documentation for more info.
func (u *ProcInstUpsertBulk) Update(set func(*ProcInstUpsert)) *ProcInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcInstUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ProcInstUpsertBulk) SetUpdatedBy(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ProcInstUpsertBulk) AddUpdatedBy(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateUpdatedBy() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ProcInstUpsertBulk) ClearUpdatedBy() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProcInstUpsertBulk) SetUpdatedAt(v time.Time) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateUpdatedAt() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ProcInstUpsertBulk) ClearUpdatedAt() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetProcDefID sets the "proc_def_id" field.
func (u *ProcInstUpsertBulk) SetProcDefID(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetProcDefID(v)
	})
}

// UpdateProcDefID sets the "proc_def_id" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateProcDefID() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateProcDefID()
	})
}

// SetBusinessKey sets the "business_key" field.
func (u *ProcInstUpsertBulk) SetBusinessKey(v string) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetBusinessKey(v)
	})
}

// UpdateBusinessKey sets the "business_key" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateBusinessKey() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateBusinessKey()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ProcInstUpsertBulk) SetStartTime(v time.Time) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateStartTime() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ProcInstUpsertBulk) SetEndTime(v time.Time) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateEndTime() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *ProcInstUpsertBulk) ClearEndTime() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearEndTime()
	})
}

// SetDuration sets the "duration" field.
func (u *ProcInstUpsertBulk) SetDuration(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ProcInstUpsertBulk) AddDuration(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateDuration() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ProcInstUpsertBulk) ClearDuration() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearDuration()
	})
}

// SetStartUserID sets the "start_user_id" field.
func (u *ProcInstUpsertBulk) SetStartUserID(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetStartUserID(v)
	})
}

// AddStartUserID adds v to the "start_user_id" field.
func (u *ProcInstUpsertBulk) AddStartUserID(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddStartUserID(v)
	})
}

// UpdateStartUserID sets the "start_user_id" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateStartUserID() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateStartUserID()
	})
}

// SetSupperInstanceID sets the "supper_instance_id" field.
func (u *ProcInstUpsertBulk) SetSupperInstanceID(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetSupperInstanceID(v)
	})
}

// AddSupperInstanceID adds v to the "supper_instance_id" field.
func (u *ProcInstUpsertBulk) AddSupperInstanceID(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddSupperInstanceID(v)
	})
}

// UpdateSupperInstanceID sets the "supper_instance_id" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateSupperInstanceID() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateSupperInstanceID()
	})
}

// ClearSupperInstanceID clears the value of the "supper_instance_id" field.
func (u *ProcInstUpsertBulk) ClearSupperInstanceID() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearSupperInstanceID()
	})
}

// SetRootInstanceID sets the "root_instance_id" field.
func (u *ProcInstUpsertBulk) SetRootInstanceID(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetRootInstanceID(v)
	})
}

// AddRootInstanceID adds v to the "root_instance_id" field.
func (u *ProcInstUpsertBulk) AddRootInstanceID(v int) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.AddRootInstanceID(v)
	})
}

// UpdateRootInstanceID sets the "root_instance_id" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateRootInstanceID() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateRootInstanceID()
	})
}

// ClearRootInstanceID clears the value of the "root_instance_id" field.
func (u *ProcInstUpsertBulk) ClearRootInstanceID() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearRootInstanceID()
	})
}

// SetDeletedTime sets the "deleted_time" field.
func (u *ProcInstUpsertBulk) SetDeletedTime(v time.Time) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetDeletedTime(v)
	})
}

// UpdateDeletedTime sets the "deleted_time" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateDeletedTime() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateDeletedTime()
	})
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (u *ProcInstUpsertBulk) ClearDeletedTime() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearDeletedTime()
	})
}

// SetDeletedReason sets the "deleted_reason" field.
func (u *ProcInstUpsertBulk) SetDeletedReason(v string) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetDeletedReason(v)
	})
}

// UpdateDeletedReason sets the "deleted_reason" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateDeletedReason() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateDeletedReason()
	})
}

// ClearDeletedReason clears the value of the "deleted_reason" field.
func (u *ProcInstUpsertBulk) ClearDeletedReason() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.ClearDeletedReason()
	})
}

// SetStatus sets the "status" field.
func (u *ProcInstUpsertBulk) SetStatus(v procinst.Status) *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProcInstUpsertBulk) UpdateStatus() *ProcInstUpsertBulk {
	return u.Update(func(s *ProcInstUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ProcInstUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProcInstCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcInstCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcInstUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
