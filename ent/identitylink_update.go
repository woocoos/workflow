// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/identitylink"
	"github.com/woocoos/workflow/ent/predicate"
	"github.com/woocoos/workflow/ent/task"

	"github.com/woocoos/workflow/ent/internal"
)

// IdentityLinkUpdate is the builder for updating IdentityLink entities.
type IdentityLinkUpdate struct {
	config
	hooks    []Hook
	mutation *IdentityLinkMutation
}

// Where appends a list predicates to the IdentityLinkUpdate builder.
func (ilu *IdentityLinkUpdate) Where(ps ...predicate.IdentityLink) *IdentityLinkUpdate {
	ilu.mutation.Where(ps...)
	return ilu
}

// SetTaskID sets the "task_id" field.
func (ilu *IdentityLinkUpdate) SetTaskID(i int) *IdentityLinkUpdate {
	ilu.mutation.SetTaskID(i)
	return ilu
}

// SetGroupID sets the "group_id" field.
func (ilu *IdentityLinkUpdate) SetGroupID(i int) *IdentityLinkUpdate {
	ilu.mutation.ResetGroupID()
	ilu.mutation.SetGroupID(i)
	return ilu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableGroupID(i *int) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetGroupID(*i)
	}
	return ilu
}

// AddGroupID adds i to the "group_id" field.
func (ilu *IdentityLinkUpdate) AddGroupID(i int) *IdentityLinkUpdate {
	ilu.mutation.AddGroupID(i)
	return ilu
}

// ClearGroupID clears the value of the "group_id" field.
func (ilu *IdentityLinkUpdate) ClearGroupID() *IdentityLinkUpdate {
	ilu.mutation.ClearGroupID()
	return ilu
}

// SetUserID sets the "user_id" field.
func (ilu *IdentityLinkUpdate) SetUserID(i int) *IdentityLinkUpdate {
	ilu.mutation.ResetUserID()
	ilu.mutation.SetUserID(i)
	return ilu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableUserID(i *int) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetUserID(*i)
	}
	return ilu
}

// AddUserID adds i to the "user_id" field.
func (ilu *IdentityLinkUpdate) AddUserID(i int) *IdentityLinkUpdate {
	ilu.mutation.AddUserID(i)
	return ilu
}

// ClearUserID clears the value of the "user_id" field.
func (ilu *IdentityLinkUpdate) ClearUserID() *IdentityLinkUpdate {
	ilu.mutation.ClearUserID()
	return ilu
}

// SetAssignerID sets the "assigner_id" field.
func (ilu *IdentityLinkUpdate) SetAssignerID(i int) *IdentityLinkUpdate {
	ilu.mutation.ResetAssignerID()
	ilu.mutation.SetAssignerID(i)
	return ilu
}

// SetNillableAssignerID sets the "assigner_id" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableAssignerID(i *int) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetAssignerID(*i)
	}
	return ilu
}

// AddAssignerID adds i to the "assigner_id" field.
func (ilu *IdentityLinkUpdate) AddAssignerID(i int) *IdentityLinkUpdate {
	ilu.mutation.AddAssignerID(i)
	return ilu
}

// ClearAssignerID clears the value of the "assigner_id" field.
func (ilu *IdentityLinkUpdate) ClearAssignerID() *IdentityLinkUpdate {
	ilu.mutation.ClearAssignerID()
	return ilu
}

// SetLinkType sets the "link_type" field.
func (ilu *IdentityLinkUpdate) SetLinkType(it identitylink.LinkType) *IdentityLinkUpdate {
	ilu.mutation.SetLinkType(it)
	return ilu
}

// SetOperationType sets the "operation_type" field.
func (ilu *IdentityLinkUpdate) SetOperationType(it identitylink.OperationType) *IdentityLinkUpdate {
	ilu.mutation.SetOperationType(it)
	return ilu
}

// SetComments sets the "comments" field.
func (ilu *IdentityLinkUpdate) SetComments(s string) *IdentityLinkUpdate {
	ilu.mutation.SetComments(s)
	return ilu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableComments(s *string) *IdentityLinkUpdate {
	if s != nil {
		ilu.SetComments(*s)
	}
	return ilu
}

// ClearComments clears the value of the "comments" field.
func (ilu *IdentityLinkUpdate) ClearComments() *IdentityLinkUpdate {
	ilu.mutation.ClearComments()
	return ilu
}

// SetTask sets the "task" edge to the Task entity.
func (ilu *IdentityLinkUpdate) SetTask(t *Task) *IdentityLinkUpdate {
	return ilu.SetTaskID(t.ID)
}

// Mutation returns the IdentityLinkMutation object of the builder.
func (ilu *IdentityLinkUpdate) Mutation() *IdentityLinkMutation {
	return ilu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (ilu *IdentityLinkUpdate) ClearTask() *IdentityLinkUpdate {
	ilu.mutation.ClearTask()
	return ilu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ilu *IdentityLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ilu.sqlSave, ilu.mutation, ilu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ilu *IdentityLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := ilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ilu *IdentityLinkUpdate) Exec(ctx context.Context) error {
	_, err := ilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilu *IdentityLinkUpdate) ExecX(ctx context.Context) {
	if err := ilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ilu *IdentityLinkUpdate) check() error {
	if v, ok := ilu.mutation.LinkType(); ok {
		if err := identitylink.LinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "link_type", err: fmt.Errorf(`ent: validator failed for field "IdentityLink.link_type": %w`, err)}
		}
	}
	if v, ok := ilu.mutation.OperationType(); ok {
		if err := identitylink.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`ent: validator failed for field "IdentityLink.operation_type": %w`, err)}
		}
	}
	if _, ok := ilu.mutation.TaskID(); ilu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IdentityLink.task"`)
	}
	return nil
}

func (ilu *IdentityLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ilu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(identitylink.Table, identitylink.Columns, sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt))
	if ps := ilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ilu.mutation.GroupID(); ok {
		_spec.SetField(identitylink.FieldGroupID, field.TypeInt, value)
	}
	if value, ok := ilu.mutation.AddedGroupID(); ok {
		_spec.AddField(identitylink.FieldGroupID, field.TypeInt, value)
	}
	if ilu.mutation.GroupIDCleared() {
		_spec.ClearField(identitylink.FieldGroupID, field.TypeInt)
	}
	if value, ok := ilu.mutation.UserID(); ok {
		_spec.SetField(identitylink.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ilu.mutation.AddedUserID(); ok {
		_spec.AddField(identitylink.FieldUserID, field.TypeInt, value)
	}
	if ilu.mutation.UserIDCleared() {
		_spec.ClearField(identitylink.FieldUserID, field.TypeInt)
	}
	if value, ok := ilu.mutation.AssignerID(); ok {
		_spec.SetField(identitylink.FieldAssignerID, field.TypeInt, value)
	}
	if value, ok := ilu.mutation.AddedAssignerID(); ok {
		_spec.AddField(identitylink.FieldAssignerID, field.TypeInt, value)
	}
	if ilu.mutation.AssignerIDCleared() {
		_spec.ClearField(identitylink.FieldAssignerID, field.TypeInt)
	}
	if value, ok := ilu.mutation.LinkType(); ok {
		_spec.SetField(identitylink.FieldLinkType, field.TypeEnum, value)
	}
	if value, ok := ilu.mutation.OperationType(); ok {
		_spec.SetField(identitylink.FieldOperationType, field.TypeEnum, value)
	}
	if value, ok := ilu.mutation.Comments(); ok {
		_spec.SetField(identitylink.FieldComments, field.TypeString, value)
	}
	if ilu.mutation.CommentsCleared() {
		_spec.ClearField(identitylink.FieldComments, field.TypeString)
	}
	if ilu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identitylink.TaskTable,
			Columns: []string{identitylink.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		edge.Schema = ilu.schemaConfig.IdentityLink
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ilu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identitylink.TaskTable,
			Columns: []string{identitylink.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		edge.Schema = ilu.schemaConfig.IdentityLink
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ilu.schemaConfig.IdentityLink
	ctx = internal.NewSchemaConfigContext(ctx, ilu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, ilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identitylink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ilu.mutation.done = true
	return n, nil
}

// IdentityLinkUpdateOne is the builder for updating a single IdentityLink entity.
type IdentityLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentityLinkMutation
}

// SetTaskID sets the "task_id" field.
func (iluo *IdentityLinkUpdateOne) SetTaskID(i int) *IdentityLinkUpdateOne {
	iluo.mutation.SetTaskID(i)
	return iluo
}

// SetGroupID sets the "group_id" field.
func (iluo *IdentityLinkUpdateOne) SetGroupID(i int) *IdentityLinkUpdateOne {
	iluo.mutation.ResetGroupID()
	iluo.mutation.SetGroupID(i)
	return iluo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableGroupID(i *int) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetGroupID(*i)
	}
	return iluo
}

// AddGroupID adds i to the "group_id" field.
func (iluo *IdentityLinkUpdateOne) AddGroupID(i int) *IdentityLinkUpdateOne {
	iluo.mutation.AddGroupID(i)
	return iluo
}

// ClearGroupID clears the value of the "group_id" field.
func (iluo *IdentityLinkUpdateOne) ClearGroupID() *IdentityLinkUpdateOne {
	iluo.mutation.ClearGroupID()
	return iluo
}

// SetUserID sets the "user_id" field.
func (iluo *IdentityLinkUpdateOne) SetUserID(i int) *IdentityLinkUpdateOne {
	iluo.mutation.ResetUserID()
	iluo.mutation.SetUserID(i)
	return iluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableUserID(i *int) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetUserID(*i)
	}
	return iluo
}

// AddUserID adds i to the "user_id" field.
func (iluo *IdentityLinkUpdateOne) AddUserID(i int) *IdentityLinkUpdateOne {
	iluo.mutation.AddUserID(i)
	return iluo
}

// ClearUserID clears the value of the "user_id" field.
func (iluo *IdentityLinkUpdateOne) ClearUserID() *IdentityLinkUpdateOne {
	iluo.mutation.ClearUserID()
	return iluo
}

// SetAssignerID sets the "assigner_id" field.
func (iluo *IdentityLinkUpdateOne) SetAssignerID(i int) *IdentityLinkUpdateOne {
	iluo.mutation.ResetAssignerID()
	iluo.mutation.SetAssignerID(i)
	return iluo
}

// SetNillableAssignerID sets the "assigner_id" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableAssignerID(i *int) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetAssignerID(*i)
	}
	return iluo
}

// AddAssignerID adds i to the "assigner_id" field.
func (iluo *IdentityLinkUpdateOne) AddAssignerID(i int) *IdentityLinkUpdateOne {
	iluo.mutation.AddAssignerID(i)
	return iluo
}

// ClearAssignerID clears the value of the "assigner_id" field.
func (iluo *IdentityLinkUpdateOne) ClearAssignerID() *IdentityLinkUpdateOne {
	iluo.mutation.ClearAssignerID()
	return iluo
}

// SetLinkType sets the "link_type" field.
func (iluo *IdentityLinkUpdateOne) SetLinkType(it identitylink.LinkType) *IdentityLinkUpdateOne {
	iluo.mutation.SetLinkType(it)
	return iluo
}

// SetOperationType sets the "operation_type" field.
func (iluo *IdentityLinkUpdateOne) SetOperationType(it identitylink.OperationType) *IdentityLinkUpdateOne {
	iluo.mutation.SetOperationType(it)
	return iluo
}

// SetComments sets the "comments" field.
func (iluo *IdentityLinkUpdateOne) SetComments(s string) *IdentityLinkUpdateOne {
	iluo.mutation.SetComments(s)
	return iluo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableComments(s *string) *IdentityLinkUpdateOne {
	if s != nil {
		iluo.SetComments(*s)
	}
	return iluo
}

// ClearComments clears the value of the "comments" field.
func (iluo *IdentityLinkUpdateOne) ClearComments() *IdentityLinkUpdateOne {
	iluo.mutation.ClearComments()
	return iluo
}

// SetTask sets the "task" edge to the Task entity.
func (iluo *IdentityLinkUpdateOne) SetTask(t *Task) *IdentityLinkUpdateOne {
	return iluo.SetTaskID(t.ID)
}

// Mutation returns the IdentityLinkMutation object of the builder.
func (iluo *IdentityLinkUpdateOne) Mutation() *IdentityLinkMutation {
	return iluo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (iluo *IdentityLinkUpdateOne) ClearTask() *IdentityLinkUpdateOne {
	iluo.mutation.ClearTask()
	return iluo
}

// Where appends a list predicates to the IdentityLinkUpdate builder.
func (iluo *IdentityLinkUpdateOne) Where(ps ...predicate.IdentityLink) *IdentityLinkUpdateOne {
	iluo.mutation.Where(ps...)
	return iluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iluo *IdentityLinkUpdateOne) Select(field string, fields ...string) *IdentityLinkUpdateOne {
	iluo.fields = append([]string{field}, fields...)
	return iluo
}

// Save executes the query and returns the updated IdentityLink entity.
func (iluo *IdentityLinkUpdateOne) Save(ctx context.Context) (*IdentityLink, error) {
	return withHooks(ctx, iluo.sqlSave, iluo.mutation, iluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iluo *IdentityLinkUpdateOne) SaveX(ctx context.Context) *IdentityLink {
	node, err := iluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iluo *IdentityLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := iluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iluo *IdentityLinkUpdateOne) ExecX(ctx context.Context) {
	if err := iluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iluo *IdentityLinkUpdateOne) check() error {
	if v, ok := iluo.mutation.LinkType(); ok {
		if err := identitylink.LinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "link_type", err: fmt.Errorf(`ent: validator failed for field "IdentityLink.link_type": %w`, err)}
		}
	}
	if v, ok := iluo.mutation.OperationType(); ok {
		if err := identitylink.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`ent: validator failed for field "IdentityLink.operation_type": %w`, err)}
		}
	}
	if _, ok := iluo.mutation.TaskID(); iluo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IdentityLink.task"`)
	}
	return nil
}

func (iluo *IdentityLinkUpdateOne) sqlSave(ctx context.Context) (_node *IdentityLink, err error) {
	if err := iluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(identitylink.Table, identitylink.Columns, sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt))
	id, ok := iluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdentityLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identitylink.FieldID)
		for _, f := range fields {
			if !identitylink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != identitylink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iluo.mutation.GroupID(); ok {
		_spec.SetField(identitylink.FieldGroupID, field.TypeInt, value)
	}
	if value, ok := iluo.mutation.AddedGroupID(); ok {
		_spec.AddField(identitylink.FieldGroupID, field.TypeInt, value)
	}
	if iluo.mutation.GroupIDCleared() {
		_spec.ClearField(identitylink.FieldGroupID, field.TypeInt)
	}
	if value, ok := iluo.mutation.UserID(); ok {
		_spec.SetField(identitylink.FieldUserID, field.TypeInt, value)
	}
	if value, ok := iluo.mutation.AddedUserID(); ok {
		_spec.AddField(identitylink.FieldUserID, field.TypeInt, value)
	}
	if iluo.mutation.UserIDCleared() {
		_spec.ClearField(identitylink.FieldUserID, field.TypeInt)
	}
	if value, ok := iluo.mutation.AssignerID(); ok {
		_spec.SetField(identitylink.FieldAssignerID, field.TypeInt, value)
	}
	if value, ok := iluo.mutation.AddedAssignerID(); ok {
		_spec.AddField(identitylink.FieldAssignerID, field.TypeInt, value)
	}
	if iluo.mutation.AssignerIDCleared() {
		_spec.ClearField(identitylink.FieldAssignerID, field.TypeInt)
	}
	if value, ok := iluo.mutation.LinkType(); ok {
		_spec.SetField(identitylink.FieldLinkType, field.TypeEnum, value)
	}
	if value, ok := iluo.mutation.OperationType(); ok {
		_spec.SetField(identitylink.FieldOperationType, field.TypeEnum, value)
	}
	if value, ok := iluo.mutation.Comments(); ok {
		_spec.SetField(identitylink.FieldComments, field.TypeString, value)
	}
	if iluo.mutation.CommentsCleared() {
		_spec.ClearField(identitylink.FieldComments, field.TypeString)
	}
	if iluo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identitylink.TaskTable,
			Columns: []string{identitylink.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		edge.Schema = iluo.schemaConfig.IdentityLink
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iluo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identitylink.TaskTable,
			Columns: []string{identitylink.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		edge.Schema = iluo.schemaConfig.IdentityLink
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iluo.schemaConfig.IdentityLink
	ctx = internal.NewSchemaConfigContext(ctx, iluo.schemaConfig)
	_node = &IdentityLink{config: iluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identitylink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iluo.mutation.done = true
	return _node, nil
}
