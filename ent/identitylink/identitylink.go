// Code generated by ent, DO NOT EDIT.

package identitylink

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the identitylink type in the database.
	Label = "identity_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldProcDefID holds the string denoting the proc_def_id field in the database.
	FieldProcDefID = "proc_def_id"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAssignerID holds the string denoting the assigner_id field in the database.
	FieldAssignerID = "assigner_id"
	// FieldLinkType holds the string denoting the link_type field in the database.
	FieldLinkType = "link_type"
	// FieldOperationType holds the string denoting the operation_type field in the database.
	FieldOperationType = "operation_type"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the identitylink in the database.
	Table = "act_identity_link"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "act_identity_link"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "act_task"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
)

// Columns holds all SQL columns for identitylink fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldTaskID,
	FieldProcDefID,
	FieldGroupID,
	FieldUserID,
	FieldAssignerID,
	FieldLinkType,
	FieldOperationType,
	FieldComments,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/workflow/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int
)

// LinkType defines the type for the "link_type" enum field.
type LinkType string

// LinkType values.
const (
	LinkTypeAssignee    LinkType = "assignee"
	LinkTypeCandidate   LinkType = "candidate"
	LinkTypeParticipant LinkType = "participant"
	LinkTypeManager     LinkType = "manager"
	LinkTypeNotifier    LinkType = "notifier"
)

func (lt LinkType) String() string {
	return string(lt)
}

// LinkTypeValidator is a validator for the "link_type" field enum values. It is called by the builders before save.
func LinkTypeValidator(lt LinkType) error {
	switch lt {
	case LinkTypeAssignee, LinkTypeCandidate, LinkTypeParticipant, LinkTypeManager, LinkTypeNotifier:
		return nil
	default:
		return fmt.Errorf("identitylink: invalid enum value for link_type field: %q", lt)
	}
}

// OperationType defines the type for the "operation_type" enum field.
type OperationType string

// OperationType values.
const (
	OperationTypeInit   OperationType = "init"
	OperationTypeClaim  OperationType = "claim"
	OperationTypeDelete OperationType = "delete"
	OperationTypePass   OperationType = "pass"
	OperationTypeReject OperationType = "reject"
)

func (ot OperationType) String() string {
	return string(ot)
}

// OperationTypeValidator is a validator for the "operation_type" field enum values. It is called by the builders before save.
func OperationTypeValidator(ot OperationType) error {
	switch ot {
	case OperationTypeInit, OperationTypeClaim, OperationTypeDelete, OperationTypePass, OperationTypeReject:
		return nil
	default:
		return fmt.Errorf("identitylink: invalid enum value for operation_type field: %q", ot)
	}
}

// OrderOption defines the ordering options for the IdentityLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByProcDefID orders the results by the proc_def_id field.
func ByProcDefID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcDefID, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAssignerID orders the results by the assigner_id field.
func ByAssignerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignerID, opts...).ToFunc()
}

// ByLinkType orders the results by the link_type field.
func ByLinkType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkType, opts...).ToFunc()
}

// ByOperationType orders the results by the operation_type field.
func ByOperationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationType, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e LinkType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *LinkType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = LinkType(str)
	if err := LinkTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid LinkType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e OperationType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *OperationType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = OperationType(str)
	if err := OperationTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid OperationType", str)
	}
	return nil
}
