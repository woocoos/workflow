// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldProcInstID holds the string denoting the proc_inst_id field in the database.
	FieldProcInstID = "proc_inst_id"
	// FieldProcDefID holds the string denoting the proc_def_id field in the database.
	FieldProcDefID = "proc_def_id"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldTaskDefKey holds the string denoting the task_def_key field in the database.
	FieldTaskDefKey = "task_def_key"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldAssignee holds the string denoting the assignee field in the database.
	FieldAssignee = "assignee"
	// FieldMemberCount holds the string denoting the member_count field in the database.
	FieldMemberCount = "member_count"
	// FieldUnfinishedCount holds the string denoting the unfinished_count field in the database.
	FieldUnfinishedCount = "unfinished_count"
	// FieldAgreeCount holds the string denoting the agree_count field in the database.
	FieldAgreeCount = "agree_count"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldSequential holds the string denoting the sequential field in the database.
	FieldSequential = "sequential"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeProcInst holds the string denoting the proc_inst edge name in mutations.
	EdgeProcInst = "proc_inst"
	// EdgeTaskIdentities holds the string denoting the task_identities edge name in mutations.
	EdgeTaskIdentities = "task_identities"
	// Table holds the table name of the task in the database.
	Table = "act_task"
	// ProcInstTable is the table that holds the proc_inst relation/edge.
	ProcInstTable = "act_task"
	// ProcInstInverseTable is the table name for the ProcInst entity.
	// It exists in this package in order to avoid circular dependency with the "procinst" package.
	ProcInstInverseTable = "act_proc_inst"
	// ProcInstColumn is the table column denoting the proc_inst relation/edge.
	ProcInstColumn = "proc_inst_id"
	// TaskIdentitiesTable is the table that holds the task_identities relation/edge.
	TaskIdentitiesTable = "act_identity_link"
	// TaskIdentitiesInverseTable is the table name for the IdentityLink entity.
	// It exists in this package in order to avoid circular dependency with the "identitylink" package.
	TaskIdentitiesInverseTable = "act_identity_link"
	// TaskIdentitiesColumn is the table column denoting the task_identities relation/edge.
	TaskIdentitiesColumn = "task_id"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldProcInstID,
	FieldProcDefID,
	FieldExecutionID,
	FieldRunID,
	FieldTaskDefKey,
	FieldParentID,
	FieldComments,
	FieldAssignee,
	FieldMemberCount,
	FieldUnfinishedCount,
	FieldAgreeCount,
	FieldKind,
	FieldSequential,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/workflow/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID int
	// DefaultAgreeCount holds the default value on creation for the "agree_count" field.
	DefaultAgreeCount int32
	// DefaultSequential holds the default value on creation for the "sequential" field.
	DefaultSequential bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int
)

// Kind defines the type for the "kind" enum field.
type Kind string

// KindOR is the default value of the Kind enum.
const DefaultKind = KindOR

// Kind values.
const (
	KindAND Kind = "AND"
	KindOR  Kind = "OR"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindAND, KindOR:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for kind field: %q", k)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusCreated is the default value of the Status enum.
const DefaultStatus = StatusCreated

// Status values.
const (
	StatusCreated  Status = "created"
	StatusRunning  Status = "running"
	StatusFinished Status = "finished"
	StatusCanceled Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCreated, StatusRunning, StatusFinished, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByProcInstID orders the results by the proc_inst_id field.
func ByProcInstID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcInstID, opts...).ToFunc()
}

// ByProcDefID orders the results by the proc_def_id field.
func ByProcDefID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcDefID, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByTaskDefKey orders the results by the task_def_key field.
func ByTaskDefKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskDefKey, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByAssignee orders the results by the assignee field.
func ByAssignee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignee, opts...).ToFunc()
}

// ByMemberCount orders the results by the member_count field.
func ByMemberCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberCount, opts...).ToFunc()
}

// ByUnfinishedCount orders the results by the unfinished_count field.
func ByUnfinishedCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnfinishedCount, opts...).ToFunc()
}

// ByAgreeCount orders the results by the agree_count field.
func ByAgreeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgreeCount, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// BySequential orders the results by the sequential field.
func BySequential(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequential, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProcInstField orders the results by proc_inst field.
func ByProcInstField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcInstStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskIdentitiesCount orders the results by task_identities count.
func ByTaskIdentitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskIdentitiesStep(), opts...)
	}
}

// ByTaskIdentities orders the results by task_identities terms.
func ByTaskIdentities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskIdentitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProcInstStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcInstInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProcInstTable, ProcInstColumn),
	)
}
func newTaskIdentitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskIdentitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskIdentitiesTable, TaskIdentitiesColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Kind) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Kind) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Kind(str)
	if err := KindValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Kind", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
