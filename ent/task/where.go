// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/workflow/ent/predicate"

	"github.com/woocoos/workflow/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// ProcInstID applies equality check predicate on the "proc_inst_id" field. It's identical to ProcInstIDEQ.
func ProcInstID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcInstID, v))
}

// ProcDefID applies equality check predicate on the "proc_def_id" field. It's identical to ProcDefIDEQ.
func ProcDefID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcDefID, v))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExecutionID, v))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRunID, v))
}

// TaskDefKey applies equality check predicate on the "task_def_key" field. It's identical to TaskDefKeyEQ.
func TaskDefKey(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskDefKey, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldComments, v))
}

// Assignee applies equality check predicate on the "assignee" field. It's identical to AssigneeEQ.
func Assignee(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAssignee, v))
}

// MemberCount applies equality check predicate on the "member_count" field. It's identical to MemberCountEQ.
func MemberCount(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMemberCount, v))
}

// UnfinishedCount applies equality check predicate on the "unfinished_count" field. It's identical to UnfinishedCountEQ.
func UnfinishedCount(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUnfinishedCount, v))
}

// AgreeCount applies equality check predicate on the "agree_count" field. It's identical to AgreeCountEQ.
func AgreeCount(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAgreeCount, v))
}

// Sequential applies equality check predicate on the "sequential" field. It's identical to SequentialEQ.
func Sequential(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSequential, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTenantID, v))
}

// ProcInstIDEQ applies the EQ predicate on the "proc_inst_id" field.
func ProcInstIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcInstID, v))
}

// ProcInstIDNEQ applies the NEQ predicate on the "proc_inst_id" field.
func ProcInstIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldProcInstID, v))
}

// ProcInstIDIn applies the In predicate on the "proc_inst_id" field.
func ProcInstIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldProcInstID, vs...))
}

// ProcInstIDNotIn applies the NotIn predicate on the "proc_inst_id" field.
func ProcInstIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldProcInstID, vs...))
}

// ProcDefIDEQ applies the EQ predicate on the "proc_def_id" field.
func ProcDefIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcDefID, v))
}

// ProcDefIDNEQ applies the NEQ predicate on the "proc_def_id" field.
func ProcDefIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldProcDefID, v))
}

// ProcDefIDIn applies the In predicate on the "proc_def_id" field.
func ProcDefIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldProcDefID, vs...))
}

// ProcDefIDNotIn applies the NotIn predicate on the "proc_def_id" field.
func ProcDefIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldProcDefID, vs...))
}

// ProcDefIDGT applies the GT predicate on the "proc_def_id" field.
func ProcDefIDGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldProcDefID, v))
}

// ProcDefIDGTE applies the GTE predicate on the "proc_def_id" field.
func ProcDefIDGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldProcDefID, v))
}

// ProcDefIDLT applies the LT predicate on the "proc_def_id" field.
func ProcDefIDLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldProcDefID, v))
}

// ProcDefIDLTE applies the LTE predicate on the "proc_def_id" field.
func ProcDefIDLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldProcDefID, v))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExecutionID, v))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldExecutionID, v))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldExecutionID, vs...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldExecutionID, vs...))
}

// ExecutionIDGT applies the GT predicate on the "execution_id" field.
func ExecutionIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldExecutionID, v))
}

// ExecutionIDGTE applies the GTE predicate on the "execution_id" field.
func ExecutionIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldExecutionID, v))
}

// ExecutionIDLT applies the LT predicate on the "execution_id" field.
func ExecutionIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldExecutionID, v))
}

// ExecutionIDLTE applies the LTE predicate on the "execution_id" field.
func ExecutionIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldExecutionID, v))
}

// ExecutionIDContains applies the Contains predicate on the "execution_id" field.
func ExecutionIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldExecutionID, v))
}

// ExecutionIDHasPrefix applies the HasPrefix predicate on the "execution_id" field.
func ExecutionIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldExecutionID, v))
}

// ExecutionIDHasSuffix applies the HasSuffix predicate on the "execution_id" field.
func ExecutionIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldExecutionID, v))
}

// ExecutionIDEqualFold applies the EqualFold predicate on the "execution_id" field.
func ExecutionIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldExecutionID, v))
}

// ExecutionIDContainsFold applies the ContainsFold predicate on the "execution_id" field.
func ExecutionIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldExecutionID, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRunID, v))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRunID, v))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRunID, vs...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRunID, vs...))
}

// RunIDGT applies the GT predicate on the "run_id" field.
func RunIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRunID, v))
}

// RunIDGTE applies the GTE predicate on the "run_id" field.
func RunIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRunID, v))
}

// RunIDLT applies the LT predicate on the "run_id" field.
func RunIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRunID, v))
}

// RunIDLTE applies the LTE predicate on the "run_id" field.
func RunIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRunID, v))
}

// RunIDContains applies the Contains predicate on the "run_id" field.
func RunIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRunID, v))
}

// RunIDHasPrefix applies the HasPrefix predicate on the "run_id" field.
func RunIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRunID, v))
}

// RunIDHasSuffix applies the HasSuffix predicate on the "run_id" field.
func RunIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRunID, v))
}

// RunIDIsNil applies the IsNil predicate on the "run_id" field.
func RunIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRunID))
}

// RunIDNotNil applies the NotNil predicate on the "run_id" field.
func RunIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRunID))
}

// RunIDEqualFold applies the EqualFold predicate on the "run_id" field.
func RunIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRunID, v))
}

// RunIDContainsFold applies the ContainsFold predicate on the "run_id" field.
func RunIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRunID, v))
}

// TaskDefKeyEQ applies the EQ predicate on the "task_def_key" field.
func TaskDefKeyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskDefKey, v))
}

// TaskDefKeyNEQ applies the NEQ predicate on the "task_def_key" field.
func TaskDefKeyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTaskDefKey, v))
}

// TaskDefKeyIn applies the In predicate on the "task_def_key" field.
func TaskDefKeyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTaskDefKey, vs...))
}

// TaskDefKeyNotIn applies the NotIn predicate on the "task_def_key" field.
func TaskDefKeyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTaskDefKey, vs...))
}

// TaskDefKeyGT applies the GT predicate on the "task_def_key" field.
func TaskDefKeyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTaskDefKey, v))
}

// TaskDefKeyGTE applies the GTE predicate on the "task_def_key" field.
func TaskDefKeyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTaskDefKey, v))
}

// TaskDefKeyLT applies the LT predicate on the "task_def_key" field.
func TaskDefKeyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTaskDefKey, v))
}

// TaskDefKeyLTE applies the LTE predicate on the "task_def_key" field.
func TaskDefKeyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTaskDefKey, v))
}

// TaskDefKeyContains applies the Contains predicate on the "task_def_key" field.
func TaskDefKeyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTaskDefKey, v))
}

// TaskDefKeyHasPrefix applies the HasPrefix predicate on the "task_def_key" field.
func TaskDefKeyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTaskDefKey, v))
}

// TaskDefKeyHasSuffix applies the HasSuffix predicate on the "task_def_key" field.
func TaskDefKeyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTaskDefKey, v))
}

// TaskDefKeyEqualFold applies the EqualFold predicate on the "task_def_key" field.
func TaskDefKeyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTaskDefKey, v))
}

// TaskDefKeyContainsFold applies the ContainsFold predicate on the "task_def_key" field.
func TaskDefKeyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTaskDefKey, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldParentID))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldComments, v))
}

// AssigneeEQ applies the EQ predicate on the "assignee" field.
func AssigneeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAssignee, v))
}

// AssigneeNEQ applies the NEQ predicate on the "assignee" field.
func AssigneeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAssignee, v))
}

// AssigneeIn applies the In predicate on the "assignee" field.
func AssigneeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAssignee, vs...))
}

// AssigneeNotIn applies the NotIn predicate on the "assignee" field.
func AssigneeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAssignee, vs...))
}

// AssigneeGT applies the GT predicate on the "assignee" field.
func AssigneeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAssignee, v))
}

// AssigneeGTE applies the GTE predicate on the "assignee" field.
func AssigneeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAssignee, v))
}

// AssigneeLT applies the LT predicate on the "assignee" field.
func AssigneeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAssignee, v))
}

// AssigneeLTE applies the LTE predicate on the "assignee" field.
func AssigneeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAssignee, v))
}

// AssigneeContains applies the Contains predicate on the "assignee" field.
func AssigneeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAssignee, v))
}

// AssigneeHasPrefix applies the HasPrefix predicate on the "assignee" field.
func AssigneeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAssignee, v))
}

// AssigneeHasSuffix applies the HasSuffix predicate on the "assignee" field.
func AssigneeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAssignee, v))
}

// AssigneeIsNil applies the IsNil predicate on the "assignee" field.
func AssigneeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAssignee))
}

// AssigneeNotNil applies the NotNil predicate on the "assignee" field.
func AssigneeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAssignee))
}

// AssigneeEqualFold applies the EqualFold predicate on the "assignee" field.
func AssigneeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAssignee, v))
}

// AssigneeContainsFold applies the ContainsFold predicate on the "assignee" field.
func AssigneeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAssignee, v))
}

// MemberCountEQ applies the EQ predicate on the "member_count" field.
func MemberCountEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMemberCount, v))
}

// MemberCountNEQ applies the NEQ predicate on the "member_count" field.
func MemberCountNEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMemberCount, v))
}

// MemberCountIn applies the In predicate on the "member_count" field.
func MemberCountIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMemberCount, vs...))
}

// MemberCountNotIn applies the NotIn predicate on the "member_count" field.
func MemberCountNotIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMemberCount, vs...))
}

// MemberCountGT applies the GT predicate on the "member_count" field.
func MemberCountGT(v int32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldMemberCount, v))
}

// MemberCountGTE applies the GTE predicate on the "member_count" field.
func MemberCountGTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldMemberCount, v))
}

// MemberCountLT applies the LT predicate on the "member_count" field.
func MemberCountLT(v int32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldMemberCount, v))
}

// MemberCountLTE applies the LTE predicate on the "member_count" field.
func MemberCountLTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldMemberCount, v))
}

// UnfinishedCountEQ applies the EQ predicate on the "unfinished_count" field.
func UnfinishedCountEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUnfinishedCount, v))
}

// UnfinishedCountNEQ applies the NEQ predicate on the "unfinished_count" field.
func UnfinishedCountNEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUnfinishedCount, v))
}

// UnfinishedCountIn applies the In predicate on the "unfinished_count" field.
func UnfinishedCountIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUnfinishedCount, vs...))
}

// UnfinishedCountNotIn applies the NotIn predicate on the "unfinished_count" field.
func UnfinishedCountNotIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUnfinishedCount, vs...))
}

// UnfinishedCountGT applies the GT predicate on the "unfinished_count" field.
func UnfinishedCountGT(v int32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUnfinishedCount, v))
}

// UnfinishedCountGTE applies the GTE predicate on the "unfinished_count" field.
func UnfinishedCountGTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUnfinishedCount, v))
}

// UnfinishedCountLT applies the LT predicate on the "unfinished_count" field.
func UnfinishedCountLT(v int32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUnfinishedCount, v))
}

// UnfinishedCountLTE applies the LTE predicate on the "unfinished_count" field.
func UnfinishedCountLTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUnfinishedCount, v))
}

// AgreeCountEQ applies the EQ predicate on the "agree_count" field.
func AgreeCountEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAgreeCount, v))
}

// AgreeCountNEQ applies the NEQ predicate on the "agree_count" field.
func AgreeCountNEQ(v int32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAgreeCount, v))
}

// AgreeCountIn applies the In predicate on the "agree_count" field.
func AgreeCountIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAgreeCount, vs...))
}

// AgreeCountNotIn applies the NotIn predicate on the "agree_count" field.
func AgreeCountNotIn(vs ...int32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAgreeCount, vs...))
}

// AgreeCountGT applies the GT predicate on the "agree_count" field.
func AgreeCountGT(v int32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAgreeCount, v))
}

// AgreeCountGTE applies the GTE predicate on the "agree_count" field.
func AgreeCountGTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAgreeCount, v))
}

// AgreeCountLT applies the LT predicate on the "agree_count" field.
func AgreeCountLT(v int32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAgreeCount, v))
}

// AgreeCountLTE applies the LTE predicate on the "agree_count" field.
func AgreeCountLTE(v int32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAgreeCount, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v Kind) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v Kind) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...Kind) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...Kind) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldKind, vs...))
}

// SequentialEQ applies the EQ predicate on the "sequential" field.
func SequentialEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSequential, v))
}

// SequentialNEQ applies the NEQ predicate on the "sequential" field.
func SequentialNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSequential, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// HasProcInst applies the HasEdge predicate on the "proc_inst" edge.
func HasProcInst() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProcInstTable, ProcInstColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProcInst
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProcInstWith applies the HasEdge predicate on the "proc_inst" edge with a given conditions (other predicates).
func HasProcInstWith(preds ...predicate.ProcInst) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newProcInstStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProcInst
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskIdentities applies the HasEdge predicate on the "task_identities" edge.
func HasTaskIdentities() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskIdentitiesTable, TaskIdentitiesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.IdentityLink
		step.Edge.Schema = schemaConfig.IdentityLink
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskIdentitiesWith applies the HasEdge predicate on the "task_identities" edge with a given conditions (other predicates).
func HasTaskIdentitiesWith(preds ...predicate.IdentityLink) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTaskIdentitiesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.IdentityLink
		step.Edge.Schema = schemaConfig.IdentityLink
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
