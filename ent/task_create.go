// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/identitylink"
	"github.com/woocoos/workflow/ent/procinst"
	"github.com/woocoos/workflow/ent/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (tc *TaskCreate) SetTenantID(i int) *TaskCreate {
	tc.mutation.SetTenantID(i)
	return tc
}

// SetProcInstID sets the "proc_inst_id" field.
func (tc *TaskCreate) SetProcInstID(i int) *TaskCreate {
	tc.mutation.SetProcInstID(i)
	return tc
}

// SetProcDefID sets the "proc_def_id" field.
func (tc *TaskCreate) SetProcDefID(i int) *TaskCreate {
	tc.mutation.SetProcDefID(i)
	return tc
}

// SetExecutionID sets the "execution_id" field.
func (tc *TaskCreate) SetExecutionID(s string) *TaskCreate {
	tc.mutation.SetExecutionID(s)
	return tc
}

// SetRunID sets the "run_id" field.
func (tc *TaskCreate) SetRunID(s string) *TaskCreate {
	tc.mutation.SetRunID(s)
	return tc
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRunID(s *string) *TaskCreate {
	if s != nil {
		tc.SetRunID(*s)
	}
	return tc
}

// SetTaskDefKey sets the "task_def_key" field.
func (tc *TaskCreate) SetTaskDefKey(s string) *TaskCreate {
	tc.mutation.SetTaskDefKey(s)
	return tc
}

// SetParentID sets the "parent_id" field.
func (tc *TaskCreate) SetParentID(i int) *TaskCreate {
	tc.mutation.SetParentID(i)
	return tc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableParentID(i *int) *TaskCreate {
	if i != nil {
		tc.SetParentID(*i)
	}
	return tc
}

// SetComments sets the "comments" field.
func (tc *TaskCreate) SetComments(s string) *TaskCreate {
	tc.mutation.SetComments(s)
	return tc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (tc *TaskCreate) SetNillableComments(s *string) *TaskCreate {
	if s != nil {
		tc.SetComments(*s)
	}
	return tc
}

// SetAssignee sets the "assignee" field.
func (tc *TaskCreate) SetAssignee(s string) *TaskCreate {
	tc.mutation.SetAssignee(s)
	return tc
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAssignee(s *string) *TaskCreate {
	if s != nil {
		tc.SetAssignee(*s)
	}
	return tc
}

// SetMemberCount sets the "member_count" field.
func (tc *TaskCreate) SetMemberCount(i int32) *TaskCreate {
	tc.mutation.SetMemberCount(i)
	return tc
}

// SetUnfinishedCount sets the "unfinished_count" field.
func (tc *TaskCreate) SetUnfinishedCount(i int32) *TaskCreate {
	tc.mutation.SetUnfinishedCount(i)
	return tc
}

// SetAgreeCount sets the "agree_count" field.
func (tc *TaskCreate) SetAgreeCount(i int32) *TaskCreate {
	tc.mutation.SetAgreeCount(i)
	return tc
}

// SetNillableAgreeCount sets the "agree_count" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAgreeCount(i *int32) *TaskCreate {
	if i != nil {
		tc.SetAgreeCount(*i)
	}
	return tc
}

// SetKind sets the "kind" field.
func (tc *TaskCreate) SetKind(t task.Kind) *TaskCreate {
	tc.mutation.SetKind(t)
	return tc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (tc *TaskCreate) SetNillableKind(t *task.Kind) *TaskCreate {
	if t != nil {
		tc.SetKind(*t)
	}
	return tc
}

// SetSequential sets the "sequential" field.
func (tc *TaskCreate) SetSequential(b bool) *TaskCreate {
	tc.mutation.SetSequential(b)
	return tc
}

// SetNillableSequential sets the "sequential" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSequential(b *bool) *TaskCreate {
	if b != nil {
		tc.SetSequential(*b)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(t task.Status) *TaskCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(t *task.Status) *TaskCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(i int) *TaskCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableID(i *int) *TaskCreate {
	if i != nil {
		tc.SetID(*i)
	}
	return tc
}

// SetProcInst sets the "proc_inst" edge to the ProcInst entity.
func (tc *TaskCreate) SetProcInst(p *ProcInst) *TaskCreate {
	return tc.SetProcInstID(p.ID)
}

// AddTaskIdentityIDs adds the "task_identities" edge to the IdentityLink entity by IDs.
func (tc *TaskCreate) AddTaskIdentityIDs(ids ...int) *TaskCreate {
	tc.mutation.AddTaskIdentityIDs(ids...)
	return tc
}

// AddTaskIdentities adds the "task_identities" edges to the IdentityLink entity.
func (tc *TaskCreate) AddTaskIdentities(i ...*IdentityLink) *TaskCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tc.AddTaskIdentityIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() error {
	if _, ok := tc.mutation.ParentID(); !ok {
		v := task.DefaultParentID
		tc.mutation.SetParentID(v)
	}
	if _, ok := tc.mutation.AgreeCount(); !ok {
		v := task.DefaultAgreeCount
		tc.mutation.SetAgreeCount(v)
	}
	if _, ok := tc.mutation.Kind(); !ok {
		v := task.DefaultKind
		tc.mutation.SetKind(v)
	}
	if _, ok := tc.mutation.Sequential(); !ok {
		v := task.DefaultSequential
		tc.mutation.SetSequential(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if task.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if task.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := task.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if task.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultID (forgotten import ent/runtime?)")
		}
		v := task.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Task.tenant_id"`)}
	}
	if _, ok := tc.mutation.ProcInstID(); !ok {
		return &ValidationError{Name: "proc_inst_id", err: errors.New(`ent: missing required field "Task.proc_inst_id"`)}
	}
	if _, ok := tc.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def_id", err: errors.New(`ent: missing required field "Task.proc_def_id"`)}
	}
	if _, ok := tc.mutation.ExecutionID(); !ok {
		return &ValidationError{Name: "execution_id", err: errors.New(`ent: missing required field "Task.execution_id"`)}
	}
	if _, ok := tc.mutation.TaskDefKey(); !ok {
		return &ValidationError{Name: "task_def_key", err: errors.New(`ent: missing required field "Task.task_def_key"`)}
	}
	if _, ok := tc.mutation.MemberCount(); !ok {
		return &ValidationError{Name: "member_count", err: errors.New(`ent: missing required field "Task.member_count"`)}
	}
	if _, ok := tc.mutation.UnfinishedCount(); !ok {
		return &ValidationError{Name: "unfinished_count", err: errors.New(`ent: missing required field "Task.unfinished_count"`)}
	}
	if _, ok := tc.mutation.AgreeCount(); !ok {
		return &ValidationError{Name: "agree_count", err: errors.New(`ent: missing required field "Task.agree_count"`)}
	}
	if _, ok := tc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Task.kind"`)}
	}
	if v, ok := tc.mutation.Kind(); ok {
		if err := task.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Task.kind": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Sequential(); !ok {
		return &ValidationError{Name: "sequential", err: errors.New(`ent: missing required field "Task.sequential"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ProcInstID(); !ok {
		return &ValidationError{Name: "proc_inst", err: errors.New(`ent: missing required edge "Task.proc_inst"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	_spec.Schema = tc.schemaConfig.Task
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.TenantID(); ok {
		_spec.SetField(task.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := tc.mutation.ProcDefID(); ok {
		_spec.SetField(task.FieldProcDefID, field.TypeInt, value)
		_node.ProcDefID = value
	}
	if value, ok := tc.mutation.ExecutionID(); ok {
		_spec.SetField(task.FieldExecutionID, field.TypeString, value)
		_node.ExecutionID = value
	}
	if value, ok := tc.mutation.RunID(); ok {
		_spec.SetField(task.FieldRunID, field.TypeString, value)
		_node.RunID = value
	}
	if value, ok := tc.mutation.TaskDefKey(); ok {
		_spec.SetField(task.FieldTaskDefKey, field.TypeString, value)
		_node.TaskDefKey = value
	}
	if value, ok := tc.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeInt, value)
		_node.ParentID = value
	}
	if value, ok := tc.mutation.Comments(); ok {
		_spec.SetField(task.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := tc.mutation.Assignee(); ok {
		_spec.SetField(task.FieldAssignee, field.TypeString, value)
		_node.Assignee = value
	}
	if value, ok := tc.mutation.MemberCount(); ok {
		_spec.SetField(task.FieldMemberCount, field.TypeInt32, value)
		_node.MemberCount = value
	}
	if value, ok := tc.mutation.UnfinishedCount(); ok {
		_spec.SetField(task.FieldUnfinishedCount, field.TypeInt32, value)
		_node.UnfinishedCount = value
	}
	if value, ok := tc.mutation.AgreeCount(); ok {
		_spec.SetField(task.FieldAgreeCount, field.TypeInt32, value)
		_node.AgreeCount = value
	}
	if value, ok := tc.mutation.Kind(); ok {
		_spec.SetField(task.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := tc.mutation.Sequential(); ok {
		_spec.SetField(task.FieldSequential, field.TypeBool, value)
		_node.Sequential = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := tc.mutation.ProcInstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProcInstTable,
			Columns: []string{task.ProcInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procinst.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tc.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProcInstID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskIdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identitylink.FieldID, field.TypeInt),
			},
		}
		edge.Schema = tc.schemaConfig.IdentityLink
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetProcInstID sets the "proc_inst_id" field.
func (u *TaskUpsert) SetProcInstID(v int) *TaskUpsert {
	u.Set(task.FieldProcInstID, v)
	return u
}

// UpdateProcInstID sets the "proc_inst_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateProcInstID() *TaskUpsert {
	u.SetExcluded(task.FieldProcInstID)
	return u
}

// SetProcDefID sets the "proc_def_id" field.
func (u *TaskUpsert) SetProcDefID(v int) *TaskUpsert {
	u.Set(task.FieldProcDefID, v)
	return u
}

// UpdateProcDefID sets the "proc_def_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateProcDefID() *TaskUpsert {
	u.SetExcluded(task.FieldProcDefID)
	return u
}

// AddProcDefID adds v to the "proc_def_id" field.
func (u *TaskUpsert) AddProcDefID(v int) *TaskUpsert {
	u.Add(task.FieldProcDefID, v)
	return u
}

// SetExecutionID sets the "execution_id" field.
func (u *TaskUpsert) SetExecutionID(v string) *TaskUpsert {
	u.Set(task.FieldExecutionID, v)
	return u
}

// UpdateExecutionID sets the "execution_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateExecutionID() *TaskUpsert {
	u.SetExcluded(task.FieldExecutionID)
	return u
}

// SetRunID sets the "run_id" field.
func (u *TaskUpsert) SetRunID(v string) *TaskUpsert {
	u.Set(task.FieldRunID, v)
	return u
}

// UpdateRunID sets the "run_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRunID() *TaskUpsert {
	u.SetExcluded(task.FieldRunID)
	return u
}

// ClearRunID clears the value of the "run_id" field.
func (u *TaskUpsert) ClearRunID() *TaskUpsert {
	u.SetNull(task.FieldRunID)
	return u
}

// SetTaskDefKey sets the "task_def_key" field.
func (u *TaskUpsert) SetTaskDefKey(v string) *TaskUpsert {
	u.Set(task.FieldTaskDefKey, v)
	return u
}

// UpdateTaskDefKey sets the "task_def_key" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTaskDefKey() *TaskUpsert {
	u.SetExcluded(task.FieldTaskDefKey)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *TaskUpsert) SetParentID(v int) *TaskUpsert {
	u.Set(task.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateParentID() *TaskUpsert {
	u.SetExcluded(task.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *TaskUpsert) AddParentID(v int) *TaskUpsert {
	u.Add(task.FieldParentID, v)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *TaskUpsert) ClearParentID() *TaskUpsert {
	u.SetNull(task.FieldParentID)
	return u
}

// SetComments sets the "comments" field.
func (u *TaskUpsert) SetComments(v string) *TaskUpsert {
	u.Set(task.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *TaskUpsert) UpdateComments() *TaskUpsert {
	u.SetExcluded(task.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *TaskUpsert) ClearComments() *TaskUpsert {
	u.SetNull(task.FieldComments)
	return u
}

// SetAssignee sets the "assignee" field.
func (u *TaskUpsert) SetAssignee(v string) *TaskUpsert {
	u.Set(task.FieldAssignee, v)
	return u
}

// UpdateAssignee sets the "assignee" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAssignee() *TaskUpsert {
	u.SetExcluded(task.FieldAssignee)
	return u
}

// ClearAssignee clears the value of the "assignee" field.
func (u *TaskUpsert) ClearAssignee() *TaskUpsert {
	u.SetNull(task.FieldAssignee)
	return u
}

// SetMemberCount sets the "member_count" field.
func (u *TaskUpsert) SetMemberCount(v int32) *TaskUpsert {
	u.Set(task.FieldMemberCount, v)
	return u
}

// UpdateMemberCount sets the "member_count" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMemberCount() *TaskUpsert {
	u.SetExcluded(task.FieldMemberCount)
	return u
}

// AddMemberCount adds v to the "member_count" field.
func (u *TaskUpsert) AddMemberCount(v int32) *TaskUpsert {
	u.Add(task.FieldMemberCount, v)
	return u
}

// SetUnfinishedCount sets the "unfinished_count" field.
func (u *TaskUpsert) SetUnfinishedCount(v int32) *TaskUpsert {
	u.Set(task.FieldUnfinishedCount, v)
	return u
}

// UpdateUnfinishedCount sets the "unfinished_count" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUnfinishedCount() *TaskUpsert {
	u.SetExcluded(task.FieldUnfinishedCount)
	return u
}

// AddUnfinishedCount adds v to the "unfinished_count" field.
func (u *TaskUpsert) AddUnfinishedCount(v int32) *TaskUpsert {
	u.Add(task.FieldUnfinishedCount, v)
	return u
}

// SetAgreeCount sets the "agree_count" field.
func (u *TaskUpsert) SetAgreeCount(v int32) *TaskUpsert {
	u.Set(task.FieldAgreeCount, v)
	return u
}

// UpdateAgreeCount sets the "agree_count" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAgreeCount() *TaskUpsert {
	u.SetExcluded(task.FieldAgreeCount)
	return u
}

// AddAgreeCount adds v to the "agree_count" field.
func (u *TaskUpsert) AddAgreeCount(v int32) *TaskUpsert {
	u.Add(task.FieldAgreeCount, v)
	return u
}

// SetKind sets the "kind" field.
func (u *TaskUpsert) SetKind(v task.Kind) *TaskUpsert {
	u.Set(task.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *TaskUpsert) UpdateKind() *TaskUpsert {
	u.SetExcluded(task.FieldKind)
	return u
}

// SetSequential sets the "sequential" field.
func (u *TaskUpsert) SetSequential(v bool) *TaskUpsert {
	u.Set(task.FieldSequential, v)
	return u
}

// UpdateSequential sets the "sequential" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSequential() *TaskUpsert {
	u.SetExcluded(task.FieldSequential)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskUpsert) SetStatus(v task.Status) *TaskUpsert {
	u.Set(task.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStatus() *TaskUpsert {
	u.SetExcluded(task.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(task.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(task.FieldTenantID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(task.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(task.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetProcInstID sets the "proc_inst_id" field.
func (u *TaskUpsertOne) SetProcInstID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetProcInstID(v)
	})
}

// UpdateProcInstID sets the "proc_inst_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateProcInstID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProcInstID()
	})
}

// SetProcDefID sets the "proc_def_id" field.
func (u *TaskUpsertOne) SetProcDefID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetProcDefID(v)
	})
}

// AddProcDefID adds v to the "proc_def_id" field.
func (u *TaskUpsertOne) AddProcDefID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddProcDefID(v)
	})
}

// UpdateProcDefID sets the "proc_def_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateProcDefID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProcDefID()
	})
}

// SetExecutionID sets the "execution_id" field.
func (u *TaskUpsertOne) SetExecutionID(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetExecutionID(v)
	})
}

// UpdateExecutionID sets the "execution_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateExecutionID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExecutionID()
	})
}

// SetRunID sets the "run_id" field.
func (u *TaskUpsertOne) SetRunID(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRunID(v)
	})
}

// UpdateRunID sets the "run_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRunID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRunID()
	})
}

// ClearRunID clears the value of the "run_id" field.
func (u *TaskUpsertOne) ClearRunID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRunID()
	})
}

// SetTaskDefKey sets the "task_def_key" field.
func (u *TaskUpsertOne) SetTaskDefKey(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTaskDefKey(v)
	})
}

// UpdateTaskDefKey sets the "task_def_key" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTaskDefKey() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTaskDefKey()
	})
}

// SetParentID sets the "parent_id" field.
func (u *TaskUpsertOne) SetParentID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *TaskUpsertOne) AddParentID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateParentID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *TaskUpsertOne) ClearParentID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearParentID()
	})
}

// SetComments sets the "comments" field.
func (u *TaskUpsertOne) SetComments(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateComments() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *TaskUpsertOne) ClearComments() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearComments()
	})
}

// SetAssignee sets the "assignee" field.
func (u *TaskUpsertOne) SetAssignee(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAssignee(v)
	})
}

// UpdateAssignee sets the "assignee" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAssignee() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAssignee()
	})
}

// ClearAssignee clears the value of the "assignee" field.
func (u *TaskUpsertOne) ClearAssignee() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAssignee()
	})
}

// SetMemberCount sets the "member_count" field.
func (u *TaskUpsertOne) SetMemberCount(v int32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMemberCount(v)
	})
}

// AddMemberCount adds v to the "member_count" field.
func (u *TaskUpsertOne) AddMemberCount(v int32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddMemberCount(v)
	})
}

// UpdateMemberCount sets the "member_count" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMemberCount() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMemberCount()
	})
}

// SetUnfinishedCount sets the "unfinished_count" field.
func (u *TaskUpsertOne) SetUnfinishedCount(v int32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUnfinishedCount(v)
	})
}

// AddUnfinishedCount adds v to the "unfinished_count" field.
func (u *TaskUpsertOne) AddUnfinishedCount(v int32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddUnfinishedCount(v)
	})
}

// UpdateUnfinishedCount sets the "unfinished_count" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUnfinishedCount() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUnfinishedCount()
	})
}

// SetAgreeCount sets the "agree_count" field.
func (u *TaskUpsertOne) SetAgreeCount(v int32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAgreeCount(v)
	})
}

// AddAgreeCount adds v to the "agree_count" field.
func (u *TaskUpsertOne) AddAgreeCount(v int32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddAgreeCount(v)
	})
}

// UpdateAgreeCount sets the "agree_count" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAgreeCount() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAgreeCount()
	})
}

// SetKind sets the "kind" field.
func (u *TaskUpsertOne) SetKind(v task.Kind) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateKind() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateKind()
	})
}

// SetSequential sets the "sequential" field.
func (u *TaskUpsertOne) SetSequential(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSequential(v)
	})
}

// UpdateSequential sets the "sequential" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSequential() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSequential()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertOne) SetStatus(v task.Status) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(task.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(task.FieldTenantID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(task.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(task.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetProcInstID sets the "proc_inst_id" field.
func (u *TaskUpsertBulk) SetProcInstID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetProcInstID(v)
	})
}

// UpdateProcInstID sets the "proc_inst_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateProcInstID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProcInstID()
	})
}

// SetProcDefID sets the "proc_def_id" field.
func (u *TaskUpsertBulk) SetProcDefID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetProcDefID(v)
	})
}

// AddProcDefID adds v to the "proc_def_id" field.
func (u *TaskUpsertBulk) AddProcDefID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddProcDefID(v)
	})
}

// UpdateProcDefID sets the "proc_def_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateProcDefID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProcDefID()
	})
}

// SetExecutionID sets the "execution_id" field.
func (u *TaskUpsertBulk) SetExecutionID(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetExecutionID(v)
	})
}

// UpdateExecutionID sets the "execution_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateExecutionID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExecutionID()
	})
}

// SetRunID sets the "run_id" field.
func (u *TaskUpsertBulk) SetRunID(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRunID(v)
	})
}

// UpdateRunID sets the "run_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRunID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRunID()
	})
}

// ClearRunID clears the value of the "run_id" field.
func (u *TaskUpsertBulk) ClearRunID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRunID()
	})
}

// SetTaskDefKey sets the "task_def_key" field.
func (u *TaskUpsertBulk) SetTaskDefKey(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTaskDefKey(v)
	})
}

// UpdateTaskDefKey sets the "task_def_key" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTaskDefKey() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTaskDefKey()
	})
}

// SetParentID sets the "parent_id" field.
func (u *TaskUpsertBulk) SetParentID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *TaskUpsertBulk) AddParentID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateParentID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *TaskUpsertBulk) ClearParentID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearParentID()
	})
}

// SetComments sets the "comments" field.
func (u *TaskUpsertBulk) SetComments(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateComments() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *TaskUpsertBulk) ClearComments() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearComments()
	})
}

// SetAssignee sets the "assignee" field.
func (u *TaskUpsertBulk) SetAssignee(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAssignee(v)
	})
}

// UpdateAssignee sets the "assignee" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAssignee() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAssignee()
	})
}

// ClearAssignee clears the value of the "assignee" field.
func (u *TaskUpsertBulk) ClearAssignee() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAssignee()
	})
}

// SetMemberCount sets the "member_count" field.
func (u *TaskUpsertBulk) SetMemberCount(v int32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMemberCount(v)
	})
}

// AddMemberCount adds v to the "member_count" field.
func (u *TaskUpsertBulk) AddMemberCount(v int32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddMemberCount(v)
	})
}

// UpdateMemberCount sets the "member_count" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMemberCount() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMemberCount()
	})
}

// SetUnfinishedCount sets the "unfinished_count" field.
func (u *TaskUpsertBulk) SetUnfinishedCount(v int32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUnfinishedCount(v)
	})
}

// AddUnfinishedCount adds v to the "unfinished_count" field.
func (u *TaskUpsertBulk) AddUnfinishedCount(v int32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddUnfinishedCount(v)
	})
}

// UpdateUnfinishedCount sets the "unfinished_count" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUnfinishedCount() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUnfinishedCount()
	})
}

// SetAgreeCount sets the "agree_count" field.
func (u *TaskUpsertBulk) SetAgreeCount(v int32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAgreeCount(v)
	})
}

// AddAgreeCount adds v to the "agree_count" field.
func (u *TaskUpsertBulk) AddAgreeCount(v int32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddAgreeCount(v)
	})
}

// UpdateAgreeCount sets the "agree_count" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAgreeCount() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAgreeCount()
	})
}

// SetKind sets the "kind" field.
func (u *TaskUpsertBulk) SetKind(v task.Kind) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateKind() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateKind()
	})
}

// SetSequential sets the "sequential" field.
func (u *TaskUpsertBulk) SetSequential(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSequential(v)
	})
}

// UpdateSequential sets the "sequential" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSequential() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSequential()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertBulk) SetStatus(v task.Status) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
