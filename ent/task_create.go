// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/identitylink"
	"github.com/woocoos/workflow/ent/procinst"
	"github.com/woocoos/workflow/ent/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetProcInstID sets the "proc_inst_id" field.
func (tc *TaskCreate) SetProcInstID(i int) *TaskCreate {
	tc.mutation.SetProcInstID(i)
	return tc
}

// SetProcDefID sets the "proc_def_id" field.
func (tc *TaskCreate) SetProcDefID(i int) *TaskCreate {
	tc.mutation.SetProcDefID(i)
	return tc
}

// SetExecutionID sets the "execution_id" field.
func (tc *TaskCreate) SetExecutionID(s string) *TaskCreate {
	tc.mutation.SetExecutionID(s)
	return tc
}

// SetRunID sets the "run_id" field.
func (tc *TaskCreate) SetRunID(s string) *TaskCreate {
	tc.mutation.SetRunID(s)
	return tc
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRunID(s *string) *TaskCreate {
	if s != nil {
		tc.SetRunID(*s)
	}
	return tc
}

// SetTaskDefKey sets the "task_def_key" field.
func (tc *TaskCreate) SetTaskDefKey(s string) *TaskCreate {
	tc.mutation.SetTaskDefKey(s)
	return tc
}

// SetParentID sets the "parent_id" field.
func (tc *TaskCreate) SetParentID(i int) *TaskCreate {
	tc.mutation.SetParentID(i)
	return tc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableParentID(i *int) *TaskCreate {
	if i != nil {
		tc.SetParentID(*i)
	}
	return tc
}

// SetComments sets the "comments" field.
func (tc *TaskCreate) SetComments(s string) *TaskCreate {
	tc.mutation.SetComments(s)
	return tc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (tc *TaskCreate) SetNillableComments(s *string) *TaskCreate {
	if s != nil {
		tc.SetComments(*s)
	}
	return tc
}

// SetAssignee sets the "assignee" field.
func (tc *TaskCreate) SetAssignee(s string) *TaskCreate {
	tc.mutation.SetAssignee(s)
	return tc
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAssignee(s *string) *TaskCreate {
	if s != nil {
		tc.SetAssignee(*s)
	}
	return tc
}

// SetMemberCount sets the "member_count" field.
func (tc *TaskCreate) SetMemberCount(i int32) *TaskCreate {
	tc.mutation.SetMemberCount(i)
	return tc
}

// SetUnfinishedCount sets the "unfinished_count" field.
func (tc *TaskCreate) SetUnfinishedCount(i int32) *TaskCreate {
	tc.mutation.SetUnfinishedCount(i)
	return tc
}

// SetAgreeCount sets the "agree_count" field.
func (tc *TaskCreate) SetAgreeCount(i int32) *TaskCreate {
	tc.mutation.SetAgreeCount(i)
	return tc
}

// SetNillableAgreeCount sets the "agree_count" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAgreeCount(i *int32) *TaskCreate {
	if i != nil {
		tc.SetAgreeCount(*i)
	}
	return tc
}

// SetKind sets the "kind" field.
func (tc *TaskCreate) SetKind(t task.Kind) *TaskCreate {
	tc.mutation.SetKind(t)
	return tc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (tc *TaskCreate) SetNillableKind(t *task.Kind) *TaskCreate {
	if t != nil {
		tc.SetKind(*t)
	}
	return tc
}

// SetSequential sets the "sequential" field.
func (tc *TaskCreate) SetSequential(b bool) *TaskCreate {
	tc.mutation.SetSequential(b)
	return tc
}

// SetNillableSequential sets the "sequential" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSequential(b *bool) *TaskCreate {
	if b != nil {
		tc.SetSequential(*b)
	}
	return tc
}

// SetOrgID sets the "org_id" field.
func (tc *TaskCreate) SetOrgID(i int) *TaskCreate {
	tc.mutation.SetOrgID(i)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(t task.Status) *TaskCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(t *task.Status) *TaskCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(i int) *TaskCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableID(i *int) *TaskCreate {
	if i != nil {
		tc.SetID(*i)
	}
	return tc
}

// SetProcInst sets the "proc_inst" edge to the ProcInst entity.
func (tc *TaskCreate) SetProcInst(p *ProcInst) *TaskCreate {
	return tc.SetProcInstID(p.ID)
}

// AddTaskIdentityIDs adds the "task_identities" edge to the IdentityLink entity by IDs.
func (tc *TaskCreate) AddTaskIdentityIDs(ids ...int) *TaskCreate {
	tc.mutation.AddTaskIdentityIDs(ids...)
	return tc
}

// AddTaskIdentities adds the "task_identities" edges to the IdentityLink entity.
func (tc *TaskCreate) AddTaskIdentities(i ...*IdentityLink) *TaskCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tc.AddTaskIdentityIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks[*Task, TaskMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.ParentID(); !ok {
		v := task.DefaultParentID
		tc.mutation.SetParentID(v)
	}
	if _, ok := tc.mutation.AgreeCount(); !ok {
		v := task.DefaultAgreeCount
		tc.mutation.SetAgreeCount(v)
	}
	if _, ok := tc.mutation.Kind(); !ok {
		v := task.DefaultKind
		tc.mutation.SetKind(v)
	}
	if _, ok := tc.mutation.Sequential(); !ok {
		v := task.DefaultSequential
		tc.mutation.SetSequential(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := task.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := task.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.ProcInstID(); !ok {
		return &ValidationError{Name: "proc_inst_id", err: errors.New(`ent: missing required field "Task.proc_inst_id"`)}
	}
	if _, ok := tc.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def_id", err: errors.New(`ent: missing required field "Task.proc_def_id"`)}
	}
	if _, ok := tc.mutation.ExecutionID(); !ok {
		return &ValidationError{Name: "execution_id", err: errors.New(`ent: missing required field "Task.execution_id"`)}
	}
	if _, ok := tc.mutation.TaskDefKey(); !ok {
		return &ValidationError{Name: "task_def_key", err: errors.New(`ent: missing required field "Task.task_def_key"`)}
	}
	if _, ok := tc.mutation.MemberCount(); !ok {
		return &ValidationError{Name: "member_count", err: errors.New(`ent: missing required field "Task.member_count"`)}
	}
	if _, ok := tc.mutation.UnfinishedCount(); !ok {
		return &ValidationError{Name: "unfinished_count", err: errors.New(`ent: missing required field "Task.unfinished_count"`)}
	}
	if _, ok := tc.mutation.AgreeCount(); !ok {
		return &ValidationError{Name: "agree_count", err: errors.New(`ent: missing required field "Task.agree_count"`)}
	}
	if _, ok := tc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Task.kind"`)}
	}
	if v, ok := tc.mutation.Kind(); ok {
		if err := task.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Task.kind": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Sequential(); !ok {
		return &ValidationError{Name: "sequential", err: errors.New(`ent: missing required field "Task.sequential"`)}
	}
	if _, ok := tc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "Task.org_id"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ProcInstID(); !ok {
		return &ValidationError{Name: "proc_inst", err: errors.New(`ent: missing required edge "Task.proc_inst"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.ProcDefID(); ok {
		_spec.SetField(task.FieldProcDefID, field.TypeInt, value)
		_node.ProcDefID = value
	}
	if value, ok := tc.mutation.ExecutionID(); ok {
		_spec.SetField(task.FieldExecutionID, field.TypeString, value)
		_node.ExecutionID = value
	}
	if value, ok := tc.mutation.RunID(); ok {
		_spec.SetField(task.FieldRunID, field.TypeString, value)
		_node.RunID = value
	}
	if value, ok := tc.mutation.TaskDefKey(); ok {
		_spec.SetField(task.FieldTaskDefKey, field.TypeString, value)
		_node.TaskDefKey = value
	}
	if value, ok := tc.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeInt, value)
		_node.ParentID = value
	}
	if value, ok := tc.mutation.Comments(); ok {
		_spec.SetField(task.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := tc.mutation.Assignee(); ok {
		_spec.SetField(task.FieldAssignee, field.TypeString, value)
		_node.Assignee = value
	}
	if value, ok := tc.mutation.MemberCount(); ok {
		_spec.SetField(task.FieldMemberCount, field.TypeInt32, value)
		_node.MemberCount = value
	}
	if value, ok := tc.mutation.UnfinishedCount(); ok {
		_spec.SetField(task.FieldUnfinishedCount, field.TypeInt32, value)
		_node.UnfinishedCount = value
	}
	if value, ok := tc.mutation.AgreeCount(); ok {
		_spec.SetField(task.FieldAgreeCount, field.TypeInt32, value)
		_node.AgreeCount = value
	}
	if value, ok := tc.mutation.Kind(); ok {
		_spec.SetField(task.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := tc.mutation.Sequential(); ok {
		_spec.SetField(task.FieldSequential, field.TypeBool, value)
		_node.Sequential = value
	}
	if value, ok := tc.mutation.OrgID(); ok {
		_spec.SetField(task.FieldOrgID, field.TypeInt, value)
		_node.OrgID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := tc.mutation.ProcInstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProcInstTable,
			Columns: []string{task.ProcInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procinst.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProcInstID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskIdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskIdentitiesTable,
			Columns: []string{task.TaskIdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: identitylink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
