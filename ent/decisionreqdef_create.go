// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/decisiondef"
	"github.com/woocoos/workflow/ent/decisionreqdef"
	"github.com/woocoos/workflow/ent/deployment"
)

// DecisionReqDefCreate is the builder for creating a DecisionReqDef entity.
type DecisionReqDefCreate struct {
	config
	mutation *DecisionReqDefMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (drdc *DecisionReqDefCreate) SetCreatedBy(i int) *DecisionReqDefCreate {
	drdc.mutation.SetCreatedBy(i)
	return drdc
}

// SetCreatedAt sets the "created_at" field.
func (drdc *DecisionReqDefCreate) SetCreatedAt(t time.Time) *DecisionReqDefCreate {
	drdc.mutation.SetCreatedAt(t)
	return drdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableCreatedAt(t *time.Time) *DecisionReqDefCreate {
	if t != nil {
		drdc.SetCreatedAt(*t)
	}
	return drdc
}

// SetUpdatedBy sets the "updated_by" field.
func (drdc *DecisionReqDefCreate) SetUpdatedBy(i int) *DecisionReqDefCreate {
	drdc.mutation.SetUpdatedBy(i)
	return drdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableUpdatedBy(i *int) *DecisionReqDefCreate {
	if i != nil {
		drdc.SetUpdatedBy(*i)
	}
	return drdc
}

// SetUpdatedAt sets the "updated_at" field.
func (drdc *DecisionReqDefCreate) SetUpdatedAt(t time.Time) *DecisionReqDefCreate {
	drdc.mutation.SetUpdatedAt(t)
	return drdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableUpdatedAt(t *time.Time) *DecisionReqDefCreate {
	if t != nil {
		drdc.SetUpdatedAt(*t)
	}
	return drdc
}

// SetTenantID sets the "tenant_id" field.
func (drdc *DecisionReqDefCreate) SetTenantID(i int) *DecisionReqDefCreate {
	drdc.mutation.SetTenantID(i)
	return drdc
}

// SetDeploymentID sets the "deployment_id" field.
func (drdc *DecisionReqDefCreate) SetDeploymentID(i int) *DecisionReqDefCreate {
	drdc.mutation.SetDeploymentID(i)
	return drdc
}

// SetAppID sets the "app_id" field.
func (drdc *DecisionReqDefCreate) SetAppID(i int) *DecisionReqDefCreate {
	drdc.mutation.SetAppID(i)
	return drdc
}

// SetCategory sets the "category" field.
func (drdc *DecisionReqDefCreate) SetCategory(s string) *DecisionReqDefCreate {
	drdc.mutation.SetCategory(s)
	return drdc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableCategory(s *string) *DecisionReqDefCreate {
	if s != nil {
		drdc.SetCategory(*s)
	}
	return drdc
}

// SetName sets the "name" field.
func (drdc *DecisionReqDefCreate) SetName(s string) *DecisionReqDefCreate {
	drdc.mutation.SetName(s)
	return drdc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableName(s *string) *DecisionReqDefCreate {
	if s != nil {
		drdc.SetName(*s)
	}
	return drdc
}

// SetKey sets the "key" field.
func (drdc *DecisionReqDefCreate) SetKey(s string) *DecisionReqDefCreate {
	drdc.mutation.SetKey(s)
	return drdc
}

// SetVersion sets the "version" field.
func (drdc *DecisionReqDefCreate) SetVersion(i int32) *DecisionReqDefCreate {
	drdc.mutation.SetVersion(i)
	return drdc
}

// SetRevision sets the "revision" field.
func (drdc *DecisionReqDefCreate) SetRevision(i int32) *DecisionReqDefCreate {
	drdc.mutation.SetRevision(i)
	return drdc
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableRevision(i *int32) *DecisionReqDefCreate {
	if i != nil {
		drdc.SetRevision(*i)
	}
	return drdc
}

// SetResourceKey sets the "resource_key" field.
func (drdc *DecisionReqDefCreate) SetResourceKey(s string) *DecisionReqDefCreate {
	drdc.mutation.SetResourceKey(s)
	return drdc
}

// SetNillableResourceKey sets the "resource_key" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableResourceKey(s *string) *DecisionReqDefCreate {
	if s != nil {
		drdc.SetResourceKey(*s)
	}
	return drdc
}

// SetResourceID sets the "resource_id" field.
func (drdc *DecisionReqDefCreate) SetResourceID(i int) *DecisionReqDefCreate {
	drdc.mutation.SetResourceID(i)
	return drdc
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableResourceID(i *int) *DecisionReqDefCreate {
	if i != nil {
		drdc.SetResourceID(*i)
	}
	return drdc
}

// SetID sets the "id" field.
func (drdc *DecisionReqDefCreate) SetID(i int) *DecisionReqDefCreate {
	drdc.mutation.SetID(i)
	return drdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drdc *DecisionReqDefCreate) SetNillableID(i *int) *DecisionReqDefCreate {
	if i != nil {
		drdc.SetID(*i)
	}
	return drdc
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (drdc *DecisionReqDefCreate) SetDeployment(d *Deployment) *DecisionReqDefCreate {
	return drdc.SetDeploymentID(d.ID)
}

// AddDecisionDefIDs adds the "decision_defs" edge to the DecisionDef entity by IDs.
func (drdc *DecisionReqDefCreate) AddDecisionDefIDs(ids ...int) *DecisionReqDefCreate {
	drdc.mutation.AddDecisionDefIDs(ids...)
	return drdc
}

// AddDecisionDefs adds the "decision_defs" edges to the DecisionDef entity.
func (drdc *DecisionReqDefCreate) AddDecisionDefs(d ...*DecisionDef) *DecisionReqDefCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drdc.AddDecisionDefIDs(ids...)
}

// Mutation returns the DecisionReqDefMutation object of the builder.
func (drdc *DecisionReqDefCreate) Mutation() *DecisionReqDefMutation {
	return drdc.mutation
}

// Save creates the DecisionReqDef in the database.
func (drdc *DecisionReqDefCreate) Save(ctx context.Context) (*DecisionReqDef, error) {
	if err := drdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, drdc.sqlSave, drdc.mutation, drdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drdc *DecisionReqDefCreate) SaveX(ctx context.Context) *DecisionReqDef {
	v, err := drdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drdc *DecisionReqDefCreate) Exec(ctx context.Context) error {
	_, err := drdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drdc *DecisionReqDefCreate) ExecX(ctx context.Context) {
	if err := drdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drdc *DecisionReqDefCreate) defaults() error {
	if _, ok := drdc.mutation.CreatedAt(); !ok {
		if decisionreqdef.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized decisionreqdef.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := decisionreqdef.DefaultCreatedAt()
		drdc.mutation.SetCreatedAt(v)
	}
	if _, ok := drdc.mutation.ID(); !ok {
		if decisionreqdef.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized decisionreqdef.DefaultID (forgotten import ent/runtime?)")
		}
		v := decisionreqdef.DefaultID()
		drdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (drdc *DecisionReqDefCreate) check() error {
	if _, ok := drdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "DecisionReqDef.created_by"`)}
	}
	if _, ok := drdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DecisionReqDef.created_at"`)}
	}
	if _, ok := drdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DecisionReqDef.tenant_id"`)}
	}
	if _, ok := drdc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment_id", err: errors.New(`ent: missing required field "DecisionReqDef.deployment_id"`)}
	}
	if _, ok := drdc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "DecisionReqDef.app_id"`)}
	}
	if _, ok := drdc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "DecisionReqDef.key"`)}
	}
	if _, ok := drdc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "DecisionReqDef.version"`)}
	}
	if _, ok := drdc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment", err: errors.New(`ent: missing required edge "DecisionReqDef.deployment"`)}
	}
	return nil
}

func (drdc *DecisionReqDefCreate) sqlSave(ctx context.Context) (*DecisionReqDef, error) {
	if err := drdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	drdc.mutation.id = &_node.ID
	drdc.mutation.done = true
	return _node, nil
}

func (drdc *DecisionReqDefCreate) createSpec() (*DecisionReqDef, *sqlgraph.CreateSpec) {
	var (
		_node = &DecisionReqDef{config: drdc.config}
		_spec = sqlgraph.NewCreateSpec(decisionreqdef.Table, sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt))
	)
	_spec.Schema = drdc.schemaConfig.DecisionReqDef
	_spec.OnConflict = drdc.conflict
	if id, ok := drdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drdc.mutation.CreatedBy(); ok {
		_spec.SetField(decisionreqdef.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := drdc.mutation.CreatedAt(); ok {
		_spec.SetField(decisionreqdef.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := drdc.mutation.UpdatedBy(); ok {
		_spec.SetField(decisionreqdef.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := drdc.mutation.UpdatedAt(); ok {
		_spec.SetField(decisionreqdef.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := drdc.mutation.TenantID(); ok {
		_spec.SetField(decisionreqdef.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := drdc.mutation.AppID(); ok {
		_spec.SetField(decisionreqdef.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := drdc.mutation.Category(); ok {
		_spec.SetField(decisionreqdef.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := drdc.mutation.Name(); ok {
		_spec.SetField(decisionreqdef.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := drdc.mutation.Key(); ok {
		_spec.SetField(decisionreqdef.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := drdc.mutation.Version(); ok {
		_spec.SetField(decisionreqdef.FieldVersion, field.TypeInt32, value)
		_node.Version = value
	}
	if value, ok := drdc.mutation.Revision(); ok {
		_spec.SetField(decisionreqdef.FieldRevision, field.TypeInt32, value)
		_node.Revision = value
	}
	if value, ok := drdc.mutation.ResourceKey(); ok {
		_spec.SetField(decisionreqdef.FieldResourceKey, field.TypeString, value)
		_node.ResourceKey = value
	}
	if value, ok := drdc.mutation.ResourceID(); ok {
		_spec.SetField(decisionreqdef.FieldResourceID, field.TypeInt, value)
		_node.ResourceID = value
	}
	if nodes := drdc.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   decisionreqdef.DeploymentTable,
			Columns: []string{decisionreqdef.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt),
			},
		}
		edge.Schema = drdc.schemaConfig.DecisionReqDef
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeploymentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drdc.mutation.DecisionDefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   decisionreqdef.DecisionDefsTable,
			Columns: []string{decisionreqdef.DecisionDefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decisiondef.FieldID, field.TypeInt),
			},
		}
		edge.Schema = drdc.schemaConfig.DecisionDef
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DecisionReqDef.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DecisionReqDefUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (drdc *DecisionReqDefCreate) OnConflict(opts ...sql.ConflictOption) *DecisionReqDefUpsertOne {
	drdc.conflict = opts
	return &DecisionReqDefUpsertOne{
		create: drdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DecisionReqDef.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drdc *DecisionReqDefCreate) OnConflictColumns(columns ...string) *DecisionReqDefUpsertOne {
	drdc.conflict = append(drdc.conflict, sql.ConflictColumns(columns...))
	return &DecisionReqDefUpsertOne{
		create: drdc,
	}
}

type (
	// DecisionReqDefUpsertOne is the builder for "upsert"-ing
	//  one DecisionReqDef node.
	DecisionReqDefUpsertOne struct {
		create *DecisionReqDefCreate
	}

	// DecisionReqDefUpsert is the "OnConflict" setter.
	DecisionReqDefUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *DecisionReqDefUpsert) SetUpdatedBy(v int) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateUpdatedBy() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DecisionReqDefUpsert) AddUpdatedBy(v int) *DecisionReqDefUpsert {
	u.Add(decisionreqdef.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DecisionReqDefUpsert) ClearUpdatedBy() *DecisionReqDefUpsert {
	u.SetNull(decisionreqdef.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DecisionReqDefUpsert) SetUpdatedAt(v time.Time) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateUpdatedAt() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DecisionReqDefUpsert) ClearUpdatedAt() *DecisionReqDefUpsert {
	u.SetNull(decisionreqdef.FieldUpdatedAt)
	return u
}

// SetCategory sets the "category" field.
func (u *DecisionReqDefUpsert) SetCategory(v string) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateCategory() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldCategory)
	return u
}

// ClearCategory clears the value of the "category" field.
func (u *DecisionReqDefUpsert) ClearCategory() *DecisionReqDefUpsert {
	u.SetNull(decisionreqdef.FieldCategory)
	return u
}

// SetName sets the "name" field.
func (u *DecisionReqDefUpsert) SetName(v string) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateName() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DecisionReqDefUpsert) ClearName() *DecisionReqDefUpsert {
	u.SetNull(decisionreqdef.FieldName)
	return u
}

// SetKey sets the "key" field.
func (u *DecisionReqDefUpsert) SetKey(v string) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateKey() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldKey)
	return u
}

// SetVersion sets the "version" field.
func (u *DecisionReqDefUpsert) SetVersion(v int32) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateVersion() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *DecisionReqDefUpsert) AddVersion(v int32) *DecisionReqDefUpsert {
	u.Add(decisionreqdef.FieldVersion, v)
	return u
}

// SetRevision sets the "revision" field.
func (u *DecisionReqDefUpsert) SetRevision(v int32) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldRevision, v)
	return u
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateRevision() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldRevision)
	return u
}

// AddRevision adds v to the "revision" field.
func (u *DecisionReqDefUpsert) AddRevision(v int32) *DecisionReqDefUpsert {
	u.Add(decisionreqdef.FieldRevision, v)
	return u
}

// ClearRevision clears the value of the "revision" field.
func (u *DecisionReqDefUpsert) ClearRevision() *DecisionReqDefUpsert {
	u.SetNull(decisionreqdef.FieldRevision)
	return u
}

// SetResourceKey sets the "resource_key" field.
func (u *DecisionReqDefUpsert) SetResourceKey(v string) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldResourceKey, v)
	return u
}

// UpdateResourceKey sets the "resource_key" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateResourceKey() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldResourceKey)
	return u
}

// ClearResourceKey clears the value of the "resource_key" field.
func (u *DecisionReqDefUpsert) ClearResourceKey() *DecisionReqDefUpsert {
	u.SetNull(decisionreqdef.FieldResourceKey)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *DecisionReqDefUpsert) SetResourceID(v int) *DecisionReqDefUpsert {
	u.Set(decisionreqdef.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *DecisionReqDefUpsert) UpdateResourceID() *DecisionReqDefUpsert {
	u.SetExcluded(decisionreqdef.FieldResourceID)
	return u
}

// AddResourceID adds v to the "resource_id" field.
func (u *DecisionReqDefUpsert) AddResourceID(v int) *DecisionReqDefUpsert {
	u.Add(decisionreqdef.FieldResourceID, v)
	return u
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *DecisionReqDefUpsert) ClearResourceID() *DecisionReqDefUpsert {
	u.SetNull(decisionreqdef.FieldResourceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DecisionReqDef.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(decisionreqdef.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DecisionReqDefUpsertOne) UpdateNewValues() *DecisionReqDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(decisionreqdef.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(decisionreqdef.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(decisionreqdef.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(decisionreqdef.FieldTenantID)
		}
		if _, exists := u.create.mutation.DeploymentID(); exists {
			s.SetIgnore(decisionreqdef.FieldDeploymentID)
		}
		if _, exists := u.create.mutation.AppID(); exists {
			s.SetIgnore(decisionreqdef.FieldAppID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DecisionReqDef.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DecisionReqDefUpsertOne) Ignore() *DecisionReqDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DecisionReqDefUpsertOne) DoNothing() *DecisionReqDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DecisionReqDefCreate.OnConflict
// documentation for more info.
func (u *DecisionReqDefUpsertOne) Update(set func(*DecisionReqDefUpsert)) *DecisionReqDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DecisionReqDefUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DecisionReqDefUpsertOne) SetUpdatedBy(v int) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DecisionReqDefUpsertOne) AddUpdatedBy(v int) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateUpdatedBy() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DecisionReqDefUpsertOne) ClearUpdatedBy() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DecisionReqDefUpsertOne) SetUpdatedAt(v time.Time) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateUpdatedAt() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DecisionReqDefUpsertOne) ClearUpdatedAt() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetCategory sets the "category" field.
func (u *DecisionReqDefUpsertOne) SetCategory(v string) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateCategory() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *DecisionReqDefUpsertOne) ClearCategory() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearCategory()
	})
}

// SetName sets the "name" field.
func (u *DecisionReqDefUpsertOne) SetName(v string) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateName() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DecisionReqDefUpsertOne) ClearName() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearName()
	})
}

// SetKey sets the "key" field.
func (u *DecisionReqDefUpsertOne) SetKey(v string) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateKey() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateKey()
	})
}

// SetVersion sets the "version" field.
func (u *DecisionReqDefUpsertOne) SetVersion(v int32) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *DecisionReqDefUpsertOne) AddVersion(v int32) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateVersion() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateVersion()
	})
}

// SetRevision sets the "revision" field.
func (u *DecisionReqDefUpsertOne) SetRevision(v int32) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetRevision(v)
	})
}

// AddRevision adds v to the "revision" field.
func (u *DecisionReqDefUpsertOne) AddRevision(v int32) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddRevision(v)
	})
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateRevision() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateRevision()
	})
}

// ClearRevision clears the value of the "revision" field.
func (u *DecisionReqDefUpsertOne) ClearRevision() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearRevision()
	})
}

// SetResourceKey sets the "resource_key" field.
func (u *DecisionReqDefUpsertOne) SetResourceKey(v string) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetResourceKey(v)
	})
}

// UpdateResourceKey sets the "resource_key" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateResourceKey() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateResourceKey()
	})
}

// ClearResourceKey clears the value of the "resource_key" field.
func (u *DecisionReqDefUpsertOne) ClearResourceKey() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearResourceKey()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *DecisionReqDefUpsertOne) SetResourceID(v int) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetResourceID(v)
	})
}

// AddResourceID adds v to the "resource_id" field.
func (u *DecisionReqDefUpsertOne) AddResourceID(v int) *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *DecisionReqDefUpsertOne) UpdateResourceID() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *DecisionReqDefUpsertOne) ClearResourceID() *DecisionReqDefUpsertOne {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearResourceID()
	})
}

// Exec executes the query.
func (u *DecisionReqDefUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DecisionReqDefCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DecisionReqDefUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DecisionReqDefUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DecisionReqDefUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DecisionReqDefCreateBulk is the builder for creating many DecisionReqDef entities in bulk.
type DecisionReqDefCreateBulk struct {
	config
	builders []*DecisionReqDefCreate
	conflict []sql.ConflictOption
}

// Save creates the DecisionReqDef entities in the database.
func (drdcb *DecisionReqDefCreateBulk) Save(ctx context.Context) ([]*DecisionReqDef, error) {
	specs := make([]*sqlgraph.CreateSpec, len(drdcb.builders))
	nodes := make([]*DecisionReqDef, len(drdcb.builders))
	mutators := make([]Mutator, len(drdcb.builders))
	for i := range drdcb.builders {
		func(i int, root context.Context) {
			builder := drdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DecisionReqDefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = drdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drdcb *DecisionReqDefCreateBulk) SaveX(ctx context.Context) []*DecisionReqDef {
	v, err := drdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drdcb *DecisionReqDefCreateBulk) Exec(ctx context.Context) error {
	_, err := drdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drdcb *DecisionReqDefCreateBulk) ExecX(ctx context.Context) {
	if err := drdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DecisionReqDef.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DecisionReqDefUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (drdcb *DecisionReqDefCreateBulk) OnConflict(opts ...sql.ConflictOption) *DecisionReqDefUpsertBulk {
	drdcb.conflict = opts
	return &DecisionReqDefUpsertBulk{
		create: drdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DecisionReqDef.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drdcb *DecisionReqDefCreateBulk) OnConflictColumns(columns ...string) *DecisionReqDefUpsertBulk {
	drdcb.conflict = append(drdcb.conflict, sql.ConflictColumns(columns...))
	return &DecisionReqDefUpsertBulk{
		create: drdcb,
	}
}

// DecisionReqDefUpsertBulk is the builder for "upsert"-ing
// a bulk of DecisionReqDef nodes.
type DecisionReqDefUpsertBulk struct {
	create *DecisionReqDefCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DecisionReqDef.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(decisionreqdef.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DecisionReqDefUpsertBulk) UpdateNewValues() *DecisionReqDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(decisionreqdef.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(decisionreqdef.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(decisionreqdef.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(decisionreqdef.FieldTenantID)
			}
			if _, exists := b.mutation.DeploymentID(); exists {
				s.SetIgnore(decisionreqdef.FieldDeploymentID)
			}
			if _, exists := b.mutation.AppID(); exists {
				s.SetIgnore(decisionreqdef.FieldAppID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DecisionReqDef.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DecisionReqDefUpsertBulk) Ignore() *DecisionReqDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DecisionReqDefUpsertBulk) DoNothing() *DecisionReqDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DecisionReqDefCreateBulk.OnConflict
// documentation for more info.
func (u *DecisionReqDefUpsertBulk) Update(set func(*DecisionReqDefUpsert)) *DecisionReqDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DecisionReqDefUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DecisionReqDefUpsertBulk) SetUpdatedBy(v int) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DecisionReqDefUpsertBulk) AddUpdatedBy(v int) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateUpdatedBy() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DecisionReqDefUpsertBulk) ClearUpdatedBy() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DecisionReqDefUpsertBulk) SetUpdatedAt(v time.Time) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateUpdatedAt() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DecisionReqDefUpsertBulk) ClearUpdatedAt() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetCategory sets the "category" field.
func (u *DecisionReqDefUpsertBulk) SetCategory(v string) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateCategory() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *DecisionReqDefUpsertBulk) ClearCategory() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearCategory()
	})
}

// SetName sets the "name" field.
func (u *DecisionReqDefUpsertBulk) SetName(v string) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateName() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DecisionReqDefUpsertBulk) ClearName() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearName()
	})
}

// SetKey sets the "key" field.
func (u *DecisionReqDefUpsertBulk) SetKey(v string) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateKey() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateKey()
	})
}

// SetVersion sets the "version" field.
func (u *DecisionReqDefUpsertBulk) SetVersion(v int32) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *DecisionReqDefUpsertBulk) AddVersion(v int32) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateVersion() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateVersion()
	})
}

// SetRevision sets the "revision" field.
func (u *DecisionReqDefUpsertBulk) SetRevision(v int32) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetRevision(v)
	})
}

// AddRevision adds v to the "revision" field.
func (u *DecisionReqDefUpsertBulk) AddRevision(v int32) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddRevision(v)
	})
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateRevision() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateRevision()
	})
}

// ClearRevision clears the value of the "revision" field.
func (u *DecisionReqDefUpsertBulk) ClearRevision() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearRevision()
	})
}

// SetResourceKey sets the "resource_key" field.
func (u *DecisionReqDefUpsertBulk) SetResourceKey(v string) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetResourceKey(v)
	})
}

// UpdateResourceKey sets the "resource_key" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateResourceKey() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateResourceKey()
	})
}

// ClearResourceKey clears the value of the "resource_key" field.
func (u *DecisionReqDefUpsertBulk) ClearResourceKey() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearResourceKey()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *DecisionReqDefUpsertBulk) SetResourceID(v int) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.SetResourceID(v)
	})
}

// AddResourceID adds v to the "resource_id" field.
func (u *DecisionReqDefUpsertBulk) AddResourceID(v int) *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.AddResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *DecisionReqDefUpsertBulk) UpdateResourceID() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *DecisionReqDefUpsertBulk) ClearResourceID() *DecisionReqDefUpsertBulk {
	return u.Update(func(s *DecisionReqDefUpsert) {
		s.ClearResourceID()
	})
}

// Exec executes the query.
func (u *DecisionReqDefUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DecisionReqDefCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DecisionReqDefCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DecisionReqDefUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
