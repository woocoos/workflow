// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/woocoos/workflow/ent/procdef"
	"github.com/woocoos/workflow/ent/procinst"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (dd *DecisionDefQuery) CollectFields(ctx context.Context, satisfies ...string) (*DecisionDefQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return dd, nil
	}
	if err := dd.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return dd, nil
}

func (dd *DecisionDefQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(opCtx, field.Selections, satisfies) {
		switch field.Name {
		case "reqDef":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DecisionReqDefClient{config: dd.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			dd.withReqDef = query
		}
	}
	return nil
}

type decisiondefPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DecisionDefPaginateOption
}

func newDecisionDefPaginateArgs(rv map[string]interface{}) *decisiondefPaginateArgs {
	args := &decisiondefPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &DecisionDefOrder{Field: &DecisionDefOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDecisionDefOrder(order))
			}
		case *DecisionDefOrder:
			if v != nil {
				args.opts = append(args.opts, WithDecisionDefOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*DecisionDefWhereInput); ok {
		args.opts = append(args.opts, WithDecisionDefFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (drd *DecisionReqDefQuery) CollectFields(ctx context.Context, satisfies ...string) (*DecisionReqDefQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return drd, nil
	}
	if err := drd.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return drd, nil
}

func (drd *DecisionReqDefQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(opCtx, field.Selections, satisfies) {
		switch field.Name {
		case "deployment":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DeploymentClient{config: drd.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			drd.withDeployment = query
		case "decisionDefs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DecisionDefClient{config: drd.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			drd.WithNamedDecisionDefs(alias, func(wq *DecisionDefQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type decisionreqdefPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DecisionReqDefPaginateOption
}

func newDecisionReqDefPaginateArgs(rv map[string]interface{}) *decisionreqdefPaginateArgs {
	args := &decisionreqdefPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &DecisionReqDefOrder{Field: &DecisionReqDefOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDecisionReqDefOrder(order))
			}
		case *DecisionReqDefOrder:
			if v != nil {
				args.opts = append(args.opts, WithDecisionReqDefOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*DecisionReqDefWhereInput); ok {
		args.opts = append(args.opts, WithDecisionReqDefFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DeploymentQuery) CollectFields(ctx context.Context, satisfies ...string) (*DeploymentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return d, nil
	}
	if err := d.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return d, nil
}

func (d *DeploymentQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(opCtx, field.Selections, satisfies) {
		switch field.Name {
		case "procDefs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProcDefClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			d.WithNamedProcDefs(alias, func(wq *ProcDefQuery) {
				*wq = *query
			})
		case "decisionReqs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DecisionReqDefClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			d.WithNamedDecisionReqs(alias, func(wq *DecisionReqDefQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type deploymentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DeploymentPaginateOption
}

func newDeploymentPaginateArgs(rv map[string]interface{}) *deploymentPaginateArgs {
	args := &deploymentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &DeploymentOrder{Field: &DeploymentOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDeploymentOrder(order))
			}
		case *DeploymentOrder:
			if v != nil {
				args.opts = append(args.opts, WithDeploymentOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*DeploymentWhereInput); ok {
		args.opts = append(args.opts, WithDeploymentFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (il *IdentityLinkQuery) CollectFields(ctx context.Context, satisfies ...string) (*IdentityLinkQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return il, nil
	}
	if err := il.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return il, nil
}

func (il *IdentityLinkQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(opCtx, field.Selections, satisfies) {
		switch field.Name {
		case "task":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TaskClient{config: il.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			il.withTask = query
		}
	}
	return nil
}

type identitylinkPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []IdentityLinkPaginateOption
}

func newIdentityLinkPaginateArgs(rv map[string]interface{}) *identitylinkPaginateArgs {
	args := &identitylinkPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*IdentityLinkWhereInput); ok {
		args.opts = append(args.opts, WithIdentityLinkFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pd *ProcDefQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProcDefQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pd, nil
	}
	if err := pd.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pd, nil
}

func (pd *ProcDefQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(opCtx, field.Selections, satisfies) {
		switch field.Name {
		case "deployment":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DeploymentClient{config: pd.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pd.withDeployment = query
		case "procInstances":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProcInstClient{config: pd.config}).Query()
			)
			args := newProcInstPaginateArgs(fieldArgs(ctx, new(ProcInstWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newProcInstPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pd.loadTotal = append(pd.loadTotal, func(ctx context.Context, nodes []*ProcDef) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"proc_def_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(procdef.ProcInstancesColumn, ids...))
						})
						if err := query.GroupBy(procdef.ProcInstancesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					pd.loadTotal = append(pd.loadTotal, func(_ context.Context, nodes []*ProcDef) error {
						for i := range nodes {
							n := len(nodes[i].Edges.ProcInstances)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}

			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(procdef.ProcInstancesColumn, limit, pager.orderExpr())
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			pd.WithNamedProcInstances(alias, func(wq *ProcInstQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type procdefPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProcDefPaginateOption
}

func newProcDefPaginateArgs(rv map[string]interface{}) *procdefPaginateArgs {
	args := &procdefPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &ProcDefOrder{Field: &ProcDefOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithProcDefOrder(order))
			}
		case *ProcDefOrder:
			if v != nil {
				args.opts = append(args.opts, WithProcDefOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ProcDefWhereInput); ok {
		args.opts = append(args.opts, WithProcDefFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pi *ProcInstQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProcInstQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pi, nil
	}
	if err := pi.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pi, nil
}

func (pi *ProcInstQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(opCtx, field.Selections, satisfies) {
		switch field.Name {
		case "procDef":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProcDefClient{config: pi.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pi.withProcDef = query
		case "tasks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TaskClient{config: pi.config}).Query()
			)
			args := newTaskPaginateArgs(fieldArgs(ctx, new(TaskWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newTaskPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pi.loadTotal = append(pi.loadTotal, func(ctx context.Context, nodes []*ProcInst) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"proc_inst_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(procinst.TasksColumn, ids...))
						})
						if err := query.GroupBy(procinst.TasksColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					pi.loadTotal = append(pi.loadTotal, func(_ context.Context, nodes []*ProcInst) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Tasks)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}

			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(procinst.TasksColumn, limit, pager.orderExpr())
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			pi.WithNamedTasks(alias, func(wq *TaskQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type procinstPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProcInstPaginateOption
}

func newProcInstPaginateArgs(rv map[string]interface{}) *procinstPaginateArgs {
	args := &procinstPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &ProcInstOrder{Field: &ProcInstOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithProcInstOrder(order))
			}
		case *ProcInstOrder:
			if v != nil {
				args.opts = append(args.opts, WithProcInstOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ProcInstWhereInput); ok {
		args.opts = append(args.opts, WithProcInstFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TaskQuery) CollectFields(ctx context.Context, satisfies ...string) (*TaskQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TaskQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(opCtx, field.Selections, satisfies) {
		switch field.Name {
		case "procInst":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProcInstClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.withProcInst = query
		case "taskIdentities":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&IdentityLinkClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.WithNamedTaskIdentities(alias, func(wq *IdentityLinkQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type taskPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TaskPaginateOption
}

func newTaskPaginateArgs(rv map[string]interface{}) *taskPaginateArgs {
	args := &taskPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*TaskWhereInput); ok {
		args.opts = append(args.opts, WithTaskFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
