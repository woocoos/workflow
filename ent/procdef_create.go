// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/deployment"
	"github.com/woocoos/workflow/ent/procdef"
	"github.com/woocoos/workflow/ent/procinst"
)

// ProcDefCreate is the builder for creating a ProcDef entity.
type ProcDefCreate struct {
	config
	mutation *ProcDefMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (pdc *ProcDefCreate) SetCreatedBy(i int) *ProcDefCreate {
	pdc.mutation.SetCreatedBy(i)
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProcDefCreate) SetCreatedAt(t time.Time) *ProcDefCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableCreatedAt(t *time.Time) *ProcDefCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedBy sets the "updated_by" field.
func (pdc *ProcDefCreate) SetUpdatedBy(i int) *ProcDefCreate {
	pdc.mutation.SetUpdatedBy(i)
	return pdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableUpdatedBy(i *int) *ProcDefCreate {
	if i != nil {
		pdc.SetUpdatedBy(*i)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *ProcDefCreate) SetUpdatedAt(t time.Time) *ProcDefCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableUpdatedAt(t *time.Time) *ProcDefCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// SetDeploymentID sets the "deployment_id" field.
func (pdc *ProcDefCreate) SetDeploymentID(i int) *ProcDefCreate {
	pdc.mutation.SetDeploymentID(i)
	return pdc
}

// SetOrgID sets the "org_id" field.
func (pdc *ProcDefCreate) SetOrgID(i int) *ProcDefCreate {
	pdc.mutation.SetOrgID(i)
	return pdc
}

// SetAppID sets the "app_id" field.
func (pdc *ProcDefCreate) SetAppID(i int) *ProcDefCreate {
	pdc.mutation.SetAppID(i)
	return pdc
}

// SetCategory sets the "category" field.
func (pdc *ProcDefCreate) SetCategory(s string) *ProcDefCreate {
	pdc.mutation.SetCategory(s)
	return pdc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableCategory(s *string) *ProcDefCreate {
	if s != nil {
		pdc.SetCategory(*s)
	}
	return pdc
}

// SetName sets the "name" field.
func (pdc *ProcDefCreate) SetName(s string) *ProcDefCreate {
	pdc.mutation.SetName(s)
	return pdc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableName(s *string) *ProcDefCreate {
	if s != nil {
		pdc.SetName(*s)
	}
	return pdc
}

// SetKey sets the "key" field.
func (pdc *ProcDefCreate) SetKey(s string) *ProcDefCreate {
	pdc.mutation.SetKey(s)
	return pdc
}

// SetVersion sets the "version" field.
func (pdc *ProcDefCreate) SetVersion(i int32) *ProcDefCreate {
	pdc.mutation.SetVersion(i)
	return pdc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableVersion(i *int32) *ProcDefCreate {
	if i != nil {
		pdc.SetVersion(*i)
	}
	return pdc
}

// SetRevision sets the "revision" field.
func (pdc *ProcDefCreate) SetRevision(i int32) *ProcDefCreate {
	pdc.mutation.SetRevision(i)
	return pdc
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableRevision(i *int32) *ProcDefCreate {
	if i != nil {
		pdc.SetRevision(*i)
	}
	return pdc
}

// SetVersionTag sets the "version_tag" field.
func (pdc *ProcDefCreate) SetVersionTag(s string) *ProcDefCreate {
	pdc.mutation.SetVersionTag(s)
	return pdc
}

// SetNillableVersionTag sets the "version_tag" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableVersionTag(s *string) *ProcDefCreate {
	if s != nil {
		pdc.SetVersionTag(*s)
	}
	return pdc
}

// SetResourceName sets the "resource_name" field.
func (pdc *ProcDefCreate) SetResourceName(s string) *ProcDefCreate {
	pdc.mutation.SetResourceName(s)
	return pdc
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableResourceName(s *string) *ProcDefCreate {
	if s != nil {
		pdc.SetResourceName(*s)
	}
	return pdc
}

// SetDgrmResourceName sets the "dgrm_resource_name" field.
func (pdc *ProcDefCreate) SetDgrmResourceName(s string) *ProcDefCreate {
	pdc.mutation.SetDgrmResourceName(s)
	return pdc
}

// SetNillableDgrmResourceName sets the "dgrm_resource_name" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableDgrmResourceName(s *string) *ProcDefCreate {
	if s != nil {
		pdc.SetDgrmResourceName(*s)
	}
	return pdc
}

// SetStatus sets the "status" field.
func (pdc *ProcDefCreate) SetStatus(pr procdef.Status) *ProcDefCreate {
	pdc.mutation.SetStatus(pr)
	return pdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableStatus(pr *procdef.Status) *ProcDefCreate {
	if pr != nil {
		pdc.SetStatus(*pr)
	}
	return pdc
}

// SetResourceData sets the "resource_data" field.
func (pdc *ProcDefCreate) SetResourceData(b []byte) *ProcDefCreate {
	pdc.mutation.SetResourceData(b)
	return pdc
}

// SetID sets the "id" field.
func (pdc *ProcDefCreate) SetID(i int) *ProcDefCreate {
	pdc.mutation.SetID(i)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *ProcDefCreate) SetNillableID(i *int) *ProcDefCreate {
	if i != nil {
		pdc.SetID(*i)
	}
	return pdc
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (pdc *ProcDefCreate) SetDeployment(d *Deployment) *ProcDefCreate {
	return pdc.SetDeploymentID(d.ID)
}

// AddProcInstanceIDs adds the "proc_instances" edge to the ProcInst entity by IDs.
func (pdc *ProcDefCreate) AddProcInstanceIDs(ids ...int) *ProcDefCreate {
	pdc.mutation.AddProcInstanceIDs(ids...)
	return pdc
}

// AddProcInstances adds the "proc_instances" edges to the ProcInst entity.
func (pdc *ProcDefCreate) AddProcInstances(p ...*ProcInst) *ProcDefCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdc.AddProcInstanceIDs(ids...)
}

// Mutation returns the ProcDefMutation object of the builder.
func (pdc *ProcDefCreate) Mutation() *ProcDefMutation {
	return pdc.mutation
}

// Save creates the ProcDef in the database.
func (pdc *ProcDefCreate) Save(ctx context.Context) (*ProcDef, error) {
	if err := pdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*ProcDef, ProcDefMutation](ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProcDefCreate) SaveX(ctx context.Context) *ProcDef {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProcDefCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProcDefCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProcDefCreate) defaults() error {
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		if procdef.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized procdef.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := procdef.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.Status(); !ok {
		v := procdef.DefaultStatus
		pdc.mutation.SetStatus(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		if procdef.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized procdef.DefaultID (forgotten import ent/runtime?)")
		}
		v := procdef.DefaultID()
		pdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProcDefCreate) check() error {
	if _, ok := pdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ProcDef.created_by"`)}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcDef.created_at"`)}
	}
	if _, ok := pdc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment_id", err: errors.New(`ent: missing required field "ProcDef.deployment_id"`)}
	}
	if _, ok := pdc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "ProcDef.org_id"`)}
	}
	if _, ok := pdc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "ProcDef.app_id"`)}
	}
	if _, ok := pdc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ProcDef.key"`)}
	}
	if _, ok := pdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcDef.status"`)}
	}
	if v, ok := pdc.mutation.Status(); ok {
		if err := procdef.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProcDef.status": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment", err: errors.New(`ent: missing required edge "ProcDef.deployment"`)}
	}
	return nil
}

func (pdc *ProcDefCreate) sqlSave(ctx context.Context) (*ProcDef, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProcDefCreate) createSpec() (*ProcDef, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcDef{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(procdef.Table, sqlgraph.NewFieldSpec(procdef.FieldID, field.TypeInt))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pdc.mutation.CreatedBy(); ok {
		_spec.SetField(procdef.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(procdef.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedBy(); ok {
		_spec.SetField(procdef.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(procdef.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pdc.mutation.OrgID(); ok {
		_spec.SetField(procdef.FieldOrgID, field.TypeInt, value)
		_node.OrgID = value
	}
	if value, ok := pdc.mutation.AppID(); ok {
		_spec.SetField(procdef.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := pdc.mutation.Category(); ok {
		_spec.SetField(procdef.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pdc.mutation.Name(); ok {
		_spec.SetField(procdef.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pdc.mutation.Key(); ok {
		_spec.SetField(procdef.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := pdc.mutation.Version(); ok {
		_spec.SetField(procdef.FieldVersion, field.TypeInt32, value)
		_node.Version = value
	}
	if value, ok := pdc.mutation.Revision(); ok {
		_spec.SetField(procdef.FieldRevision, field.TypeInt32, value)
		_node.Revision = value
	}
	if value, ok := pdc.mutation.VersionTag(); ok {
		_spec.SetField(procdef.FieldVersionTag, field.TypeString, value)
		_node.VersionTag = value
	}
	if value, ok := pdc.mutation.ResourceName(); ok {
		_spec.SetField(procdef.FieldResourceName, field.TypeString, value)
		_node.ResourceName = value
	}
	if value, ok := pdc.mutation.DgrmResourceName(); ok {
		_spec.SetField(procdef.FieldDgrmResourceName, field.TypeString, value)
		_node.DgrmResourceName = value
	}
	if value, ok := pdc.mutation.Status(); ok {
		_spec.SetField(procdef.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pdc.mutation.ResourceData(); ok {
		_spec.SetField(procdef.FieldResourceData, field.TypeBytes, value)
		_node.ResourceData = value
	}
	if nodes := pdc.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procdef.DeploymentTable,
			Columns: []string{procdef.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeploymentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdc.mutation.ProcInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procdef.ProcInstancesTable,
			Columns: []string{procdef.ProcInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procinst.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProcDefCreateBulk is the builder for creating many ProcDef entities in bulk.
type ProcDefCreateBulk struct {
	config
	builders []*ProcDefCreate
}

// Save creates the ProcDef entities in the database.
func (pdcb *ProcDefCreateBulk) Save(ctx context.Context) ([]*ProcDef, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProcDef, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcDefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProcDefCreateBulk) SaveX(ctx context.Context) []*ProcDef {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProcDefCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProcDefCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
