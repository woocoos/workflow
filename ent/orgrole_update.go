// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/orgrole"
	"github.com/woocoos/workflow/ent/orgroleuser"
	"github.com/woocoos/workflow/ent/orguser"
	"github.com/woocoos/workflow/ent/predicate"

	"github.com/woocoos/workflow/ent/internal"
)

// OrgRoleUpdate is the builder for updating OrgRole entities.
type OrgRoleUpdate struct {
	config
	hooks    []Hook
	mutation *OrgRoleMutation
}

// Where appends a list predicates to the OrgRoleUpdate builder.
func (oru *OrgRoleUpdate) Where(ps ...predicate.OrgRole) *OrgRoleUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetKind sets the "kind" field.
func (oru *OrgRoleUpdate) SetKind(o orgrole.Kind) *OrgRoleUpdate {
	oru.mutation.SetKind(o)
	return oru
}

// SetName sets the "name" field.
func (oru *OrgRoleUpdate) SetName(s string) *OrgRoleUpdate {
	oru.mutation.SetName(s)
	return oru
}

// AddOrgUserIDs adds the "org_users" edge to the OrgUser entity by IDs.
func (oru *OrgRoleUpdate) AddOrgUserIDs(ids ...int) *OrgRoleUpdate {
	oru.mutation.AddOrgUserIDs(ids...)
	return oru
}

// AddOrgUsers adds the "org_users" edges to the OrgUser entity.
func (oru *OrgRoleUpdate) AddOrgUsers(o ...*OrgUser) *OrgRoleUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.AddOrgUserIDs(ids...)
}

// AddOrgRoleUserIDs adds the "org_role_user" edge to the OrgRoleUser entity by IDs.
func (oru *OrgRoleUpdate) AddOrgRoleUserIDs(ids ...int) *OrgRoleUpdate {
	oru.mutation.AddOrgRoleUserIDs(ids...)
	return oru
}

// AddOrgRoleUser adds the "org_role_user" edges to the OrgRoleUser entity.
func (oru *OrgRoleUpdate) AddOrgRoleUser(o ...*OrgRoleUser) *OrgRoleUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.AddOrgRoleUserIDs(ids...)
}

// Mutation returns the OrgRoleMutation object of the builder.
func (oru *OrgRoleUpdate) Mutation() *OrgRoleMutation {
	return oru.mutation
}

// ClearOrgUsers clears all "org_users" edges to the OrgUser entity.
func (oru *OrgRoleUpdate) ClearOrgUsers() *OrgRoleUpdate {
	oru.mutation.ClearOrgUsers()
	return oru
}

// RemoveOrgUserIDs removes the "org_users" edge to OrgUser entities by IDs.
func (oru *OrgRoleUpdate) RemoveOrgUserIDs(ids ...int) *OrgRoleUpdate {
	oru.mutation.RemoveOrgUserIDs(ids...)
	return oru
}

// RemoveOrgUsers removes "org_users" edges to OrgUser entities.
func (oru *OrgRoleUpdate) RemoveOrgUsers(o ...*OrgUser) *OrgRoleUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.RemoveOrgUserIDs(ids...)
}

// ClearOrgRoleUser clears all "org_role_user" edges to the OrgRoleUser entity.
func (oru *OrgRoleUpdate) ClearOrgRoleUser() *OrgRoleUpdate {
	oru.mutation.ClearOrgRoleUser()
	return oru
}

// RemoveOrgRoleUserIDs removes the "org_role_user" edge to OrgRoleUser entities by IDs.
func (oru *OrgRoleUpdate) RemoveOrgRoleUserIDs(ids ...int) *OrgRoleUpdate {
	oru.mutation.RemoveOrgRoleUserIDs(ids...)
	return oru
}

// RemoveOrgRoleUser removes "org_role_user" edges to OrgRoleUser entities.
func (oru *OrgRoleUpdate) RemoveOrgRoleUser(o ...*OrgRoleUser) *OrgRoleUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.RemoveOrgRoleUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OrgRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OrgRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OrgRoleUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OrgRoleUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OrgRoleUpdate) check() error {
	if v, ok := oru.mutation.Kind(); ok {
		if err := orgrole.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "OrgRole.kind": %w`, err)}
		}
	}
	return nil
}

func (oru *OrgRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgrole.Table, orgrole.Columns, sqlgraph.NewFieldSpec(orgrole.FieldID, field.TypeInt))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oru.mutation.OrgIDCleared() {
		_spec.ClearField(orgrole.FieldOrgID, field.TypeInt)
	}
	if value, ok := oru.mutation.Kind(); ok {
		_spec.SetField(orgrole.FieldKind, field.TypeEnum, value)
	}
	if value, ok := oru.mutation.Name(); ok {
		_spec.SetField(orgrole.FieldName, field.TypeString, value)
	}
	if oru.mutation.OrgUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgrole.OrgUsersTable,
			Columns: orgrole.OrgUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oru.schemaConfig.OrgRoleUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedOrgUsersIDs(); len(nodes) > 0 && !oru.mutation.OrgUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgrole.OrgUsersTable,
			Columns: orgrole.OrgUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oru.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OrgUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgrole.OrgUsersTable,
			Columns: orgrole.OrgUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oru.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.OrgRoleUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgrole.OrgRoleUserTable,
			Columns: []string{orgrole.OrgRoleUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oru.schemaConfig.OrgRoleUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedOrgRoleUserIDs(); len(nodes) > 0 && !oru.mutation.OrgRoleUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgrole.OrgRoleUserTable,
			Columns: []string{orgrole.OrgRoleUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oru.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OrgRoleUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgrole.OrgRoleUserTable,
			Columns: []string{orgrole.OrgRoleUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oru.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oru.schemaConfig.OrgRole
	ctx = internal.NewSchemaConfigContext(ctx, oru.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OrgRoleUpdateOne is the builder for updating a single OrgRole entity.
type OrgRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgRoleMutation
}

// SetKind sets the "kind" field.
func (oruo *OrgRoleUpdateOne) SetKind(o orgrole.Kind) *OrgRoleUpdateOne {
	oruo.mutation.SetKind(o)
	return oruo
}

// SetName sets the "name" field.
func (oruo *OrgRoleUpdateOne) SetName(s string) *OrgRoleUpdateOne {
	oruo.mutation.SetName(s)
	return oruo
}

// AddOrgUserIDs adds the "org_users" edge to the OrgUser entity by IDs.
func (oruo *OrgRoleUpdateOne) AddOrgUserIDs(ids ...int) *OrgRoleUpdateOne {
	oruo.mutation.AddOrgUserIDs(ids...)
	return oruo
}

// AddOrgUsers adds the "org_users" edges to the OrgUser entity.
func (oruo *OrgRoleUpdateOne) AddOrgUsers(o ...*OrgUser) *OrgRoleUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.AddOrgUserIDs(ids...)
}

// AddOrgRoleUserIDs adds the "org_role_user" edge to the OrgRoleUser entity by IDs.
func (oruo *OrgRoleUpdateOne) AddOrgRoleUserIDs(ids ...int) *OrgRoleUpdateOne {
	oruo.mutation.AddOrgRoleUserIDs(ids...)
	return oruo
}

// AddOrgRoleUser adds the "org_role_user" edges to the OrgRoleUser entity.
func (oruo *OrgRoleUpdateOne) AddOrgRoleUser(o ...*OrgRoleUser) *OrgRoleUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.AddOrgRoleUserIDs(ids...)
}

// Mutation returns the OrgRoleMutation object of the builder.
func (oruo *OrgRoleUpdateOne) Mutation() *OrgRoleMutation {
	return oruo.mutation
}

// ClearOrgUsers clears all "org_users" edges to the OrgUser entity.
func (oruo *OrgRoleUpdateOne) ClearOrgUsers() *OrgRoleUpdateOne {
	oruo.mutation.ClearOrgUsers()
	return oruo
}

// RemoveOrgUserIDs removes the "org_users" edge to OrgUser entities by IDs.
func (oruo *OrgRoleUpdateOne) RemoveOrgUserIDs(ids ...int) *OrgRoleUpdateOne {
	oruo.mutation.RemoveOrgUserIDs(ids...)
	return oruo
}

// RemoveOrgUsers removes "org_users" edges to OrgUser entities.
func (oruo *OrgRoleUpdateOne) RemoveOrgUsers(o ...*OrgUser) *OrgRoleUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.RemoveOrgUserIDs(ids...)
}

// ClearOrgRoleUser clears all "org_role_user" edges to the OrgRoleUser entity.
func (oruo *OrgRoleUpdateOne) ClearOrgRoleUser() *OrgRoleUpdateOne {
	oruo.mutation.ClearOrgRoleUser()
	return oruo
}

// RemoveOrgRoleUserIDs removes the "org_role_user" edge to OrgRoleUser entities by IDs.
func (oruo *OrgRoleUpdateOne) RemoveOrgRoleUserIDs(ids ...int) *OrgRoleUpdateOne {
	oruo.mutation.RemoveOrgRoleUserIDs(ids...)
	return oruo
}

// RemoveOrgRoleUser removes "org_role_user" edges to OrgRoleUser entities.
func (oruo *OrgRoleUpdateOne) RemoveOrgRoleUser(o ...*OrgRoleUser) *OrgRoleUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.RemoveOrgRoleUserIDs(ids...)
}

// Where appends a list predicates to the OrgRoleUpdate builder.
func (oruo *OrgRoleUpdateOne) Where(ps ...predicate.OrgRole) *OrgRoleUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OrgRoleUpdateOne) Select(field string, fields ...string) *OrgRoleUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OrgRole entity.
func (oruo *OrgRoleUpdateOne) Save(ctx context.Context) (*OrgRole, error) {
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OrgRoleUpdateOne) SaveX(ctx context.Context) *OrgRole {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OrgRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OrgRoleUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OrgRoleUpdateOne) check() error {
	if v, ok := oruo.mutation.Kind(); ok {
		if err := orgrole.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "OrgRole.kind": %w`, err)}
		}
	}
	return nil
}

func (oruo *OrgRoleUpdateOne) sqlSave(ctx context.Context) (_node *OrgRole, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgrole.Table, orgrole.Columns, sqlgraph.NewFieldSpec(orgrole.FieldID, field.TypeInt))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrgRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgrole.FieldID)
		for _, f := range fields {
			if !orgrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orgrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oruo.mutation.OrgIDCleared() {
		_spec.ClearField(orgrole.FieldOrgID, field.TypeInt)
	}
	if value, ok := oruo.mutation.Kind(); ok {
		_spec.SetField(orgrole.FieldKind, field.TypeEnum, value)
	}
	if value, ok := oruo.mutation.Name(); ok {
		_spec.SetField(orgrole.FieldName, field.TypeString, value)
	}
	if oruo.mutation.OrgUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgrole.OrgUsersTable,
			Columns: orgrole.OrgUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oruo.schemaConfig.OrgRoleUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedOrgUsersIDs(); len(nodes) > 0 && !oruo.mutation.OrgUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgrole.OrgUsersTable,
			Columns: orgrole.OrgUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oruo.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OrgUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgrole.OrgUsersTable,
			Columns: orgrole.OrgUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oruo.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.OrgRoleUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgrole.OrgRoleUserTable,
			Columns: []string{orgrole.OrgRoleUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oruo.schemaConfig.OrgRoleUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedOrgRoleUserIDs(); len(nodes) > 0 && !oruo.mutation.OrgRoleUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgrole.OrgRoleUserTable,
			Columns: []string{orgrole.OrgRoleUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oruo.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OrgRoleUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgrole.OrgRoleUserTable,
			Columns: []string{orgrole.OrgRoleUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt),
			},
		}
		edge.Schema = oruo.schemaConfig.OrgRoleUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oruo.schemaConfig.OrgRole
	ctx = internal.NewSchemaConfigContext(ctx, oruo.schemaConfig)
	_node = &OrgRole{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
