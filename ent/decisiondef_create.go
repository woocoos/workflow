// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/decisiondef"
	"github.com/woocoos/workflow/ent/decisionreqdef"
)

// DecisionDefCreate is the builder for creating a DecisionDef entity.
type DecisionDefCreate struct {
	config
	mutation *DecisionDefMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (ddc *DecisionDefCreate) SetCreatedBy(i int) *DecisionDefCreate {
	ddc.mutation.SetCreatedBy(i)
	return ddc
}

// SetCreatedAt sets the "created_at" field.
func (ddc *DecisionDefCreate) SetCreatedAt(t time.Time) *DecisionDefCreate {
	ddc.mutation.SetCreatedAt(t)
	return ddc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableCreatedAt(t *time.Time) *DecisionDefCreate {
	if t != nil {
		ddc.SetCreatedAt(*t)
	}
	return ddc
}

// SetUpdatedBy sets the "updated_by" field.
func (ddc *DecisionDefCreate) SetUpdatedBy(i int) *DecisionDefCreate {
	ddc.mutation.SetUpdatedBy(i)
	return ddc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableUpdatedBy(i *int) *DecisionDefCreate {
	if i != nil {
		ddc.SetUpdatedBy(*i)
	}
	return ddc
}

// SetUpdatedAt sets the "updated_at" field.
func (ddc *DecisionDefCreate) SetUpdatedAt(t time.Time) *DecisionDefCreate {
	ddc.mutation.SetUpdatedAt(t)
	return ddc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableUpdatedAt(t *time.Time) *DecisionDefCreate {
	if t != nil {
		ddc.SetUpdatedAt(*t)
	}
	return ddc
}

// SetTenantID sets the "tenant_id" field.
func (ddc *DecisionDefCreate) SetTenantID(i int) *DecisionDefCreate {
	ddc.mutation.SetTenantID(i)
	return ddc
}

// SetDeploymentID sets the "deployment_id" field.
func (ddc *DecisionDefCreate) SetDeploymentID(i int) *DecisionDefCreate {
	ddc.mutation.SetDeploymentID(i)
	return ddc
}

// SetAppID sets the "app_id" field.
func (ddc *DecisionDefCreate) SetAppID(i int) *DecisionDefCreate {
	ddc.mutation.SetAppID(i)
	return ddc
}

// SetReqDefID sets the "req_def_id" field.
func (ddc *DecisionDefCreate) SetReqDefID(i int) *DecisionDefCreate {
	ddc.mutation.SetReqDefID(i)
	return ddc
}

// SetCategory sets the "category" field.
func (ddc *DecisionDefCreate) SetCategory(s string) *DecisionDefCreate {
	ddc.mutation.SetCategory(s)
	return ddc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableCategory(s *string) *DecisionDefCreate {
	if s != nil {
		ddc.SetCategory(*s)
	}
	return ddc
}

// SetName sets the "name" field.
func (ddc *DecisionDefCreate) SetName(s string) *DecisionDefCreate {
	ddc.mutation.SetName(s)
	return ddc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableName(s *string) *DecisionDefCreate {
	if s != nil {
		ddc.SetName(*s)
	}
	return ddc
}

// SetKey sets the "key" field.
func (ddc *DecisionDefCreate) SetKey(s string) *DecisionDefCreate {
	ddc.mutation.SetKey(s)
	return ddc
}

// SetReqDefKey sets the "req_def_key" field.
func (ddc *DecisionDefCreate) SetReqDefKey(s string) *DecisionDefCreate {
	ddc.mutation.SetReqDefKey(s)
	return ddc
}

// SetVersion sets the "version" field.
func (ddc *DecisionDefCreate) SetVersion(i int32) *DecisionDefCreate {
	ddc.mutation.SetVersion(i)
	return ddc
}

// SetRevision sets the "revision" field.
func (ddc *DecisionDefCreate) SetRevision(i int32) *DecisionDefCreate {
	ddc.mutation.SetRevision(i)
	return ddc
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableRevision(i *int32) *DecisionDefCreate {
	if i != nil {
		ddc.SetRevision(*i)
	}
	return ddc
}

// SetVersionTag sets the "version_tag" field.
func (ddc *DecisionDefCreate) SetVersionTag(s string) *DecisionDefCreate {
	ddc.mutation.SetVersionTag(s)
	return ddc
}

// SetNillableVersionTag sets the "version_tag" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableVersionTag(s *string) *DecisionDefCreate {
	if s != nil {
		ddc.SetVersionTag(*s)
	}
	return ddc
}

// SetID sets the "id" field.
func (ddc *DecisionDefCreate) SetID(i int) *DecisionDefCreate {
	ddc.mutation.SetID(i)
	return ddc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ddc *DecisionDefCreate) SetNillableID(i *int) *DecisionDefCreate {
	if i != nil {
		ddc.SetID(*i)
	}
	return ddc
}

// SetReqDef sets the "req_def" edge to the DecisionReqDef entity.
func (ddc *DecisionDefCreate) SetReqDef(d *DecisionReqDef) *DecisionDefCreate {
	return ddc.SetReqDefID(d.ID)
}

// Mutation returns the DecisionDefMutation object of the builder.
func (ddc *DecisionDefCreate) Mutation() *DecisionDefMutation {
	return ddc.mutation
}

// Save creates the DecisionDef in the database.
func (ddc *DecisionDefCreate) Save(ctx context.Context) (*DecisionDef, error) {
	if err := ddc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ddc.sqlSave, ddc.mutation, ddc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ddc *DecisionDefCreate) SaveX(ctx context.Context) *DecisionDef {
	v, err := ddc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddc *DecisionDefCreate) Exec(ctx context.Context) error {
	_, err := ddc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddc *DecisionDefCreate) ExecX(ctx context.Context) {
	if err := ddc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ddc *DecisionDefCreate) defaults() error {
	if _, ok := ddc.mutation.CreatedAt(); !ok {
		if decisiondef.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized decisiondef.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := decisiondef.DefaultCreatedAt()
		ddc.mutation.SetCreatedAt(v)
	}
	if _, ok := ddc.mutation.ID(); !ok {
		if decisiondef.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized decisiondef.DefaultID (forgotten import ent/runtime?)")
		}
		v := decisiondef.DefaultID()
		ddc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ddc *DecisionDefCreate) check() error {
	if _, ok := ddc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "DecisionDef.created_by"`)}
	}
	if _, ok := ddc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DecisionDef.created_at"`)}
	}
	if _, ok := ddc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DecisionDef.tenant_id"`)}
	}
	if _, ok := ddc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment_id", err: errors.New(`ent: missing required field "DecisionDef.deployment_id"`)}
	}
	if _, ok := ddc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "DecisionDef.app_id"`)}
	}
	if _, ok := ddc.mutation.ReqDefID(); !ok {
		return &ValidationError{Name: "req_def_id", err: errors.New(`ent: missing required field "DecisionDef.req_def_id"`)}
	}
	if _, ok := ddc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "DecisionDef.key"`)}
	}
	if _, ok := ddc.mutation.ReqDefKey(); !ok {
		return &ValidationError{Name: "req_def_key", err: errors.New(`ent: missing required field "DecisionDef.req_def_key"`)}
	}
	if _, ok := ddc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "DecisionDef.version"`)}
	}
	if _, ok := ddc.mutation.ReqDefID(); !ok {
		return &ValidationError{Name: "req_def", err: errors.New(`ent: missing required edge "DecisionDef.req_def"`)}
	}
	return nil
}

func (ddc *DecisionDefCreate) sqlSave(ctx context.Context) (*DecisionDef, error) {
	if err := ddc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ddc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ddc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ddc.mutation.id = &_node.ID
	ddc.mutation.done = true
	return _node, nil
}

func (ddc *DecisionDefCreate) createSpec() (*DecisionDef, *sqlgraph.CreateSpec) {
	var (
		_node = &DecisionDef{config: ddc.config}
		_spec = sqlgraph.NewCreateSpec(decisiondef.Table, sqlgraph.NewFieldSpec(decisiondef.FieldID, field.TypeInt))
	)
	_spec.Schema = ddc.schemaConfig.DecisionDef
	_spec.OnConflict = ddc.conflict
	if id, ok := ddc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ddc.mutation.CreatedBy(); ok {
		_spec.SetField(decisiondef.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := ddc.mutation.CreatedAt(); ok {
		_spec.SetField(decisiondef.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ddc.mutation.UpdatedBy(); ok {
		_spec.SetField(decisiondef.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := ddc.mutation.UpdatedAt(); ok {
		_spec.SetField(decisiondef.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ddc.mutation.TenantID(); ok {
		_spec.SetField(decisiondef.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := ddc.mutation.DeploymentID(); ok {
		_spec.SetField(decisiondef.FieldDeploymentID, field.TypeInt, value)
		_node.DeploymentID = value
	}
	if value, ok := ddc.mutation.AppID(); ok {
		_spec.SetField(decisiondef.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := ddc.mutation.Category(); ok {
		_spec.SetField(decisiondef.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := ddc.mutation.Name(); ok {
		_spec.SetField(decisiondef.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ddc.mutation.Key(); ok {
		_spec.SetField(decisiondef.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ddc.mutation.ReqDefKey(); ok {
		_spec.SetField(decisiondef.FieldReqDefKey, field.TypeString, value)
		_node.ReqDefKey = value
	}
	if value, ok := ddc.mutation.Version(); ok {
		_spec.SetField(decisiondef.FieldVersion, field.TypeInt32, value)
		_node.Version = value
	}
	if value, ok := ddc.mutation.Revision(); ok {
		_spec.SetField(decisiondef.FieldRevision, field.TypeInt32, value)
		_node.Revision = value
	}
	if value, ok := ddc.mutation.VersionTag(); ok {
		_spec.SetField(decisiondef.FieldVersionTag, field.TypeString, value)
		_node.VersionTag = value
	}
	if nodes := ddc.mutation.ReqDefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   decisiondef.ReqDefTable,
			Columns: []string{decisiondef.ReqDefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt),
			},
		}
		edge.Schema = ddc.schemaConfig.DecisionDef
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReqDefID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DecisionDef.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DecisionDefUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ddc *DecisionDefCreate) OnConflict(opts ...sql.ConflictOption) *DecisionDefUpsertOne {
	ddc.conflict = opts
	return &DecisionDefUpsertOne{
		create: ddc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DecisionDef.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ddc *DecisionDefCreate) OnConflictColumns(columns ...string) *DecisionDefUpsertOne {
	ddc.conflict = append(ddc.conflict, sql.ConflictColumns(columns...))
	return &DecisionDefUpsertOne{
		create: ddc,
	}
}

type (
	// DecisionDefUpsertOne is the builder for "upsert"-ing
	//  one DecisionDef node.
	DecisionDefUpsertOne struct {
		create *DecisionDefCreate
	}

	// DecisionDefUpsert is the "OnConflict" setter.
	DecisionDefUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *DecisionDefUpsert) SetUpdatedBy(v int) *DecisionDefUpsert {
	u.Set(decisiondef.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateUpdatedBy() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DecisionDefUpsert) AddUpdatedBy(v int) *DecisionDefUpsert {
	u.Add(decisiondef.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DecisionDefUpsert) ClearUpdatedBy() *DecisionDefUpsert {
	u.SetNull(decisiondef.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DecisionDefUpsert) SetUpdatedAt(v time.Time) *DecisionDefUpsert {
	u.Set(decisiondef.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateUpdatedAt() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DecisionDefUpsert) ClearUpdatedAt() *DecisionDefUpsert {
	u.SetNull(decisiondef.FieldUpdatedAt)
	return u
}

// SetReqDefID sets the "req_def_id" field.
func (u *DecisionDefUpsert) SetReqDefID(v int) *DecisionDefUpsert {
	u.Set(decisiondef.FieldReqDefID, v)
	return u
}

// UpdateReqDefID sets the "req_def_id" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateReqDefID() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldReqDefID)
	return u
}

// SetCategory sets the "category" field.
func (u *DecisionDefUpsert) SetCategory(v string) *DecisionDefUpsert {
	u.Set(decisiondef.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateCategory() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldCategory)
	return u
}

// ClearCategory clears the value of the "category" field.
func (u *DecisionDefUpsert) ClearCategory() *DecisionDefUpsert {
	u.SetNull(decisiondef.FieldCategory)
	return u
}

// SetName sets the "name" field.
func (u *DecisionDefUpsert) SetName(v string) *DecisionDefUpsert {
	u.Set(decisiondef.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateName() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DecisionDefUpsert) ClearName() *DecisionDefUpsert {
	u.SetNull(decisiondef.FieldName)
	return u
}

// SetKey sets the "key" field.
func (u *DecisionDefUpsert) SetKey(v string) *DecisionDefUpsert {
	u.Set(decisiondef.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateKey() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldKey)
	return u
}

// SetReqDefKey sets the "req_def_key" field.
func (u *DecisionDefUpsert) SetReqDefKey(v string) *DecisionDefUpsert {
	u.Set(decisiondef.FieldReqDefKey, v)
	return u
}

// UpdateReqDefKey sets the "req_def_key" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateReqDefKey() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldReqDefKey)
	return u
}

// SetVersion sets the "version" field.
func (u *DecisionDefUpsert) SetVersion(v int32) *DecisionDefUpsert {
	u.Set(decisiondef.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateVersion() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *DecisionDefUpsert) AddVersion(v int32) *DecisionDefUpsert {
	u.Add(decisiondef.FieldVersion, v)
	return u
}

// SetRevision sets the "revision" field.
func (u *DecisionDefUpsert) SetRevision(v int32) *DecisionDefUpsert {
	u.Set(decisiondef.FieldRevision, v)
	return u
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateRevision() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldRevision)
	return u
}

// AddRevision adds v to the "revision" field.
func (u *DecisionDefUpsert) AddRevision(v int32) *DecisionDefUpsert {
	u.Add(decisiondef.FieldRevision, v)
	return u
}

// ClearRevision clears the value of the "revision" field.
func (u *DecisionDefUpsert) ClearRevision() *DecisionDefUpsert {
	u.SetNull(decisiondef.FieldRevision)
	return u
}

// SetVersionTag sets the "version_tag" field.
func (u *DecisionDefUpsert) SetVersionTag(v string) *DecisionDefUpsert {
	u.Set(decisiondef.FieldVersionTag, v)
	return u
}

// UpdateVersionTag sets the "version_tag" field to the value that was provided on create.
func (u *DecisionDefUpsert) UpdateVersionTag() *DecisionDefUpsert {
	u.SetExcluded(decisiondef.FieldVersionTag)
	return u
}

// ClearVersionTag clears the value of the "version_tag" field.
func (u *DecisionDefUpsert) ClearVersionTag() *DecisionDefUpsert {
	u.SetNull(decisiondef.FieldVersionTag)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DecisionDef.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(decisiondef.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DecisionDefUpsertOne) UpdateNewValues() *DecisionDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(decisiondef.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(decisiondef.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(decisiondef.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(decisiondef.FieldTenantID)
		}
		if _, exists := u.create.mutation.DeploymentID(); exists {
			s.SetIgnore(decisiondef.FieldDeploymentID)
		}
		if _, exists := u.create.mutation.AppID(); exists {
			s.SetIgnore(decisiondef.FieldAppID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DecisionDef.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DecisionDefUpsertOne) Ignore() *DecisionDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DecisionDefUpsertOne) DoNothing() *DecisionDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DecisionDefCreate.OnConflict
// documentation for more info.
func (u *DecisionDefUpsertOne) Update(set func(*DecisionDefUpsert)) *DecisionDefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DecisionDefUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DecisionDefUpsertOne) SetUpdatedBy(v int) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DecisionDefUpsertOne) AddUpdatedBy(v int) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateUpdatedBy() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DecisionDefUpsertOne) ClearUpdatedBy() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DecisionDefUpsertOne) SetUpdatedAt(v time.Time) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateUpdatedAt() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DecisionDefUpsertOne) ClearUpdatedAt() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetReqDefID sets the "req_def_id" field.
func (u *DecisionDefUpsertOne) SetReqDefID(v int) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetReqDefID(v)
	})
}

// UpdateReqDefID sets the "req_def_id" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateReqDefID() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateReqDefID()
	})
}

// SetCategory sets the "category" field.
func (u *DecisionDefUpsertOne) SetCategory(v string) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateCategory() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *DecisionDefUpsertOne) ClearCategory() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearCategory()
	})
}

// SetName sets the "name" field.
func (u *DecisionDefUpsertOne) SetName(v string) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateName() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DecisionDefUpsertOne) ClearName() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearName()
	})
}

// SetKey sets the "key" field.
func (u *DecisionDefUpsertOne) SetKey(v string) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateKey() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateKey()
	})
}

// SetReqDefKey sets the "req_def_key" field.
func (u *DecisionDefUpsertOne) SetReqDefKey(v string) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetReqDefKey(v)
	})
}

// UpdateReqDefKey sets the "req_def_key" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateReqDefKey() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateReqDefKey()
	})
}

// SetVersion sets the "version" field.
func (u *DecisionDefUpsertOne) SetVersion(v int32) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *DecisionDefUpsertOne) AddVersion(v int32) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateVersion() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateVersion()
	})
}

// SetRevision sets the "revision" field.
func (u *DecisionDefUpsertOne) SetRevision(v int32) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetRevision(v)
	})
}

// AddRevision adds v to the "revision" field.
func (u *DecisionDefUpsertOne) AddRevision(v int32) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.AddRevision(v)
	})
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateRevision() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateRevision()
	})
}

// ClearRevision clears the value of the "revision" field.
func (u *DecisionDefUpsertOne) ClearRevision() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearRevision()
	})
}

// SetVersionTag sets the "version_tag" field.
func (u *DecisionDefUpsertOne) SetVersionTag(v string) *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetVersionTag(v)
	})
}

// UpdateVersionTag sets the "version_tag" field to the value that was provided on create.
func (u *DecisionDefUpsertOne) UpdateVersionTag() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateVersionTag()
	})
}

// ClearVersionTag clears the value of the "version_tag" field.
func (u *DecisionDefUpsertOne) ClearVersionTag() *DecisionDefUpsertOne {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearVersionTag()
	})
}

// Exec executes the query.
func (u *DecisionDefUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DecisionDefCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DecisionDefUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DecisionDefUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DecisionDefUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DecisionDefCreateBulk is the builder for creating many DecisionDef entities in bulk.
type DecisionDefCreateBulk struct {
	config
	builders []*DecisionDefCreate
	conflict []sql.ConflictOption
}

// Save creates the DecisionDef entities in the database.
func (ddcb *DecisionDefCreateBulk) Save(ctx context.Context) ([]*DecisionDef, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ddcb.builders))
	nodes := make([]*DecisionDef, len(ddcb.builders))
	mutators := make([]Mutator, len(ddcb.builders))
	for i := range ddcb.builders {
		func(i int, root context.Context) {
			builder := ddcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DecisionDefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ddcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ddcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ddcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ddcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ddcb *DecisionDefCreateBulk) SaveX(ctx context.Context) []*DecisionDef {
	v, err := ddcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddcb *DecisionDefCreateBulk) Exec(ctx context.Context) error {
	_, err := ddcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddcb *DecisionDefCreateBulk) ExecX(ctx context.Context) {
	if err := ddcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DecisionDef.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DecisionDefUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ddcb *DecisionDefCreateBulk) OnConflict(opts ...sql.ConflictOption) *DecisionDefUpsertBulk {
	ddcb.conflict = opts
	return &DecisionDefUpsertBulk{
		create: ddcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DecisionDef.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ddcb *DecisionDefCreateBulk) OnConflictColumns(columns ...string) *DecisionDefUpsertBulk {
	ddcb.conflict = append(ddcb.conflict, sql.ConflictColumns(columns...))
	return &DecisionDefUpsertBulk{
		create: ddcb,
	}
}

// DecisionDefUpsertBulk is the builder for "upsert"-ing
// a bulk of DecisionDef nodes.
type DecisionDefUpsertBulk struct {
	create *DecisionDefCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DecisionDef.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(decisiondef.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DecisionDefUpsertBulk) UpdateNewValues() *DecisionDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(decisiondef.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(decisiondef.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(decisiondef.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(decisiondef.FieldTenantID)
			}
			if _, exists := b.mutation.DeploymentID(); exists {
				s.SetIgnore(decisiondef.FieldDeploymentID)
			}
			if _, exists := b.mutation.AppID(); exists {
				s.SetIgnore(decisiondef.FieldAppID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DecisionDef.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DecisionDefUpsertBulk) Ignore() *DecisionDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DecisionDefUpsertBulk) DoNothing() *DecisionDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DecisionDefCreateBulk.OnConflict
// documentation for more info.
func (u *DecisionDefUpsertBulk) Update(set func(*DecisionDefUpsert)) *DecisionDefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DecisionDefUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DecisionDefUpsertBulk) SetUpdatedBy(v int) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DecisionDefUpsertBulk) AddUpdatedBy(v int) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateUpdatedBy() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DecisionDefUpsertBulk) ClearUpdatedBy() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DecisionDefUpsertBulk) SetUpdatedAt(v time.Time) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateUpdatedAt() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DecisionDefUpsertBulk) ClearUpdatedAt() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetReqDefID sets the "req_def_id" field.
func (u *DecisionDefUpsertBulk) SetReqDefID(v int) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetReqDefID(v)
	})
}

// UpdateReqDefID sets the "req_def_id" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateReqDefID() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateReqDefID()
	})
}

// SetCategory sets the "category" field.
func (u *DecisionDefUpsertBulk) SetCategory(v string) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateCategory() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *DecisionDefUpsertBulk) ClearCategory() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearCategory()
	})
}

// SetName sets the "name" field.
func (u *DecisionDefUpsertBulk) SetName(v string) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateName() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DecisionDefUpsertBulk) ClearName() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearName()
	})
}

// SetKey sets the "key" field.
func (u *DecisionDefUpsertBulk) SetKey(v string) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateKey() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateKey()
	})
}

// SetReqDefKey sets the "req_def_key" field.
func (u *DecisionDefUpsertBulk) SetReqDefKey(v string) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetReqDefKey(v)
	})
}

// UpdateReqDefKey sets the "req_def_key" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateReqDefKey() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateReqDefKey()
	})
}

// SetVersion sets the "version" field.
func (u *DecisionDefUpsertBulk) SetVersion(v int32) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *DecisionDefUpsertBulk) AddVersion(v int32) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateVersion() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateVersion()
	})
}

// SetRevision sets the "revision" field.
func (u *DecisionDefUpsertBulk) SetRevision(v int32) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetRevision(v)
	})
}

// AddRevision adds v to the "revision" field.
func (u *DecisionDefUpsertBulk) AddRevision(v int32) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.AddRevision(v)
	})
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateRevision() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateRevision()
	})
}

// ClearRevision clears the value of the "revision" field.
func (u *DecisionDefUpsertBulk) ClearRevision() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearRevision()
	})
}

// SetVersionTag sets the "version_tag" field.
func (u *DecisionDefUpsertBulk) SetVersionTag(v string) *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.SetVersionTag(v)
	})
}

// UpdateVersionTag sets the "version_tag" field to the value that was provided on create.
func (u *DecisionDefUpsertBulk) UpdateVersionTag() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.UpdateVersionTag()
	})
}

// ClearVersionTag clears the value of the "version_tag" field.
func (u *DecisionDefUpsertBulk) ClearVersionTag() *DecisionDefUpsertBulk {
	return u.Update(func(s *DecisionDefUpsert) {
		s.ClearVersionTag()
	})
}

// Exec executes the query.
func (u *DecisionDefUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DecisionDefCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DecisionDefCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DecisionDefUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
