// Code generated by ent, DO NOT EDIT.

package orgroleuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orgroleuser type in the database.
	Label = "org_role_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrgRoleID holds the string denoting the org_role_id field in the database.
	FieldOrgRoleID = "org_role_id"
	// FieldOrgUserID holds the string denoting the org_user_id field in the database.
	FieldOrgUserID = "org_user_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// EdgeOrgRole holds the string denoting the org_role edge name in mutations.
	EdgeOrgRole = "org_role"
	// EdgeOrgUser holds the string denoting the org_user edge name in mutations.
	EdgeOrgUser = "org_user"
	// Table holds the table name of the orgroleuser in the database.
	Table = "org_role_user"
	// OrgRoleTable is the table that holds the org_role relation/edge.
	OrgRoleTable = "org_role_user"
	// OrgRoleInverseTable is the table name for the OrgRole entity.
	// It exists in this package in order to avoid circular dependency with the "orgrole" package.
	OrgRoleInverseTable = "org_role"
	// OrgRoleColumn is the table column denoting the org_role relation/edge.
	OrgRoleColumn = "org_role_id"
	// OrgUserTable is the table that holds the org_user relation/edge.
	OrgUserTable = "org_role_user"
	// OrgUserInverseTable is the table name for the OrgUser entity.
	// It exists in this package in order to avoid circular dependency with the "orguser" package.
	OrgUserInverseTable = "org_user"
	// OrgUserColumn is the table column denoting the org_user relation/edge.
	OrgUserColumn = "org_user_id"
)

// Columns holds all SQL columns for orgroleuser fields.
var Columns = []string{
	FieldID,
	FieldOrgRoleID,
	FieldOrgUserID,
	FieldUserID,
	FieldOrgID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OrgRoleUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrgRoleID orders the results by the org_role_id field.
func ByOrgRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgRoleID, opts...).ToFunc()
}

// ByOrgUserID orders the results by the org_user_id field.
func ByOrgUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgUserID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// ByOrgRoleField orders the results by org_role field.
func ByOrgRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrgUserField orders the results by org_user field.
func ByOrgUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgUserStep(), sql.OrderByField(field, opts...))
	}
}
func newOrgRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgRoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrgRoleTable, OrgRoleColumn),
	)
}
func newOrgUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrgUserTable, OrgUserColumn),
	)
}
