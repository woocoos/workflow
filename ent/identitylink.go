// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/workflow/ent/identitylink"
	"github.com/woocoos/workflow/ent/task"
)

// IdentityLink is the model entity for the IdentityLink schema.
type IdentityLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// 流程实例ID
	TaskID int `json:"task_id,omitempty"`
	// 流程定义ID
	ProcDefID int `json:"proc_def_id,omitempty"`
	// 组ID
	GroupID int `json:"group_id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 分配人
	AssignerID int `json:"assigner_id,omitempty"`
	// 分配,候选,参与,上级,抄送
	LinkType identitylink.LinkType `json:"link_type,omitempty"`
	// 初始化,认领,删除,通过,驳回
	OperationType identitylink.OperationType `json:"operation_type,omitempty"`
	// 评论
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdentityLinkQuery when eager-loading is set.
	Edges        IdentityLinkEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdentityLinkEdges holds the relations/edges for other nodes in the graph.
type IdentityLinkEdges struct {
	// 流程任务
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdentityLinkEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdentityLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case identitylink.FieldID, identitylink.FieldTenantID, identitylink.FieldTaskID, identitylink.FieldProcDefID, identitylink.FieldGroupID, identitylink.FieldUserID, identitylink.FieldAssignerID:
			values[i] = new(sql.NullInt64)
		case identitylink.FieldLinkType, identitylink.FieldOperationType, identitylink.FieldComments:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdentityLink fields.
func (il *IdentityLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case identitylink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			il.ID = int(value.Int64)
		case identitylink.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				il.TenantID = int(value.Int64)
			}
		case identitylink.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				il.TaskID = int(value.Int64)
			}
		case identitylink.FieldProcDefID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field proc_def_id", values[i])
			} else if value.Valid {
				il.ProcDefID = int(value.Int64)
			}
		case identitylink.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				il.GroupID = int(value.Int64)
			}
		case identitylink.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				il.UserID = int(value.Int64)
			}
		case identitylink.FieldAssignerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assigner_id", values[i])
			} else if value.Valid {
				il.AssignerID = int(value.Int64)
			}
		case identitylink.FieldLinkType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_type", values[i])
			} else if value.Valid {
				il.LinkType = identitylink.LinkType(value.String)
			}
		case identitylink.FieldOperationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation_type", values[i])
			} else if value.Valid {
				il.OperationType = identitylink.OperationType(value.String)
			}
		case identitylink.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				il.Comments = value.String
			}
		default:
			il.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IdentityLink.
// This includes values selected through modifiers, order, etc.
func (il *IdentityLink) Value(name string) (ent.Value, error) {
	return il.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the IdentityLink entity.
func (il *IdentityLink) QueryTask() *TaskQuery {
	return NewIdentityLinkClient(il.config).QueryTask(il)
}

// Update returns a builder for updating this IdentityLink.
// Note that you need to call IdentityLink.Unwrap() before calling this method if this IdentityLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (il *IdentityLink) Update() *IdentityLinkUpdateOne {
	return NewIdentityLinkClient(il.config).UpdateOne(il)
}

// Unwrap unwraps the IdentityLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (il *IdentityLink) Unwrap() *IdentityLink {
	_tx, ok := il.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdentityLink is not a transactional entity")
	}
	il.config.driver = _tx.drv
	return il
}

// String implements the fmt.Stringer.
func (il *IdentityLink) String() string {
	var builder strings.Builder
	builder.WriteString("IdentityLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", il.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", il.TenantID))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", il.TaskID))
	builder.WriteString(", ")
	builder.WriteString("proc_def_id=")
	builder.WriteString(fmt.Sprintf("%v", il.ProcDefID))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", il.GroupID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", il.UserID))
	builder.WriteString(", ")
	builder.WriteString("assigner_id=")
	builder.WriteString(fmt.Sprintf("%v", il.AssignerID))
	builder.WriteString(", ")
	builder.WriteString("link_type=")
	builder.WriteString(fmt.Sprintf("%v", il.LinkType))
	builder.WriteString(", ")
	builder.WriteString("operation_type=")
	builder.WriteString(fmt.Sprintf("%v", il.OperationType))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(il.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// IdentityLinks is a parsable slice of IdentityLink.
type IdentityLinks []*IdentityLink
