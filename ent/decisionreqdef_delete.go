// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/decisionreqdef"
	"github.com/woocoos/workflow/ent/predicate"
)

// DecisionReqDefDelete is the builder for deleting a DecisionReqDef entity.
type DecisionReqDefDelete struct {
	config
	hooks    []Hook
	mutation *DecisionReqDefMutation
}

// Where appends a list predicates to the DecisionReqDefDelete builder.
func (drdd *DecisionReqDefDelete) Where(ps ...predicate.DecisionReqDef) *DecisionReqDefDelete {
	drdd.mutation.Where(ps...)
	return drdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (drdd *DecisionReqDefDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, DecisionReqDefMutation](ctx, drdd.sqlExec, drdd.mutation, drdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (drdd *DecisionReqDefDelete) ExecX(ctx context.Context) int {
	n, err := drdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (drdd *DecisionReqDefDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(decisionreqdef.Table, sqlgraph.NewFieldSpec(decisionreqdef.FieldID, field.TypeInt))
	if ps := drdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, drdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	drdd.mutation.done = true
	return affected, err
}

// DecisionReqDefDeleteOne is the builder for deleting a single DecisionReqDef entity.
type DecisionReqDefDeleteOne struct {
	drdd *DecisionReqDefDelete
}

// Where appends a list predicates to the DecisionReqDefDelete builder.
func (drddo *DecisionReqDefDeleteOne) Where(ps ...predicate.DecisionReqDef) *DecisionReqDefDeleteOne {
	drddo.drdd.mutation.Where(ps...)
	return drddo
}

// Exec executes the deletion query.
func (drddo *DecisionReqDefDeleteOne) Exec(ctx context.Context) error {
	n, err := drddo.drdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{decisionreqdef.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (drddo *DecisionReqDefDeleteOne) ExecX(ctx context.Context) {
	if err := drddo.Exec(ctx); err != nil {
		panic(err)
	}
}
