// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/workflow/ent/deployment"
)

// Deployment is the model entity for the Deployment schema.
type Deployment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 所属根组织ID
	OrgID int `json:"org_id,omitempty"`
	// 所属应用ID
	AppID int `json:"app_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 来源
	Source string `json:"source,omitempty"`
	// 部署时间
	DeployTime time.Time `json:"deploy_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentQuery when eager-loading is set.
	Edges DeploymentEdges `json:"edges"`
}

// DeploymentEdges holds the relations/edges for other nodes in the graph.
type DeploymentEdges struct {
	// ProcDefs holds the value of the proc_defs edge.
	ProcDefs []*ProcDef `json:"proc_defs,omitempty"`
	// DecisionReqs holds the value of the decision_reqs edge.
	DecisionReqs []*DecisionReqDef `json:"decision_reqs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedProcDefs     map[string][]*ProcDef
	namedDecisionReqs map[string][]*DecisionReqDef
}

// ProcDefsOrErr returns the ProcDefs value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentEdges) ProcDefsOrErr() ([]*ProcDef, error) {
	if e.loadedTypes[0] {
		return e.ProcDefs, nil
	}
	return nil, &NotLoadedError{edge: "proc_defs"}
}

// DecisionReqsOrErr returns the DecisionReqs value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentEdges) DecisionReqsOrErr() ([]*DecisionReqDef, error) {
	if e.loadedTypes[1] {
		return e.DecisionReqs, nil
	}
	return nil, &NotLoadedError{edge: "decision_reqs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deployment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID, deployment.FieldCreatedBy, deployment.FieldUpdatedBy, deployment.FieldOrgID, deployment.FieldAppID:
			values[i] = new(sql.NullInt64)
		case deployment.FieldName, deployment.FieldSource:
			values[i] = new(sql.NullString)
		case deployment.FieldCreatedAt, deployment.FieldUpdatedAt, deployment.FieldDeployTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Deployment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deployment fields.
func (d *Deployment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case deployment.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = int(value.Int64)
			}
		case deployment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case deployment.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = int(value.Int64)
			}
		case deployment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case deployment.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				d.OrgID = int(value.Int64)
			}
		case deployment.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				d.AppID = int(value.Int64)
			}
		case deployment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case deployment.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				d.Source = value.String
			}
		case deployment.FieldDeployTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deploy_time", values[i])
			} else if value.Valid {
				d.DeployTime = value.Time
			}
		}
	}
	return nil
}

// QueryProcDefs queries the "proc_defs" edge of the Deployment entity.
func (d *Deployment) QueryProcDefs() *ProcDefQuery {
	return NewDeploymentClient(d.config).QueryProcDefs(d)
}

// QueryDecisionReqs queries the "decision_reqs" edge of the Deployment entity.
func (d *Deployment) QueryDecisionReqs() *DecisionReqDefQuery {
	return NewDeploymentClient(d.config).QueryDecisionReqs(d)
}

// Update returns a builder for updating this Deployment.
// Note that you need to call Deployment.Unwrap() before calling this method if this Deployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deployment) Update() *DeploymentUpdateOne {
	return NewDeploymentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Deployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deployment) Unwrap() *Deployment {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deployment is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deployment) String() string {
	var builder strings.Builder
	builder.WriteString("Deployment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", d.OrgID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", d.AppID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(d.Source)
	builder.WriteString(", ")
	builder.WriteString("deploy_time=")
	builder.WriteString(d.DeployTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProcDefs returns the ProcDefs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *Deployment) NamedProcDefs(name string) ([]*ProcDef, error) {
	if d.Edges.namedProcDefs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedProcDefs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *Deployment) appendNamedProcDefs(name string, edges ...*ProcDef) {
	if d.Edges.namedProcDefs == nil {
		d.Edges.namedProcDefs = make(map[string][]*ProcDef)
	}
	if len(edges) == 0 {
		d.Edges.namedProcDefs[name] = []*ProcDef{}
	} else {
		d.Edges.namedProcDefs[name] = append(d.Edges.namedProcDefs[name], edges...)
	}
}

// NamedDecisionReqs returns the DecisionReqs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *Deployment) NamedDecisionReqs(name string) ([]*DecisionReqDef, error) {
	if d.Edges.namedDecisionReqs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedDecisionReqs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *Deployment) appendNamedDecisionReqs(name string, edges ...*DecisionReqDef) {
	if d.Edges.namedDecisionReqs == nil {
		d.Edges.namedDecisionReqs = make(map[string][]*DecisionReqDef)
	}
	if len(edges) == 0 {
		d.Edges.namedDecisionReqs[name] = []*DecisionReqDef{}
	} else {
		d.Edges.namedDecisionReqs[name] = append(d.Edges.namedDecisionReqs[name], edges...)
	}
}

// Deployments is a parsable slice of Deployment.
type Deployments []*Deployment
