// Code generated by ent, DO NOT EDIT.

package orgrole

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/workflow/ent/predicate"

	"github.com/woocoos/workflow/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldLTE(FieldID, id))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEQ(FieldOrgID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEQ(FieldName, v))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldGT(FieldOrgID, v))
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldGTE(FieldOrgID, v))
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldLT(FieldOrgID, v))
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v int) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldLTE(FieldOrgID, v))
}

// OrgIDIsNil applies the IsNil predicate on the "org_id" field.
func OrgIDIsNil() predicate.OrgRole {
	return predicate.OrgRole(sql.FieldIsNull(FieldOrgID))
}

// OrgIDNotNil applies the NotNil predicate on the "org_id" field.
func OrgIDNotNil() predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNotNull(FieldOrgID))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v Kind) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v Kind) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...Kind) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...Kind) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNotIn(FieldKind, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OrgRole {
	return predicate.OrgRole(sql.FieldContainsFold(FieldName, v))
}

// HasOrgUsers applies the HasEdge predicate on the "org_users" edge.
func HasOrgUsers() predicate.OrgRole {
	return predicate.OrgRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OrgUsersTable, OrgUsersPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUser
		step.Edge.Schema = schemaConfig.OrgRoleUser
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgUsersWith applies the HasEdge predicate on the "org_users" edge with a given conditions (other predicates).
func HasOrgUsersWith(preds ...predicate.OrgUser) predicate.OrgRole {
	return predicate.OrgRole(func(s *sql.Selector) {
		step := newOrgUsersStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUser
		step.Edge.Schema = schemaConfig.OrgRoleUser
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgRoleUser applies the HasEdge predicate on the "org_role_user" edge.
func HasOrgRoleUser() predicate.OrgRole {
	return predicate.OrgRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrgRoleUserTable, OrgRoleUserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgRoleUser
		step.Edge.Schema = schemaConfig.OrgRoleUser
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgRoleUserWith applies the HasEdge predicate on the "org_role_user" edge with a given conditions (other predicates).
func HasOrgRoleUserWith(preds ...predicate.OrgRoleUser) predicate.OrgRole {
	return predicate.OrgRole(func(s *sql.Selector) {
		step := newOrgRoleUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgRoleUser
		step.Edge.Schema = schemaConfig.OrgRoleUser
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrgRole) predicate.OrgRole {
	return predicate.OrgRole(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrgRole) predicate.OrgRole {
	return predicate.OrgRole(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrgRole) predicate.OrgRole {
	return predicate.OrgRole(sql.NotPredicates(p))
}
