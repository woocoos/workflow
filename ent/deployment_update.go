// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/workflow/ent/decisionreqdef"
	"github.com/woocoos/workflow/ent/deployment"
	"github.com/woocoos/workflow/ent/predicate"
	"github.com/woocoos/workflow/ent/procdef"
)

// DeploymentUpdate is the builder for updating Deployment entities.
type DeploymentUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentMutation
}

// Where appends a list predicates to the DeploymentUpdate builder.
func (du *DeploymentUpdate) Where(ps ...predicate.Deployment) *DeploymentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DeploymentUpdate) SetUpdatedBy(i int) *DeploymentUpdate {
	du.mutation.ResetUpdatedBy()
	du.mutation.SetUpdatedBy(i)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableUpdatedBy(i *int) *DeploymentUpdate {
	if i != nil {
		du.SetUpdatedBy(*i)
	}
	return du
}

// AddUpdatedBy adds i to the "updated_by" field.
func (du *DeploymentUpdate) AddUpdatedBy(i int) *DeploymentUpdate {
	du.mutation.AddUpdatedBy(i)
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DeploymentUpdate) ClearUpdatedBy() *DeploymentUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DeploymentUpdate) SetUpdatedAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableUpdatedAt(t *time.Time) *DeploymentUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (du *DeploymentUpdate) ClearUpdatedAt() *DeploymentUpdate {
	du.mutation.ClearUpdatedAt()
	return du
}

// SetName sets the "name" field.
func (du *DeploymentUpdate) SetName(s string) *DeploymentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableName(s *string) *DeploymentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DeploymentUpdate) ClearName() *DeploymentUpdate {
	du.mutation.ClearName()
	return du
}

// SetSource sets the "source" field.
func (du *DeploymentUpdate) SetSource(s string) *DeploymentUpdate {
	du.mutation.SetSource(s)
	return du
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableSource(s *string) *DeploymentUpdate {
	if s != nil {
		du.SetSource(*s)
	}
	return du
}

// ClearSource clears the value of the "source" field.
func (du *DeploymentUpdate) ClearSource() *DeploymentUpdate {
	du.mutation.ClearSource()
	return du
}

// AddProcDefIDs adds the "proc_defs" edge to the ProcDef entity by IDs.
func (du *DeploymentUpdate) AddProcDefIDs(ids ...int) *DeploymentUpdate {
	du.mutation.AddProcDefIDs(ids...)
	return du
}

// AddProcDefs adds the "proc_defs" edges to the ProcDef entity.
func (du *DeploymentUpdate) AddProcDefs(p ...*ProcDef) *DeploymentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddProcDefIDs(ids...)
}

// AddDecisionReqIDs adds the "decision_reqs" edge to the DecisionReqDef entity by IDs.
func (du *DeploymentUpdate) AddDecisionReqIDs(ids ...int) *DeploymentUpdate {
	du.mutation.AddDecisionReqIDs(ids...)
	return du
}

// AddDecisionReqs adds the "decision_reqs" edges to the DecisionReqDef entity.
func (du *DeploymentUpdate) AddDecisionReqs(d ...*DecisionReqDef) *DeploymentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDecisionReqIDs(ids...)
}

// Mutation returns the DeploymentMutation object of the builder.
func (du *DeploymentUpdate) Mutation() *DeploymentMutation {
	return du.mutation
}

// ClearProcDefs clears all "proc_defs" edges to the ProcDef entity.
func (du *DeploymentUpdate) ClearProcDefs() *DeploymentUpdate {
	du.mutation.ClearProcDefs()
	return du
}

// RemoveProcDefIDs removes the "proc_defs" edge to ProcDef entities by IDs.
func (du *DeploymentUpdate) RemoveProcDefIDs(ids ...int) *DeploymentUpdate {
	du.mutation.RemoveProcDefIDs(ids...)
	return du
}

// RemoveProcDefs removes "proc_defs" edges to ProcDef entities.
func (du *DeploymentUpdate) RemoveProcDefs(p ...*ProcDef) *DeploymentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemoveProcDefIDs(ids...)
}

// ClearDecisionReqs clears all "decision_reqs" edges to the DecisionReqDef entity.
func (du *DeploymentUpdate) ClearDecisionReqs() *DeploymentUpdate {
	du.mutation.ClearDecisionReqs()
	return du
}

// RemoveDecisionReqIDs removes the "decision_reqs" edge to DecisionReqDef entities by IDs.
func (du *DeploymentUpdate) RemoveDecisionReqIDs(ids ...int) *DeploymentUpdate {
	du.mutation.RemoveDecisionReqIDs(ids...)
	return du
}

// RemoveDecisionReqs removes "decision_reqs" edges to DecisionReqDef entities.
func (du *DeploymentUpdate) RemoveDecisionReqs(d ...*DecisionReqDef) *DeploymentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDecisionReqIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeploymentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DeploymentMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeploymentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeploymentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeploymentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DeploymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deployment.Table, deployment.Columns, sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(deployment.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(deployment.FieldUpdatedBy, field.TypeInt, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(deployment.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(deployment.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.UpdatedAtCleared() {
		_spec.ClearField(deployment.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(deployment.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(deployment.FieldName, field.TypeString)
	}
	if value, ok := du.mutation.Source(); ok {
		_spec.SetField(deployment.FieldSource, field.TypeString, value)
	}
	if du.mutation.SourceCleared() {
		_spec.ClearField(deployment.FieldSource, field.TypeString)
	}
	if du.mutation.ProcDefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProcDefsTable,
			Columns: []string{deployment.ProcDefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procdef.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedProcDefsIDs(); len(nodes) > 0 && !du.mutation.ProcDefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProcDefsTable,
			Columns: []string{deployment.ProcDefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProcDefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProcDefsTable,
			Columns: []string{deployment.ProcDefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DecisionReqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DecisionReqsTable,
			Columns: []string{deployment.DecisionReqsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decisionreqdef.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDecisionReqsIDs(); len(nodes) > 0 && !du.mutation.DecisionReqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DecisionReqsTable,
			Columns: []string{deployment.DecisionReqsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decisionreqdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DecisionReqsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DecisionReqsTable,
			Columns: []string{deployment.DecisionReqsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decisionreqdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeploymentUpdateOne is the builder for updating a single Deployment entity.
type DeploymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DeploymentUpdateOne) SetUpdatedBy(i int) *DeploymentUpdateOne {
	duo.mutation.ResetUpdatedBy()
	duo.mutation.SetUpdatedBy(i)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableUpdatedBy(i *int) *DeploymentUpdateOne {
	if i != nil {
		duo.SetUpdatedBy(*i)
	}
	return duo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (duo *DeploymentUpdateOne) AddUpdatedBy(i int) *DeploymentUpdateOne {
	duo.mutation.AddUpdatedBy(i)
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DeploymentUpdateOne) ClearUpdatedBy() *DeploymentUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DeploymentUpdateOne) SetUpdatedAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableUpdatedAt(t *time.Time) *DeploymentUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (duo *DeploymentUpdateOne) ClearUpdatedAt() *DeploymentUpdateOne {
	duo.mutation.ClearUpdatedAt()
	return duo
}

// SetName sets the "name" field.
func (duo *DeploymentUpdateOne) SetName(s string) *DeploymentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableName(s *string) *DeploymentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DeploymentUpdateOne) ClearName() *DeploymentUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetSource sets the "source" field.
func (duo *DeploymentUpdateOne) SetSource(s string) *DeploymentUpdateOne {
	duo.mutation.SetSource(s)
	return duo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableSource(s *string) *DeploymentUpdateOne {
	if s != nil {
		duo.SetSource(*s)
	}
	return duo
}

// ClearSource clears the value of the "source" field.
func (duo *DeploymentUpdateOne) ClearSource() *DeploymentUpdateOne {
	duo.mutation.ClearSource()
	return duo
}

// AddProcDefIDs adds the "proc_defs" edge to the ProcDef entity by IDs.
func (duo *DeploymentUpdateOne) AddProcDefIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.AddProcDefIDs(ids...)
	return duo
}

// AddProcDefs adds the "proc_defs" edges to the ProcDef entity.
func (duo *DeploymentUpdateOne) AddProcDefs(p ...*ProcDef) *DeploymentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddProcDefIDs(ids...)
}

// AddDecisionReqIDs adds the "decision_reqs" edge to the DecisionReqDef entity by IDs.
func (duo *DeploymentUpdateOne) AddDecisionReqIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.AddDecisionReqIDs(ids...)
	return duo
}

// AddDecisionReqs adds the "decision_reqs" edges to the DecisionReqDef entity.
func (duo *DeploymentUpdateOne) AddDecisionReqs(d ...*DecisionReqDef) *DeploymentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDecisionReqIDs(ids...)
}

// Mutation returns the DeploymentMutation object of the builder.
func (duo *DeploymentUpdateOne) Mutation() *DeploymentMutation {
	return duo.mutation
}

// ClearProcDefs clears all "proc_defs" edges to the ProcDef entity.
func (duo *DeploymentUpdateOne) ClearProcDefs() *DeploymentUpdateOne {
	duo.mutation.ClearProcDefs()
	return duo
}

// RemoveProcDefIDs removes the "proc_defs" edge to ProcDef entities by IDs.
func (duo *DeploymentUpdateOne) RemoveProcDefIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.RemoveProcDefIDs(ids...)
	return duo
}

// RemoveProcDefs removes "proc_defs" edges to ProcDef entities.
func (duo *DeploymentUpdateOne) RemoveProcDefs(p ...*ProcDef) *DeploymentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemoveProcDefIDs(ids...)
}

// ClearDecisionReqs clears all "decision_reqs" edges to the DecisionReqDef entity.
func (duo *DeploymentUpdateOne) ClearDecisionReqs() *DeploymentUpdateOne {
	duo.mutation.ClearDecisionReqs()
	return duo
}

// RemoveDecisionReqIDs removes the "decision_reqs" edge to DecisionReqDef entities by IDs.
func (duo *DeploymentUpdateOne) RemoveDecisionReqIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.RemoveDecisionReqIDs(ids...)
	return duo
}

// RemoveDecisionReqs removes "decision_reqs" edges to DecisionReqDef entities.
func (duo *DeploymentUpdateOne) RemoveDecisionReqs(d ...*DecisionReqDef) *DeploymentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDecisionReqIDs(ids...)
}

// Where appends a list predicates to the DeploymentUpdate builder.
func (duo *DeploymentUpdateOne) Where(ps ...predicate.Deployment) *DeploymentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeploymentUpdateOne) Select(field string, fields ...string) *DeploymentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deployment entity.
func (duo *DeploymentUpdateOne) Save(ctx context.Context) (*Deployment, error) {
	return withHooks[*Deployment, DeploymentMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeploymentUpdateOne) SaveX(ctx context.Context) *Deployment {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeploymentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeploymentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DeploymentUpdateOne) sqlSave(ctx context.Context) (_node *Deployment, err error) {
	_spec := sqlgraph.NewUpdateSpec(deployment.Table, deployment.Columns, sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deployment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deployment.FieldID)
		for _, f := range fields {
			if !deployment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deployment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(deployment.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(deployment.FieldUpdatedBy, field.TypeInt, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(deployment.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(deployment.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.UpdatedAtCleared() {
		_spec.ClearField(deployment.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(deployment.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(deployment.FieldName, field.TypeString)
	}
	if value, ok := duo.mutation.Source(); ok {
		_spec.SetField(deployment.FieldSource, field.TypeString, value)
	}
	if duo.mutation.SourceCleared() {
		_spec.ClearField(deployment.FieldSource, field.TypeString)
	}
	if duo.mutation.ProcDefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProcDefsTable,
			Columns: []string{deployment.ProcDefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procdef.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedProcDefsIDs(); len(nodes) > 0 && !duo.mutation.ProcDefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProcDefsTable,
			Columns: []string{deployment.ProcDefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProcDefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProcDefsTable,
			Columns: []string{deployment.ProcDefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: procdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DecisionReqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DecisionReqsTable,
			Columns: []string{deployment.DecisionReqsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decisionreqdef.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDecisionReqsIDs(); len(nodes) > 0 && !duo.mutation.DecisionReqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DecisionReqsTable,
			Columns: []string{deployment.DecisionReqsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decisionreqdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DecisionReqsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DecisionReqsTable,
			Columns: []string{deployment.DecisionReqsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decisionreqdef.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Deployment{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
